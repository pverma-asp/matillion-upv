{"job":{"components":{"2967601":{"id":2967601,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1904,"y":-128,"width":32,"height":32,"inputConnectorIDs":[2967620],"outputSuccessConnectorIDs":[2967624],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"send_file_to_galileo"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"import boto3\n#python function to call lambda to encrypt s3 file to send to galileo\n\nbody = json.dumps(dict(operation='put',working_dir='${job_galileo_working_dir}',\n                       s3_output='${job_s3_full_file_name}',\n                       sftp_file_name='${job_s3_file_name}',\n                       lambda_arn='${job_next_lambda}',\n                       db_file_name='${job_db_file_name}'\n                      ))\n\ndef run_lambda():\n    client = boto3.client('lambda', region_name='us-west-2')\n    response = client.invoke(\n    FunctionName='arn:aws:lambda:us-west-2:332894900161:function:sftp-to-s3-python',\n    InvocationType='RequestResponse',\n    LogType='Tail',\n    Payload=body\n    )\n\n    \nif __name__ == \"__main__\":\n    run_lambda()"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967602":{"id":2967602,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1904,"y":-16,"width":32,"height":32,"inputConnectorIDs":[2967626],"outputSuccessConnectorIDs":[2967621],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"decrypt_file"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"import boto3\n#python function to call lambda to decrypt s3 file from galileo\n\nbody = json.dumps(dict(operation='dec',file='${job_file_to_decrypt}',\n                       decrypted_file_path='${job_s3_file_path}',\n                       extension='gpg'\n                      ))\n\ndef run_lambda():\n    client = boto3.client('lambda', region_name='us-west-2')\n    response = client.invoke(\n    FunctionName='arn:aws:lambda:us-west-2:332894900161:function:prod-python-encrypt-decrypt-manual',\n    InvocationType='RequestResponse',\n    LogType='Tail',\n    Payload=body\n    )\n\n    \nif __name__ == \"__main__\":\n    run_lambda()"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967603":{"id":2967603,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-2096,"y":-16,"width":32,"height":32,"inputConnectorIDs":[2967622],"outputSuccessConnectorIDs":[2967630],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"get_galileo_response_file"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"import boto3\n#python function to call lambda to get galileo response file\n\nbody = json.dumps(dict(operation='get',working_dir='${job_response_file_path}',\n                       s3_output='${job_s3_file_name}',\n                       sftp_file_name='${job_galileo_output_file_name}',\n                       lambda_arn='${job_next_lambda}',\n                       db_file_name='${job_db_file_name}'\n                      ))\n\ndef run_lambda():\n    client = boto3.client('lambda', region_name='us-west-2')\n    response = client.invoke(\n    FunctionName='arn:aws:lambda:us-west-2:332894900161:function:sftp-to-s3-python',\n    InvocationType='RequestResponse',\n    LogType='Tail',\n    Payload=body\n    )\n\n    \nif __name__ == \"__main__\":\n    run_lambda()"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967606":{"id":2967606,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-2096,"y":-128,"width":32,"height":32,"inputConnectorIDs":[2967623],"outputSuccessConnectorIDs":[2967625],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"encrypt_file"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"import boto3\n#python function to call lambda to encrypt s3 file to send to galileo\n\nbody = json.dumps(dict(operation='enc',file='${job_file_to_encrypt}',\n                       encrypted_file_path='${job_s3_file_path}',\n                       gpg_key='galileo_public_key',\n                       extension='gpg'\n                      ))\n\ndef run_lambda():\n    client = boto3.client('lambda', region_name='us-west-2')\n    response = client.invoke(\n    FunctionName='arn:aws:lambda:us-west-2:332894900161:function:prod-python-encrypt-decrypt-manual',\n    InvocationType='RequestResponse',\n    LogType='Tail',\n    Payload=body\n    )\n\n    \nif __name__ == \"__main__\":\n    run_lambda()"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967607":{"id":2967607,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-2400,"y":-80,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2967617],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"start"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967628":{"id":2967628,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1776,"y":-16,"width":32,"height":32,"inputConnectorIDs":[2967621],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"archive retrieved gpg file"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport boto3\ns3_resource = boto3.resource(\"s3\")\n\n#move gpg file to archive-gpg\ns3_resource.Object(job_s3_bucket, \n                   \"subscription-billing/from-galileo/archive-gpg/\" + job_galileo_output_file_name).copy_from(\n CopySource = job_s3_bucket + \"/subscription-billing/from-galileo/\" + job_galileo_output_file_name)\n\n#delete gpg from old location\ns3_resource.Object(job_s3_bucket, \n                   \"subscription-billing/from-galileo/\" + job_galileo_output_file_name).delete()"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967629":{"id":2967629,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-2000,"y":-16,"width":32,"height":32,"inputConnectorIDs":[2967630],"outputSuccessConnectorIDs":[2967626],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"get delay"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport time\ntime.sleep(5)"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967631":{"id":2967631,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1776,"y":-128,"width":32,"height":32,"inputConnectorIDs":[2967624],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"archive sent gpg file"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport boto3\ns3_resource = boto3.resource(\"s3\")\n\n#move gpg file to archive-gpg\ns3_resource.Object(job_s3_bucket, \n                   \"subscription-billing/to-galileo/archive-gpg/\" + job_s3_file_name).copy_from(\n CopySource = job_s3_bucket + \"/subscription-billing/to-galileo/\" + job_s3_file_name)\n\n#delete gpg from old location\ns3_resource.Object(job_s3_bucket, \n                   \"subscription-billing/to-galileo/\" + job_s3_file_name).delete()"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967648":{"id":2967648,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-2304,"y":-80,"width":32,"height":32,"inputConnectorIDs":[2967617],"outputSuccessConnectorIDs":[2967627],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"print_variable_values"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nprint(\"Import and Export\")\nprint(\"job_send_or_get: \" + job_send_or_get)\nprint(\"job_next_lambda: \" + job_next_lambda)\nprint(\"job_s3_file_name: \" + job_s3_file_name)\nprint(\"job_s3_file_path: \" + job_s3_file_path)\nprint(\"job_db_file_name: \" + job_db_file_name)\n\nprint(\"\")\nprint(\"Export Only\")\nprint(\"job_file_to_encrypt: \" + job_file_to_encrypt)\nprint(\"job_galileo_working_dir: \" + job_galileo_working_dir)\nprint(\"job_s3_full_file_name: \" + job_s3_full_file_name)\n\nprint(\"\")\nprint(\"Import Only\")\nprint(\"job_galileo_output_file_name: \" + job_galileo_output_file_name)\nprint(\"job_file_to_decrypt: \" + job_file_to_decrypt)\nprint(\"job_response_file_path: \" + job_response_file_path)"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967649":{"id":2967649,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-2192,"y":-80,"width":32,"height":32,"inputConnectorIDs":[2967627],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[2967623],"outputFalseConnectorIDs":[2967622],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"send_or_get"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"job_send_or_get"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"send"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967650":{"id":2967650,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-2000,"y":-128,"width":32,"height":32,"inputConnectorIDs":[2967625],"outputSuccessConnectorIDs":[2967620],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"send delay"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport time\ntime.sleep(5)"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2967620":{"id":2967620,"sourceID":2967650,"targetID":2967601},"2967621":{"id":2967621,"sourceID":2967602,"targetID":2967628},"2967624":{"id":2967624,"sourceID":2967601,"targetID":2967631},"2967625":{"id":2967625,"sourceID":2967606,"targetID":2967650},"2967626":{"id":2967626,"sourceID":2967629,"targetID":2967602},"2967627":{"id":2967627,"sourceID":2967648,"targetID":2967649},"2967630":{"id":2967630,"sourceID":2967603,"targetID":2967629}},"failureConnectors":{},"unconditionalConnectors":{"2967617":{"id":2967617,"sourceID":2967607,"targetID":2967648}},"trueConnectors":{"2967623":{"id":2967623,"sourceID":2967649,"targetID":2967606}},"falseConnectors":{"2967622":{"id":2967622,"sourceID":2967649,"targetID":2967603}},"iterationConnectors":{},"noteConnectors":{},"notes":{"2967604":{"id":2967604,"x":-1963,"y":66,"width":250,"height":58,"text":"The two archive tasks need to be python 3 to work.  After an instance change or upgrade they might get changed to jython and need to be switched back to python 3.","colour":"e6e63c"},"2967605":{"id":2967605,"x":-1669,"y":-216,"width":519,"height":306,"text":"variable to use to decide whether to send or get file from Galileo: job_send_or_get\n\nThese are the variables called in the tasks:\n**export (send)**\n--job_file_to_encrypt - entire path of S3 file picking up to encrypt (ex. \"s3://aspiration-datateam/dump/lnguyen/btrans_584_20191122_005.txt\")\n--job_s3_file_path - folder you want file moved to from job_file_to_encrypt path (can be the same if it's already where you want it).  Folder only - don't give it a file name.  Before it's sent to Galileo.\n--job_s3_file_name - full S3 path to send to Galileo **add .gpg** = job_file_to_encrypt || .gpg\n--job_galileo_working_dir - /sftpdir/batch = for processing (only done on the hour 24/7) ; /sftpdir/response = picking up output file (given based on how big file is - small files ~20 minutes) ; /sftpdir/error = pick up error file ; /sftpdir/test = for testing, won't be processed\n--job_next_lambda - 'arn:aws:lambda:us-west-2:332894900161:function:python-write-to-db' - same for export or import\n\n**import (get)**\n--job_response_file_path - '/sftpdir/response'\n--job_s3_file_name -  full file path and name with .gpg where file should be placed on Aspiration S3\n--job_galileo_output_file_name - same name as file we sent - just append .out.gpg\n--job_next_lambda - 'arn:aws:lambda:us-west-2:332894900161:function:python-write-to-db' - same for export or import\n--job_file_to_decrypt - full file name including path - same as job_s3_file_name - should have .gpg\n--job_s3_file_path - folder only; where to put decrypted file","colour":"e6e63c"}},"variables":{"job_db_file_name":{"definition":{"name":"job_db_file_name","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"none"},"job_file_to_decrypt":{"definition":{"name":"job_file_to_decrypt","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"none"},"job_file_to_encrypt":{"definition":{"name":"job_file_to_encrypt","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"none"},"job_galileo_output_file_name":{"definition":{"name":"job_galileo_output_file_name","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"none"},"job_galileo_working_dir":{"definition":{"name":"job_galileo_working_dir","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"none"},"job_next_lambda":{"definition":{"name":"job_next_lambda","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"arn:aws:lambda:us-west-2:332894900161:function:python-write-to-db"},"job_response_file_path":{"definition":{"name":"job_response_file_path","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"none"},"job_s3_bucket":{"definition":{"name":"job_s3_bucket","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"aspiration-prod-data-planet-protection"},"job_s3_file_name":{"definition":{"name":"job_s3_file_name","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"none"},"job_s3_file_path":{"definition":{"name":"job_s3_file_path","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"none"},"job_s3_full_file_name":{"definition":{"name":"job_s3_full_file_name","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"none"},"job_send_or_get":{"definition":{"name":"job_send_or_get","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"none"}},"grids":{}},"info":{"name":"Subscription Billing Transfer Galileo Files","description":"","type":"ORCHESTRATION","tag":"981e5fb3-7cb4-46ba-9d2e-15e874cb3cb6"}}