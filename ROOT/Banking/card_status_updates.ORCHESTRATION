{"job":{"components":{"2962424":{"id":2962424,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":0,"y":-80,"width":32,"height":32,"inputConnectorIDs":[2962423],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python Script 0"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport boto3\nimport botocore\n\ns3 = boto3.resource('s3')\n\ntry:\n    s3.Object('my-bucket', 'dootdoot.jpg').load()\nexcept botocore.exceptions.ClientError as e:\n    if e.response['Error']['Code'] == \"404\":\n        # The object does not exist.\n        ...\n    else:\n        # Something else has gone wrong.\n        raise\nelse:\n    # The object does exist."}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962425":{"id":2962425,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":176,"y":0,"width":32,"height":32,"inputConnectorIDs":[2962420],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2962421],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of Stage (1)"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"CREATE VIEW IF NOT EXISTS \"RDL\".\"CARD_STATUS_UPDATES\" AS (\n   SELECT *\n        , row_number() OVER (PARTITION BY galileo_card_id ORDER BY new_status_file_date DESC) AS rownum\n   FROM (\n      SELECT crd.card_id AS galileo_card_id\n           , crd.galileo_account_id\n           , crd.prn\n           , to_date(crd.expiration_date,'MMDDYYYY') AS expiration_date\n           , crd.product_id AS galileo_product_id\n           , first_value(CASE WHEN crd.status = 'X' THEN crd.file_date END IGNORE NULLS)\n             OVER (PARTITION BY crd.card_id ORDER BY crd.file_date DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_emboss_file_date\n           , crd.status AS new_status\n           , crd.file_date AS new_status_file_date\n           , lag(crd.status,1) OVER (PARTITION BY crd.card_id ORDER BY crd.file_date ASC) AS old_status\n           , lag(crd.file_date,1) OVER (PARTITION BY crd.card_id ORDER BY crd.file_date ASC) AS old_status_file_date\n           , decode(lag(crd.status,1) OVER (PARTITION BY crd.card_id ORDER BY crd.file_date ASC),crd.status,NULL,\n                    'New Status') AS change\n      FROM rdl.raw_galileo_account_card_data crd\n      )\n   WHERE change = 'New Status'\n   );\n   \nCREATE OR REPLACE TABLE \"RDL\".\"DEBIT_CARD_DAILY\" AS (\n   WITH\n      active_depository AS (\n         SELECT dep.id\n              , dep.account_id\n              , dep.product_id\n              , dep.account_approved_time\n              , upa.account_number AS prn\n              , row_number() over(partition by dep.account_id, upa.account_number, dep.product_id order by dep.id desc) AS rownum\n         FROM web_db.depository dep\n         JOIN web_db.user_payment_account upa ON upa.depository_id = dep.id\n\t\t )\n   SELECT updates.galileo_account_id\n\t\t, upa.account_id\n        , aog.aspiration_user_id AS user_id\n\t\t, updates.prn\n\t\t, dep.id AS depository_id\n\t\t, updates.galileo_card_id\n\t\t, updates.last_emboss_file_date-1 AS last_emboss_date\n\t\t, updates.galileo_product_id\n\t\t, updates.expiration_date\n\t\t, updates.new_status\n\t\t, updates.new_status_file_date-1 AS new_status_date\n\t\t, updates.old_status\n\t\t, updates.old_status_file_date-1 AS old_status_date\n   FROM rdl.card_status_updates updates\n   LEFT JOIN aog_db.galileo_accounts aog ON updates.galileo_card_id = aog.card_id AND updates.galileo_account_id = aog.galileo_account_number AND updates.prn = aog.pmt_ref_no\n   LEFT JOIN web_db.user_product_application upa ON upa.id = aog.aspiration_application_id AND upa.user_id = aog.aspiration_user_id\n   LEFT JOIN active_depository dep ON dep.prn = aog.pmt_ref_no AND dep.account_id = upa.account_id AND dep.product_id = upa.product_id AND dep.rownum = 1\n   WHERE updates.rownum = 1\n     AND updates.new_status_file_date = CURRENT_TIMESTAMP::DATE\n   );"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962428":{"id":2962428,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":0,"y":0,"width":32,"height":32,"inputConnectorIDs":[2962427],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2962420],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of Python Script 0"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Udating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport datetime\n\n#YYYYMMDD\ncontext.updateVariable(\"current_year\", datetime.date.today().strftime('%Y'))\ncontext.updateVariable(\"current_month\", datetime.date.today().strftime('%m'))\ncontext.updateVariable(\"current_day\", datetime.date.today().strftime('%d'))"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962429":{"id":2962429,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-80,"y":-80,"width":32,"height":32,"inputConnectorIDs":[2962426],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2962423],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of File List"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport boto3\nimport datetime\nimport os\n\nrows = context.cursor()\nrows.execute('SELECT DISTINCT etl_filename FROM rdl.swagbucks_redemption')\ndb_files = []\nfor row in rows:\n  db_files.append(row[0])\n\nfile_bucket = ('${input_bucket}').split('s3:/',1)[1].split('/',2)[1].strip('/')\nfile_key = ('${input_bucket}').split(file_bucket,1)[1].strip('/')\nnew_files = []\nfile_number = 0\n\nsvc = boto3.client('s3')\npaginator = svc.get_paginator('list_objects_v2')\npages = paginator.paginate(Bucket=file_bucket, Prefix=file_key)\nfiltered_items = pages.search('Contents[?!contains(Key,`_payouts`) && !contains(Key,`_response`)].{Key: Key, LastModified: LastModified}')\n\nfor item in filtered_items:\n  filename = os.path.split(item['Key'])[1]\n  if filename not in db_files and filename != '':\n    file_number = file_number + 1\n    new_files.extend([[filename,item['LastModified'].strftime('%Y-%m-%d'),file_number]])\n\ncontext.updateGridVariable('bucket_files', new_files)"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962430":{"id":2962430,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":320,"y":0,"width":32,"height":32,"inputConnectorIDs":[2962421],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of Stage (2)"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"COPY INTO 's3://aspiration-data-banking-prod/card_status_updates/inbound/card_status_${current_year}${current_month}${current_day}.csv'\nFROM \"RDL\".\"DEBIT_CARD_DAILY\"\nFILE_FORMAT = ( \n  TYPE = CSV \n  )\nHEADER = TRUE\n--VALIDATION_MODE='RETURN_ROWS'\n;\n--IAM_ROLE 'arn:aws:iam::332894900161:role/RedshiftClusterRole'\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962431":{"id":2962431,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-160,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2962426,2962427],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{},"failureConnectors":{},"unconditionalConnectors":{"2962420":{"id":2962420,"sourceID":2962428,"targetID":2962425},"2962421":{"id":2962421,"sourceID":2962425,"targetID":2962430},"2962423":{"id":2962423,"sourceID":2962429,"targetID":2962424},"2962426":{"id":2962426,"sourceID":2962431,"targetID":2962429},"2962427":{"id":2962427,"sourceID":2962431,"targetID":2962428}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{"current_day":{"definition":{"name":"current_day","type":"TEXT","scope":"BRANCH","description":"","visibility":"PRIVATE"},"value":""},"current_month":{"definition":{"name":"current_month","type":"TEXT","scope":"BRANCH","description":"","visibility":"PRIVATE"},"value":""},"current_year":{"definition":{"name":"current_year","type":"TEXT","scope":"BRANCH","description":"","visibility":"PRIVATE"},"value":""}},"grids":{}},"info":{"name":"card_status_updates","description":"","type":"ORCHESTRATION","tag":"6f2e00fb-ef93-466a-a0ac-e39a4c4fd5c3"}}