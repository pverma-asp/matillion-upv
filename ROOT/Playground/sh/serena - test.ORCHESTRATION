{"job":{"components":{"2958301":{"id":2958301,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1328,"y":-272,"width":32,"height":32,"inputConnectorIDs":[2958407],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"move s3 files"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport boto3\ns3_resource = boto3.resource(\"s3\")\nfile_name = \"Asp_ACH_Returns_Dtl_20201226.csv\"\n\n#file_path = \"aspiration-galileo-prod-sftp-all/2020/4/\"\n#file_path = \"aspiration-etl-staging/file_processing/ach/ach-galileo-file/\"\nfile_path = \"aspiration-datateam/dump/sharris/\"\n\n#move gpg file to archive-gpg\n#s3_resource.Object(\"aspiration-datateam\", \n#                   \"dump/sharris/\" + file_name).copy_from(\n# CopySource= file_path + file_name)\n\ns3_resource.Object(\"aspiration-etl-staging\", \n                   \"file_processing/ach/ach-galileo-file/\" + file_name).copy_from(\n CopySource= file_path + file_name)\n\n\n#delete gpg from old location\n#s3_resource.Object(\"aspiration-etl-staging\", \n#                   \"file_processing/ach/ach-galileo-file/Asp_ACH_Returns_Dtl_20200414.csv\").delete()\n\n\n#move gpg file to archive-gpg\n#s3_resource.Object(\"aspiration-alpha-data-planet-protection\", \n#                   \"subscription-billing/from-galileo/archive-gpg/btrans_584_20191230_sub150033.txt.out.gpg\").copy_from(\n# CopySource=\"aspiration-alpha-data-planet-protection/subscription-billing/from-galileo/btrans_584_20191230_sub150033.txt.out.gpg\")\n\n#delete gpg from old location\n#s3_resource.Object(\"aspiration-prod-data-planet-protection\", \n#                   \"subscription-billing/to-galileo/btrans_584_20200103_sub142313.txt000\").delete()\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958302":{"id":2958302,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-592,"y":-512,"width":32,"height":32,"inputConnectorIDs":[2958443],"outputSuccessConnectorIDs":[2958360],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"user_id matches by name, phone"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--try to add in more user_ids\ndrop table if exists tmp_user_id;\ncreate temp table tmp_user_id as\nwith cust_master_grouped as (\n    select GALILEO_ACCOUNT_ID,\n           ifnull(nullif(ifnull(PRIMARY_CARDHOLDER_FIRST_NAME,'') || ifnull(PRIMARY_CARDHOLDER_LAST_NAME,'')\n               || ifnull(PRIMARY_PHONE_NUMBER,''),''),GALILEO_ACCOUNT_ID) as identifier\n    from rdl.RAW_GALILEO_CUSTOMER_MASTER_DATA\n    group by 1,2\n    having count(distinct identifier) = 1\n)\n, cust_master as (\n    select *, row_number() over (partition by GALILEO_ACCOUNT_ID order by file_date desc) as rn\n    from rdl.RAW_GALILEO_CUSTOMER_MASTER_DATA\n)\n, valid_joint_accounts AS (\n     SELECT ua.account_id\n          , count(1) cnt\n     FROM web_db.user_account ua\n     JOIN web_db.depository d ON ua.account_id = d.account_id\n     JOIN web_db.account a ON ua.account_id = a.id\n     WHERE product_id IN (4,5)\n       AND ua.user_account_type = 2\n     GROUP BY ua.account_id\n     HAVING cnt >= 2\n )\n , joint_users as (\n    select ua.USER_ID\n    from valid_joint_accounts a\n    join WEB_DB.USER_ACCOUNT ua on a.ACCOUNT_ID = ua.ACCOUNT_ID\n )\nselect distinct a.GALILEO_ACCOUNT_ID, up.USER_ID\nfrom rdl.PRN_DEPOSITORY_REFERENCE a\njoin cust_master b on a.GALILEO_ACCOUNT_ID = b.GALILEO_ACCOUNT_ID\njoin cust_master_grouped c on b.GALILEO_ACCOUNT_ID = c.GALILEO_ACCOUNT_ID\njoin WEB_DB.USER_PROFILE up on upper(trim(b.PRIMARY_CARDHOLDER_FIRST_NAME)) = upper(trim(up.FIRST_NAME))\n                           and upper(trim(b.PRIMARY_CARDHOLDER_LAST_NAME)) = upper(trim(up.LAST_NAME))\n                           and trim(b.PRIMARY_PHONE_NUMBER) = trim(up.PHONE_NUMBER)\nleft join joint_users ja on up.USER_ID = ja.USER_ID\nwhere a.user_id is null\nand b.rn = 1\nand ja.USER_ID is null;\n\nupdate rdl.PRN_DEPOSITORY_REFERENCE \nset user_id = src.USER_ID,\n    IS_JOINT_ACCOUNT = coalesce(a.IS_JOINT_ACCOUNT,a2.IS_JOINT_ACCOUNT),\n    account_holder_type = case when a.USER_ID is not null then 'Primary'\n                                        when a2.JOINT_ACCOUNT_SECONDARY_USER_ID is not null then 'Secondary'\n                                        else 'Unknown' end\nfrom tmp_user_id src\nleft join bi.DT_ACCOUNTS a on src.USER_ID = a.USER_ID and a.ACCOUNT_TYPE = 'Checking'\nleft join bi.DT_ACCOUNTS a2 on src.USER_ID = a2.JOINT_ACCOUNT_SECONDARY_USER_ID and a2.ACCOUNT_TYPE = 'Checking'\nwhere rdl.PRN_DEPOSITORY_REFERENCE.GALILEO_ACCOUNT_ID = src.GALILEO_ACCOUNT_ID\nand rdl.PRN_DEPOSITORY_REFERENCE.user_id is null;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958303":{"id":2958303,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-720,"y":-512,"width":32,"height":32,"inputConnectorIDs":[2958433],"outputSuccessConnectorIDs":[2958443],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SQL Script 8"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--temp table to hold header/detail/trailer data\ndrop table if exists tmp_file;\ncreate temp table tmp_file\n(\n  file_id varchar(7),\n  file_row varchar(5000)\n);\n\n--select * from tmp_file order by 1;\n-- select replace(current_date::varchar(20),'-','');\n-- select replace(left(current_time,8)::varchar(20),':','');\n\n--header\ninsert into tmp_file (file_id, file_row)\nselect '000000'::varchar as file_id,\n       'HHEADER'::varchar || rpad('454', 10, ' ')::varchar ||\n       rpad('584', 10, ' ')::varchar ||\n       rpad(('btrans_584_' || replace(current_date::varchar(20), '-', '') || '_pro'\n                 || replace(substring(current_timestamp::varchar,12,8), ':', '')::varchar || '.gpg'::varchar), 50, ' ')::varchar ||\n       to_char(getdate(), 'MMDDYYYY')::varchar as file_row;\n\n--detail\ninsert into tmp_file (file_id, file_row)\nselect lpad(row_number() over (order by spend_galileo_prn desc nulls last)::varchar,6,'0') as galileo_file_record_number,\n       'D' ||\n       galileo_file_record_number ||\n       'R' ||\n       rpad(spend_galileo_prn,50,' ') ||\n        lpad('',21,' ') ||\n        'A' ||\n        'PA ' ||\n        rpad(-1000.00,13,' ') ||\n        rpad('Promotional Credit - Summer Sweepstakes',40,' ') ||\n        rpad(('PRO' || to_char(getdate(), 'YYMMDDHH24SS') || '-' || galileo_file_record_number),20,' ') as detail\n       --select *\nfrom bi.dt_accounts\nwhere user_id in (1882701,1849012)\nand account_type = 'Checking';\n\n--trailer\ninsert into tmp_file (file_id, file_row)\nselect '1000000',\n       'TTRAILER' || rpad(count(*),6,' ')\nfrom bi.dt_accounts\nwhere user_id in (1882701,1849012)\nand account_type = 'Checking';\n\n\n\n--export to S3\ncopy into @public.datateam/dump/sharris/btrans_584_20200914_pro222100.txt\n     from (SELECT file_row FROM tmp_file ORDER BY file_id)\n     file_format =(type=csv format_name='PUBLIC.PLAIN_TEXT' FILE_EXTENSION = 'txt')\n      single = true\n      OVERWRITE = TRUE;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958304":{"id":2958304,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-160,"y":-448,"width":32,"height":32,"inputConnectorIDs":[2958356],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Create trailer sql"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"create view rdl.vw_cached_balance as \nwith plaid as (\n    select a.id,\n           a.DATE_CREATED,\n           a.USER_PAYMENT_ACCOUNT_ID,\n           a.BALANCE,\n           a.ORIGINAL_BALANCE_RESPONSE,\n           b.LAST_FOUR_DIGITS,\n           parse_json(a.ORIGINAL_BALANCE_RESPONSE) as plaid_source\n    from WEB_DB.cached_balance a\n    left join WEB_DB.USER_PAYMENT_ACCOUNT b on a.USER_PAYMENT_ACCOUNT_ID = b.ID\n    --where id = 3602134--USER_PAYMENT_ACCOUNT_ID = 1400668\n)\nselect id as cached_balance_id,\n       USER_PAYMENT_ACCOUNT_ID,\n       case when LAST_FOUR_DIGITS = nullif(trim(value:mask::varchar(10)),'') then true else false end as is_upa_account,\n       DATE_CREATED,\n       --LAST_FOUR_DIGITS,\n       nullif(trim(value:mask::varchar(10)),'') as account_mask,\n       nullif(trim(value:name::char(200)),'') as account_name,\n       nullif(trim(value:official_name::char(200)),'') as account_official_name,\n       value:type::varchar(50) as account_type,\n       value:subtype::varchar(50) as account_subtype,\n       --value:verification_status::varchar(50) as verification_status,\n       value:balances:available::numeric(20,2) as available_balance,\n       value:balances:current::numeric(20,2) as current_balance,\n       value:balances:limit::numeric(20,2) as account_limit\n       --value:balances:iso_currency_code::varchar(20) as iso_currency_code,\n       --ORIGINAL_BALANCE_RESPONSE\nfrom plaid p, lateral flatten (input => p.plaid_source, path => 'accounts')"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958305":{"id":2958305,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-960,"y":-512,"width":32,"height":32,"inputConnectorIDs":[2958401],"outputSuccessConnectorIDs":[2958446],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"sql"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/*DROP TABLE IF EXISTS ush.dt_account_daily_data;\n\ncreate table ush.dt_account_daily_data as\nselect *\nfrom bi.dt_account_daily_data;\n\ndrop table if exists rdl.promo_young_turks_sweepstakes;\ncreate table rdl.promo_young_turks_sweepstakes as\nwith registered_users as (\n    select distinct replace(lower(trim(EMAIL_CORRECTED)),' ','') as email\n    from ush.mktg_95_all_registered_users\n)\n, registered_with_info as (\n    select ru.email,\n           r.FULL_NAME,\n           r.FULL_ADDRESS,\n           r.DATE_OF_BIRTH,\n           row_number() over (partition by ru.email order by r.ENTRY_TIMESTAMP::timestamp) as rn\n    from registered_users ru\n    join ush.mktg_95_all_registered_users r on ru.email = replace(lower(trim(r.EMAIL)),' ','')\n)\n, opened_account as (\n    --account opener must be registered\n    select distinct\n           a.USER_ID,\n           ru.email,\n           'opened_account' as entry_type,\n           a.UNIQUE_ACCOUNT_ID as account,\n           a.INCEPTION_DATE::date as entry_date\n    from registered_users ru\n    join WEB_DB.USER_EMAIL ue on ru.email = replace(lower(trim(ue.EMAIL)),' ','')\n    join bi.DT_ACCOUNTS a on ue.USER_ID = a.USER_ID\n    where a.ACCOUNT_TYPE = 'Checking'\n    and a.INCEPTION_DATE between '2020-07-27' and '2020-08-31'\n    --Valerie set a funding deadline of 9/8/20\n    and a.INITIAL_TRANSFER_POSTED_DATE <= '2020-09-08'\n    and a.TERMINATION_DATE is null\n    and a.SPEND_CURRENT_BALANCE >=0\n    and a.SAVE_CURRENT_BALANCE >=0\n)\n, successful_referral as (\n    --the referrer has to be registered, the referee doesn't\n    select distinct\n           ue.USER_ID,\n           ru.email,\n           'successful_referral' as entry_type,\n           a.UNIQUE_ACCOUNT_ID as account,\n           a.INCEPTION_DATE::date as entry_date\n    from registered_users ru\n    join WEB_DB.USER_EMAIL ue on ru.email = lower(trim(ue.EMAIL))\n    join WEB_DB.USER_SIGNUP us on ue.USER_ID = us.INVITING_USER_ID\n    join bi.DT_ACCOUNTS a on us.INVITED_USER_ID = a.USER_ID\n    where a.ACCOUNT_TYPE = 'Checking'\n    and a.INCEPTION_DATE between '2020-07-27' and '2020-08-31'\n    --Valerie set a funding deadline of 9/8/20\n    and a.INITIAL_TRANSFER_POSTED_DATE <= '2020-09-08'\n    and a.INITIAL_TRANSFER_POSTED_AMOUNT >= 10\n    --no criteria for termination or account balance on the referred customer\n)\n, electronic_entries as (\n    --electronic entries must be in the registered user list and cannot\n    --have more than one entry per day (which will turn to 5x in final list)\n    select ue.user_id as user_id,\n           ru.email,\n           'electronic_entry' as entry_type,\n           a.UNIQUE_ACCOUNT_ID as account,\n           (ee.ENTRY_TIMESTAMP::timestamp)::date as entry_date,\n           min(ee.DAY_PHONE) as DAY_PHONE,\n           min(ee.EVENING_PHONE) as EVENING_PHONE,\n           min(ee.EMPLOYER) as EMPLOYER,\n           min(ee.EMPLOYER_ADDRESS) as EMPLOYER_ADDRESS,\n           min(ee.HOME_ADDRESS) as HOME_ADDRESS\n    from registered_users ru\n    join ush.mktg_95_electronic_entries ee on ru.email = replace(lower(trim(ee.EMAIL)),' ','')\n    left join WEB_DB.USER_EMAIL ue on ru.email = replace(lower(trim(ue.EMAIL)),' ','')\n    left join bi.DT_ACCOUNTS a on ue.USER_ID = a.USER_ID and a.account_type = 'Checking'\n    group by 1,2,3,4,5\n)\n, recordset_times_5 as (\n    select 1 as record union select 2 union select 3 union select 4 union select 5\n)\n, combined as (\n    select user_id, email, account, entry_date, entry_type\n    from opened_account\n    union all\n    select user_id, email, account, entry_date, entry_type\n    from electronic_entries\n    union all\n    select user_id, email, account, entry_date, entry_type\n    from successful_referral\n)\n, combined_times_5 as (\n    select c.*,\n           row_number() over (partition by c.email order by c.entry_date) as rn\n    from combined c\n    cross join recordset_times_5 r\n)\n, entry_list as (\n    select c.user_id,\n           c.email,\n           c.account,\n           c.entry_date,\n           c.entry_type,\n           row_number() over (order by random())::int as random_entry_number,\n           r.FULL_NAME,\n           r.FULL_ADDRESS,\n           r.DATE_OF_BIRTH,\n           ee.EMPLOYER,\n           ee.EMPLOYER_ADDRESS,\n           ifnull(ee.DAY_PHONE, u.PHONE_NUMBER)       as day_phone,\n           ee.EVENING_PHONE\n    from combined_times_5 c\n    join registered_with_info r on c.email = r.email\n    left join electronic_entries ee on c.email = ee.email and c.entry_date = ee.entry_date\n    left join bi.DT_USERS u on c.USER_ID = u.USER_ID\n    where c.rn between 1 and 25\n      and r.rn = 1\n)\n, total_entries as (\n    select count(*) as total_entries_overall\n    from entry_list\n)\n, total_entries_per_email as (\n    select email, count(*) total_entries_per_email\n    from entry_list\n    group by 1\n)\nselect el.*,\n       e.total_entries_per_email,\n       t.total_entries_overall,\n       (e.total_entries_per_email/t.total_entries_overall)::decimal(10,3) as chances_of_winning\nfrom entry_list el\njoin total_entries_per_email e on el.email = e.email\ncross join total_entries t\n;\n\ngrant select on rdl.promo_young_turks_sweepstakes to role looker_role;\ngrant select on rdl.promo_young_turks_sweepstakes to role data_engineering_group;\ngrant select on rdl.promo_young_turks_sweepstakes to role data_science_analytics;\ngrant select on rdl.promo_young_turks_sweepstakes to role read_only_internal_users;\n*/\n\n\nDROP VIEW IF EXISTS rdl.vw_authorized_transactions;\ncreate view rdl.vw_authorized_transactions as\n\nselect t.auth_tran_key,\n       t.file_name,\n       t.file_date,\n       t.unique_program_id,\n       t.galileo_account_id,\n       t.card_identifier,\n       t.transaction_date,\n       t.transaction_currency_code,\n       c1.currency_country,\n       c1.currency,\n       t.address_verification_response,\n       t.authorization_response,\n       r.auth_description as authorization_response_description,\n       t.transaction_amount,\n       t.authorization_code,\n       t.network_code,\n       nc.network_name,\n       t.merchant_number,\n       t.merchant_description,\n       t.merchant_category_code,\n       mcc.description    as merchant_category_code_description,\n       t.transaction_code,\n       gl.description     as transaction_code_description,\n       t.merchant_country_code,\n       c2.country         as merchant_country,\n       t.prn,\n       t.etl_load_date\nfrom rdl.authorized_transactions t\n         left join rdl.authorization_response r on t.authorization_response = r.auth_code\n         left join rdl.currency c1 on t.transaction_currency_code = c1.numeric_currency_code\n         left join rdl.country c2 on t.merchant_country_code = c2.numeric_code::varchar(100)\n         left join etl.merchant_category_codes mcc on t.merchant_category_code = mcc.merchant_category_code\n         left join rdl.galileo_network_code nc on t.network_code = nc.network_code\n         left join web_db.galileo_lookup gl on t.transaction_code = gl.code\n    and gl.field_name = 'TRANSACTION CODE';\n\n\ngrant select on rdl.vw_authorized_transactions to looker_role;\ngrant select on rdl.vw_authorized_transactions to data_science_analytics;\ngrant select on rdl.vw_authorized_transactions to data_engineering_group;\ngrant select on rdl.vw_authorized_transactions to read_only_internal_users;\n               \n/*\ncreate table rdl.currency\n(\n    numeric_currency_code varchar(10),\n    alpha_currency_code varchar(100),\n    currency varchar(100),\n    currency_country varchar(200),\n    withdrawal_date varchar(20),\n    primary key (numeric_currency_code)\n);\n\ninsert into rdl.currency\n(numeric_currency_code, alpha_currency_code, currency, currency_country, withdrawal_date)\nwith curr as (\n    select *,\n           row_number() over (partition by numeric_code order by nullif(trim(withdrawal_date), '') desc, country) as rn\n    from ush.currency\n    where nullif(trim(numeric_code), '') is not null\n    order by numeric_code\n)\nselect\n    numeric_code,\n    alpha_code,\n    currency,\n    case when numeric_code = '840' then 'UNITED STATES' else country end as country,\n    nullif(trim(withdrawal_date),'') as withdrawal_date\nfrom curr\nwhere rn = 1;\n\n\ncreate table rdl.country\n(\n    numeric_code varchar(10),\n    alpha_code   varchar(10),\n    country      varchar(200),\n    notes        varchar(100),\n    is_active     boolean,\n    primary key (numeric_code)\n);\n\n\ninsert into rdl.country\n(numeric_code, alpha_code, country, notes, is_active)\nselect\n    c1.country_code as numeric_code,\n    case c1.country\n      when 'Curaçao' then 'CW'\n      when 'Sudan' then 'SD'\n      when 'Dronning Maud Land' then 'NQ'\n      when 'German Democratic Republic' then 'DD'\n      when 'Bonaire, Sint Eustatius and Saba' then 'BQ'\n      when 'Yemen, Democratic' then 'YD'\n      when 'Sint Maarten (Dutch part)' then 'SX'\n      when 'Johnston Island' then 'JT'\n      when 'Serbia and Montenegro' then 'CS'\n      when 'Midway Islands' then 'MI'\n      else c2.code\n    end as alpha_code,\n    c1.country,\n    c1.notes,\n    c1.is_active\nfrom ush.country c1\nleft join web_db.country c2 on c1.country_code::int = c2.iso_code;\n*/\n/*delete\nfrom etl.SUBSCRIPTION_BILLING\nwhere created_at::date = '2020-09-10'\n*/\n\n/*\ntruncate table etl.subscription_billing;\ncopy into etl.subscription_billing from @PUBLIC.DATATEAM/dump/sharris/subscription_billing.csv\nFILE_FORMAT = (SKIP_HEADER = 1, TYPE = CSV);\n\n\ntruncate table etl.subscription_billing_galileo_output;\ncopy into etl.subscription_billing_galileo_output from @PUBLIC.DATATEAM/dump/sharris/subscription_billing_galileo_output.tsv\nFILE_FORMAT = (TYPE = CSV, FIELD_DELIMITER = '\\t');\n\n\ntruncate table etl.issue_log;\ncopy into etl.issue_log from @PUBLIC.DATATEAM/dump/sharris/issue_log.tsv\n\n\nupdate etl.subscription_billing\nset status = 'exported'\nwhere status = 'no_status_from_galileo'\nand prn is not null\nand INVOICE_TS::date = '2020-09-11'\n\nFILE_FORMAT = (TYPE = CSV, FIELD_DELIMITER = '\\t');\n*/\n\n/* drop table if exists rdl.plaid_bank_account_json_parsed_new;\ncreate table rdl.plaid_bank_account_json_parsed_new as\nwith upa as (\n    select distinct USER_PAYMENT_ACCOUNT_ID\n    from rdl.PLAID_IDENTITIES_ARRAY\n)\n,name as (\n    select USER_PAYMENT_ACCOUNT_ID,\n           upper(trim(replace(ARRAY_VALUE,'\"',''))) as name\n    from rdl.PLAID_IDENTITIES_ARRAY\n    where FIELD_NAME = 'name'\n)\n,email as (\n    select USER_PAYMENT_ACCOUNT_ID,\n           --upper(trim(replace(parse_json(ARRAY_VALUE): data,'\"',''))) as email\n           max(case when ARRAY_VALUE like '%type%primary%' then upper(trim(replace(parse_json(ARRAY_VALUE): data, '\"', ''))) else null end) as primary_email,\n           max(case when ARRAY_VALUE like '%type%secondary%' then upper(trim(replace(parse_json(ARRAY_VALUE): data, '\"', ''))) else null end) as secondary_email,\n           max(case when ARRAY_VALUE like '%type%other%' then upper(trim(replace(parse_json(ARRAY_VALUE): data, '\"', ''))) else null end) as other_email\n    from rdl.PLAID_IDENTITIES_ARRAY\n    where FIELD_NAME = 'email'\n    group by 1\n)\n,address as (\n    select USER_PAYMENT_ACCOUNT_ID,\n           upper(trim(replace(parse_json(ARRAY_VALUE): street, '\"', ''))) as street,\n           upper(trim(replace(parse_json(ARRAY_VALUE): city, '\"', '')))   as city,\n           upper(trim(replace(parse_json(ARRAY_VALUE): state, '\"', '')))  as state,\n           upper(trim(replace(parse_json(ARRAY_VALUE): zip, '\"', '')))    as zip\n    from rdl.PLAID_IDENTITIES_ARRAY\n    where FIELD_NAME = 'address'\n)\n,phone as (\n    select USER_PAYMENT_ACCOUNT_ID,\n           max(case when ARRAY_VALUE like '%type%mobile%' then upper(trim(replace(parse_json(ARRAY_VALUE): data, '\"', ''))) else null end) as primary_mobile_phone_number,\n           max(case when ARRAY_VALUE like '%type%home%' then upper(trim(replace(parse_json(ARRAY_VALUE): data, '\"', ''))) else null end) as primary_home_phone_number,\n           max(case when ARRAY_VALUE like '%type%work%' then upper(trim(replace(parse_json(ARRAY_VALUE): data, '\"', ''))) else null end) as primary_work_phone_number\n    from rdl.PLAID_IDENTITIES_ARRAY\n    where FIELD_NAME = 'phone_number'\n    group by 1\n)\nselect\n    u.user_payment_account_id as plaid_linked_bank_account_id,\n    listagg(distinct n.name, ', ') within group (order by n.name) as name,\n    listagg(distinct coalesce(e.primary_email, e.secondary_email, e.other_email), ', ') within group (order by coalesce(e.primary_email, e.secondary_email, e.other_email)) as email,\n    listagg(distinct a.street, ', ') within group (order by a.street) as street,\n    listagg(distinct a.city, ', ') within group (order by a.city) as city,\n    listagg(distinct a.state, ', ') within group (order by a.state) as state,\n    listagg(distinct a.zip, ', ') within group (order by a.zip) as zip,\n    listagg(distinct p.primary_mobile_phone_number, ', ') within group (order by p.primary_mobile_phone_number) as primary_mobile_phone_number,\n    listagg(distinct p.primary_home_phone_number, ', ') within group (order by p.primary_home_phone_number) as primary_home_phone_number,\n    listagg(distinct p.primary_work_phone_number, ', ') within group (order by p.primary_work_phone_number) as primary_work_phone_number\nfrom upa u\nleft join name n on u.USER_PAYMENT_ACCOUNT_ID = n.USER_PAYMENT_ACCOUNT_ID\nleft join email e on u.USER_PAYMENT_ACCOUNT_ID = e.USER_PAYMENT_ACCOUNT_ID\nleft join address a on u.USER_PAYMENT_ACCOUNT_ID = a.USER_PAYMENT_ACCOUNT_ID\nleft join phone p on u.USER_PAYMENT_ACCOUNT_ID = p.USER_PAYMENT_ACCOUNT_ID\ngroup by 1\n;\n\nalter table rdl.plaid_bank_account_json_parsed rename to rdl.plaid_bank_account_json_parsed_old;\n\nalter table rdl.plaid_bank_account_json_parsed_new rename to rdl.plaid_bank_account_json_parsed;\n\ndrop table if exists rdl.plaid_bank_account_json_parsed_old;\n*/"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958306":{"id":2958306,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-192,"y":-512,"width":32,"height":32,"inputConnectorIDs":[2958450],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"request topic"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop table if exists etl.zendesk_topics;\ncreate table etl.zendesk_topics\n(\n product varchar(300),\n product_display varchar(300), \n topic_description varchar(300),\n topic_id varchar(50),\n category varchar(30)\n);\n\ngrant select on etl.zendesk_topics to data_engineering_group;\n\ninsert into etl.zendesk_topics\nselect 'summit','Summit','Summit Request Topic','360010907832', '_summit'\nunion select 'flagship','Flagship','Investment Request Topic','360011014211','_investment'\nunion select 'flagship_ira','Flagship IRA','Investment Request Topic','360011014211','_investment'\nunion select 'ira','IRA','Investment Request Topic','360011014211','_investment'\nunion select 'redwood','Redwood','Investment Request Topic','360011014211','_investment'\nunion select 'redwood_ira','Redwood IRA','Investment Request Topic','360011014211','_investment'\nunion select 'engagement','Engagement','Engagement Request Topic','360010908172','_eng'\nunion select 'multi_product','Multi-Product','Multi-Product Request Topic','360010908192','_mp'\nunion select 'n_a','N/A','N/A Request Topic','360010908212','_na'\nunion select 'cma','CMA','CMA Request Topic','360014670931','_cma'\nunion select 'nps_outreach_detractor','NPS Outreach Detractor','NPS Topic','360009313111',null\nunion select 'nps_outreach_passive','NPS Outreach Passive','NPS Topic','360009313111',null\nunion select 'nps_outreach_promoter','NPS Outreach Promoter','NPS Topic','360009313111',null\nunion select 'pwif_outreach','PWIF Outreach',null,null,null\nunion select 'plant_your_change_for_all','Plant Your Change For All',null,null,null\nunion select 'zero','Zero','Zero Request Topic','360047658451', '_zero'"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958307":{"id":2958307,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-448,"y":-144,"width":32,"height":32,"inputConnectorIDs":[2958435],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"spend save prn update dt_accounts"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"update bi.dt_accounts\nset SPEND_GALILEO_PRN = src.prn\nfrom (\n      SELECT user_id, prn\n      FROM rdl.VW_USER_PRN\n      WHERE TYPE_OF_ACCOUNT = 'Spend'\n     ) src\nwhere bi.dt_accounts.USER_ID = src.user_id\nand bi.dt_accounts.ACCOUNT_TYPE = 'Checking'\n;\n\nupdate bi.dt_accounts\nset SAVE_GALILEO_PRN = src.prn\nfrom (\n      SELECT user_id, prn\n      FROM rdl.VW_USER_PRN\n      WHERE TYPE_OF_ACCOUNT = 'Save'\n     ) src\nwhere bi.dt_accounts.USER_ID = src.user_id\nand bi.dt_accounts.ACCOUNT_TYPE = 'Checking'\n;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958310":{"id":2958310,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-960,"y":-448,"width":32,"height":32,"inputConnectorIDs":[2958408],"outputSuccessConnectorIDs":[2958449],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Message","mapTo":"component_message"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"component_name"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"permissions"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--use warehouse etl;\n\ngrant select on all tables in schema bi_credit to data_engineering_group;\ngrant select on all tables in schema segment_events.javaapps to data_engineering_group;\ngrant select on all tables in schema public to data_engineering_group;\n--grant select on udr.bi_new_dt_accounts to data_engineering_group;\ngrant select on udr.DT_ACCOUNT_DAILY_DATA to data_engineering_group;\ngrant select on usv.dt_credit_users to data_engineering_group;\ngrant select on usv.dt_depository_transactions to data_engineering_group;\n\n--grant select on ush.DT_ACCOUNT_MONTHLY_DATA to role data_engineering_group;\n\n--grant select on etl.radius_daily_balances to role data_engineering_group;\n\n/*\ngrant select on ush.dt_account_daily_data to role data_engineering_group;\ngrant select on ush.dt_user_daily_data to role data_engineering_group;\ngrant select on ush.dt_user_monthly_data to role data_engineering_group;\ngrant select on ush.dt_account_monthly_data to role data_engineering_group;\ngrant select on ush.dt_account_period_data to role data_engineering_group;\ngrant select on ush.no_balance_accounts to role data_engineering_group;\n*/\n\n--alter table etl.daily_balances rename to etl.daily_balances_old;\n--alter table etl.daily_balances_staging rename to etl.daily_balances;\n--drop table if exists etl.daily_balances_old;\n\n--grant select on all tables in schema bi_new to data_engineering_group;\ngrant select on all tables in schema ush to data_engineering_group;\n--grant select on ush.vw_authorized_transaction to data_science_analytics;\n--grant select on usv.dt_users to data_engineering_group;\n--grant select on ush.dt_accounts to looker_role;\ngrant select on ush.EMAIL_LEAD_REFERENCE to data_science_analytics;\ngrant select on ush.dt_utm_history to data_science_analytics;\ngrant select on all tables in schema etl to data_engineering_group;\ngrant select on all tables in schema sweep_db to data_engineering_group;\n--grant select on bi.dt_accounts_with_unfunded to data_engineering_group;\n\n--grant select on bi_new.dt_accounts to data_engineering_group;\n--grant select on sweep_db.promontory_balance_history to looker_role;\n--grant select on sweep_db.promontory_balance_history to data_science_analytics;\n--grant select on sweep_db.promontory_balance_history to read_only_internal_users;\n\n\n--grant select on all tables in schema events_db to data_science_analytics;\n--grant select on all tables in schema events_db to looker_role;\n--grant select on all tables in schema events_db to read_only_internal_users;\n\n--grant usage on schema events_db to data_science_analytics;\n--grant usage on schema events_db to looker_role;\n--grant usage on schema events_db to read_only_internal_users;\n\n--grant all on ush.ach_return to data_engineering_group;\n--grant all on ush.achaj to data_engineering_group;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958311":{"id":2958311,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-1312,"y":-560,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958401,2958403,2958404,2958406,2958408,2958409,2958410,2958411,2958414,2958415,2958424,2958427,2958431],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958320":{"id":2958320,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-736,"y":-224,"width":32,"height":32,"inputConnectorIDs":[2958447],"outputSuccessConnectorIDs":[2958366,2958438],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"TYP promo tables"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"\n--drop table if exists PROMOTIONS.THANK_YOU_PROGRAM;\ncreate table PROMOTIONS.THANK_YOU_PROGRAM\n(\n    TYP_PROMOTION_ID           NUMBER identity,\n    BATCH_ID                   VARCHAR(50),\n    USER_ID                    BIGINT NOT NULL,\n    UNIQUE_ACCOUNT_ID          VARCHAR(100) not null,\n    EMAIL                      VARCHAR(300),\n    PRN                        VARCHAR(50) not null,\n    MKTG_EMAIL_DATE_PT         DATE not null,\n    PAYMENT_DATE               TIMESTAMPTZ,\n    PAYMENT_AMOUNT             NUMBER(10, 2),\n    STATUS                     VARCHAR(50),\n    GALILEO_FILE_NAME          VARCHAR(50),\n    GALILEO_FILE_RECORD_NUMBER VARCHAR(6),\n    GALILEO_RESPONSE_CODE      VARCHAR(20),\n    CREATED_AT                 TIMESTAMPTZ  not null,\n    UPDATED_AT                 TIMESTAMPTZ  not null\n);\n\n--drop table if exists PROMOTIONS.THANK_YOU_PROGRAM_OUTPUT;\ncreate table PROMOTIONS.THANK_YOU_PROGRAM_OUTPUT\n(\n    OUTPUT_ID                NUMBER identity,\n    BATCH_ID                 VARCHAR(40)                             not null,\n    GALILEO_OUTPUT_FILE_NAME VARCHAR(50)                             not null,\n    RECORD_TYPE              VARCHAR(1)                              not null,\n    RECORD_NUMBER            VARCHAR(6)                              not null,\n    ACCOUNT_ID_TYPE          VARCHAR(1)                              not null,\n    ACCOUNT_IDENTIFIER       VARCHAR(50)                             not null,\n    TRANSACTION_IDENTIFIER   VARCHAR(20)                             not null,\n    GALILEO_RESPONSE_CODE    VARCHAR(4)                              not null,\n    CREATED_AT               TIMESTAMPTZ default CURRENT_TIMESTAMP() not null\n);\n\ngrant select on PROMOTIONS.THANK_YOU_PROGRAM to looker_role;\ngrant select on PROMOTIONS.THANK_YOU_PROGRAM to data_science_analytics;\ngrant select on PROMOTIONS.THANK_YOU_PROGRAM to data_engineering_group;\ngrant select on PROMOTIONS.THANK_YOU_PROGRAM to read_only_internal_users;\n\ngrant select on PROMOTIONS.THANK_YOU_PROGRAM_OUTPUT to data_engineering_group;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958321":{"id":2958321,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-624,"y":-224,"width":32,"height":32,"inputConnectorIDs":[2958438],"outputSuccessConnectorIDs":[2958440],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"issue_log"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"delete from etl.issue_log\n--where ISSUE_PROGRAM = 'Coastal ACH File'\nwhere issue_log_id in (\n\n6068\n\n)\n\n/*update etl.issue_log\nset ISSUE_PROGRAM = 'ACH Entries'\nwhere ISSUE_PROGRAM = 'ACH Received Entries';\n\n\n\ndrop table if exists web_db_stg.posted_transaction;\n\ncreate table web_db_stg.posted_transaction\n(\n\tid bigint,\n\tamount numeric(38,20),\n\tdescription varchar(256),\n\tdepository_id bigint,\n\trunning_balance numeric(38,20),\n\ttransaction_date timestamptz,\n\tprocessor_type integer,\n\tdate_created timestamptz,\n\tlast_updated timestamptz,\n\tmerchant_category_code varchar(5),\n\tpost_date date,\n\tiso_currency_code varchar(4),\n\tguid varchar(65535),\n\tauthorization_code varchar(10),\n\tetl_load_date timestamptz\n);\n\nalter table web_db_stg.posted_transaction owner to svc_etl;\n\ndrop table if exists web_db.posted_transaction_old;\n\n\ninsert into rdl.SCHOLLY_PROMOTION_OUTPUT\n(BATCH_ID, GALILEO_OUTPUT_FILE_NAME, RECORD_TYPE, RECORD_NUMBER, ACCOUNT_ID_TYPE, ACCOUNT_IDENTIFIER, TRANSACTION_IDENTIFIER, GALILEO_RESPONSE_CODE)\nselect\n  case FILE_NAME\n    when 'btrans_584_20210301_pro201912.txt.out' then '57949734-39dd-414d-893f-1d65c0f69832'\n    when 'btrans_584_20210201_pro230841.txt.out' then 'd872b31a-a956-4e60-9861-82c30313e573'\n    when 'btrans_584_20210305_pro174309.txt.out' then '72dfbbe8-fb44-4a2d-b7a7-119a0f2b7031'\n  end as batch_id,\n  FILE_NAME,\n  RECORD_TYPE,\n  RECORD_NUMBER,\n  ACCOUNT_ID_TYPE,\n  ACCOUNT_IDENTIFIER,\n  TRANSACTION_IDENTIFIER,\n  GALILEO_RESPONSE_CODE\nfrom ush.SCHOLLY_PROMOTION_OUTPUT;\n\n\ninsert into rdl.scholly_promotion\n(BATCH_ID, UNIQUE_ACCOUNT_ID, PRN, PAYMENT_DATE, PAYMENT_AMOUNT, STATUS, GALILEO_FILE_NAME, GALILEO_FILE_RECORD_NUMBER, GALILEO_RESPONSE_CODE, CREATED_AT, UPDATED_AT)\nselect\n    BATCH_ID,\n    b.UNIQUE_ACCOUNT_ID,\n    ACCOUNT_IDENTIFIER,\n    case GALILEO_OUTPUT_FILE_NAME\n        when 'btrans_584_20210301_pro201912.txt.out' then '2021-03-01'::timestamp\n        when 'btrans_584_20210201_pro230841.txt.out' then '2021-02-01'::timestamp\n        when 'btrans_584_20210305_pro174309.txt.out' then '2021-03-05'::timestamp\n    end as payment_date,\n    10.00 as payment_amount,\n    'exported' as status,\n    left(GALILEO_OUTPUT_FILE_NAME,33) as file_name,\n    RECORD_NUMBER,\n    GALILEO_RESPONSE_CODE,\n    current_timestamp,\n    current_timestamp\nfrom rdl.SCHOLLY_PROMOTION_OUTPUT a\nleft join bi.DT_ACCOUNTS b on a.ACCOUNT_IDENTIFIER = b.SPEND_GALILEO_PRN ;\n*/"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958322":{"id":2958322,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1232,"y":-288,"width":32,"height":32,"inputConnectorIDs":[2958405],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"script from Onfido"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"import sys\nimport onfido\nimport datetime\nfrom pprint import pprint\nfrom onfido.rest import ApiException\nimport http.client\nimport json\nimport itertools\n\n#import constants\n\n#import onfidoServiceV3\nimport itertools\nimport csv\nimport collections\nfrom datetime import datetime, timezone, timedelta\nimport time\n\napiToken='api_sandbox.YHR4joksvk_.p4GoDQ3Iv7vaaa_N11x3DaXZc6j6zDqU'\nconfiguration = onfido.Configuration()\nconfiguration.api_key['Authorization'] = 'token=' + apiToken\nconfiguration.api_key_prefix['Authorization'] = 'Token'\n\n# Limit the at-rest region, if needed (optional, see https://documentation.onfido.com/#regions)\n# configuration.host = configuration.get_host_from_settings(1, {'region': 'us'})\n\napi_instance = onfido.DefaultApi(onfido.ApiClient(configuration))\n#conn = http.client.HTTPSConnection(\"api.onfido.com\")\n\n\n\ndef getApplicants(numberOfApplicants,pageNumber,includeDeleted):\n    api_instance = onfido.DefaultApi(onfido.ApiClient(configuration))\n    try:\n        api_response = api_instance.list_applicants(page=pageNumber, per_page=numberOfApplicants, include_deleted=includeDeleted)\n    except ApiException as e:\n        print(\"Exception when calling DefaultApi->list_applicants: %s\\n\" % e)\n    return api_response.__getattribute__(\"applicants\")\n\ndef getApplicant(applicant_id):\n    api_instance = onfido.DefaultApi(onfido.ApiClient(configuration))\n    try:\n        api_response = api_instance.find_applicant(applicant_id)\n    except ApiException as e:\n        print(\"Exception when calling DefaultApi->list_applicants: %s\\n\" % e)\n    return api_response\n    \ndef getChecks(applicant_id):\n    api_instance = onfido.DefaultApi(onfido.ApiClient(configuration))\n    try:\n        api_response = api_instance.list_checks(applicant_id)\n        #print(api_response)\n        #if len(api_response.checks) < 1:\n        #    print(applicant_id)\n        #    deleteApplicant(applicant_id)\n        return api_response\n    except ApiException as e:\n        print(\"Exception when calling DefaultApi->find_check: %s\\n\" % e)\n\ndef getReports(check_id):\n    api_instance = onfido.DefaultApi(onfido.ApiClient(configuration))\n    try:\n        api_response = api_instance.list_reports(check_id)\n        return api_response\n    except ApiException as e:\n        print(\"Exception when calling DefaultApi->list_reports: %s\\n\" % e)\n\ndef getReport(report_id):\n    api_instance = onfido.DefaultApi(onfido.ApiClient(configuration))\n    try:\n        api_response = api_instance.find_report(report_id)\n        return api_response\n    except ApiException as e:\n        print(\"Exception when calling DefaultApi->find_report: %s\\n\" % e)\n        \n        \ncounter_applicants = 0\n#counter_checks = 0\ncounter_reports = 0\n\n\nnow_utc=datetime.now(timezone.utc)\n\nfor a in range(1,30):    \n    applicants=getApplicants(20, a, includeDeleted=False)\n    print(\"\\n\\n On Page \"+ str(a))\n    for applicant in applicants:\n        #print(applicant.id)\n        time.sleep(1)\n        counter_applicants +=1\n        for check in getChecks(applicant.id).checks:\n            #print(check.id)\n            #if now_utc-timedelta(hours=24) <= check.created_at <= now_utc:\n                #print(check.created_at)\n            for report_id in check.report_ids:\n                report = getReport(report_id)\n                print(report_id)\n                #print(report)\n                counter_reports +=1\n                \n\n                \nprint(\"\\n\")\nprint(\"\\n\")           \nprint(\"The total number of applicants:\", counter_applicants)    \nprint(\"The total number of reports:\", counter_reports)                  \n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958323":{"id":2958323,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1280,"y":-400,"width":32,"height":32,"inputConnectorIDs":[2958403],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958405],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Onfido"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"#from __future__ import print_function\nimport time\nimport onfido\nfrom onfido.rest import ApiException\nfrom pprint import pprint\nconfiguration = onfido.Configuration()\n#configuration.api_key['Authorization'] = 'token=' + 'api_sandbox.YHR4joksvk_.p4GoDQ3Iv7vaaa_N11x3DaXZc6j6zDqU'\nconfiguration.api_key['Authorization'] = 'token=' + 'api_live._xC77a8Doic.cSwGV7z8OQaQpvr5RblDm417BuOeKrDA'\nconfiguration.api_key_prefix['Authorization'] = 'Token'\n\n# create an instance of the API class\napi_instance = onfido.DefaultApi(onfido.ApiClient(configuration))\npage = 1 # int | The page to return. The first page is `page=1` (optional) (default to 1)\nper_page = 10 # int | The number of objects per page. (optional) (default to 20)\ninclude_deleted = False # bool | Whether to also include applicants scheduled for deletion. (optional) (default to False)\n\ntry:\n    # List Applicants\n    api_response = api_instance.list_applicants(page=page, per_page=per_page, include_deleted=include_deleted)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling DefaultApi->list_applicants: %s\\n\" % e)\n    \n    #while api_response != '{'applicants': []}'"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958324":{"id":2958324,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-850,"y":-506,"width":32,"height":32,"inputConnectorIDs":[2958446],"outputSuccessConnectorIDs":[2958433],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SQL Script 3"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"update rdl.ACH_GALILEO_FILE\nset return_code = trim(return_code)"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958325":{"id":2958325,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-432,"y":-288,"width":32,"height":32,"inputConnectorIDs":[2958434],"outputSuccessConnectorIDs":[2958358],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SQL Script 2"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop table if exists aoa_db.alloy_evaluations_old;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958326":{"id":2958326,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-832,"y":-224,"width":32,"height":32,"inputConnectorIDs":[2958448],"outputSuccessConnectorIDs":[2958447],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SQL Script 5"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Insert into rdl.ach_galileo_file\n(\n    file_name,\n    file_date,\n    transaction_date,\n    load_date,\n    transaction_type,\n    amount,\n    transaction_id,\n    return_code\n)\nselect distinct\n    'Asp_ACH_Returns_All.csv',\n    '2021-06-28',\n    ('20' || split_part(split_part(TRANS_DATE,'/',3),' ',1) || '-' ||\n                  split_part(TRANS_DATE,'/',1) || '-' || split_part(TRANS_DATE,'/',2) || ' ' ||\n                  split_part(split_part(TRANS_DATE,'/',3),' ',2))::timestamp_tz as TRANS_DATE,\n    ('20' || split_part(split_part(LOAD_DATE,'/',3),' ',1) || '-' ||\n                  split_part(LOAD_DATE,'/',1) || '-' || split_part(LOAD_DATE,'/',2) || ' ' ||\n                  split_part(split_part(LOAD_DATE,'/',3),' ',2))::timestamp_tz as LOAD_DATE,\n    trans_type,\n    amt,\n    nullif(trim(ext_trans_id),''),\n    nullif(trim(return_code),'')\nfrom etl.ach_galileo_file_staging;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958327":{"id":2958327,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-960,"y":-224,"width":32,"height":32,"inputConnectorIDs":[2958404],"outputSuccessConnectorIDs":[2958445,2958448],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"stella views"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop view if exists api.v_stella_feedback_return_latest_record;\ncreate view api.v_stella_feedback_return_latest_record as\nwith stella_feedback as (\n    select *,\n           row_number() over (partition by EXTERNAL_INTERACTION_ID order by SEQUENCE_ID desc) as record_num\n    from api.V_STELLA_FEEDBACK_RETURN\n)\nselect *\nfrom stella_feedback\nwhere record_num = 1;\n\ndrop view if exists api.v_STELLA_QA_DATA_RETURN_latest_record;\ncreate view api.v_STELLA_QA_DATA_RETURN_latest_record as\nwith stella_qa as (\n    select *,\n           row_number() over (partition by INTERACTION_ID order by SEQUENCE_ID desc) as record_num\n    from api.STELLA_QA_DATA_RETURN\n)\nselect *\nfrom stella_qa\nwhere record_num = 1;\n\ngrant select on all views in schema rdl to role looker_role;\ngrant select on all views in schema rdl to role data_engineering_group;\ngrant select on all views in schema rdl to role data_science_analytics;\ngrant select on all views in schema rdl to role read_only_internal_users;\ngrant select on all views in schema rdl to role svc_segment;\n\n\n/*\ndrop table if exists etl.credit_campaign_term;\n\ncreate table etl.credit_campaign_term as\nselect '%credit-zero%' as credit_campaign_term\nunion all select '%credit-waitlist%';\n\n\ncreate table web_db.posted_transaction_new\n(\n\tid bigint,\n\tamount numeric(38,20),\n\tdescription varchar(256),\n\tdepository_id bigint,\n\trunning_balance numeric(38,20),\n\ttransaction_date timestamptz,\n\tprocessor_type integer,\n\tdate_created timestamptz,\n\tlast_updated timestamptz,\n\tmerchant_category_code varchar(5),\n\tpost_date date,\n\tiso_currency_code varchar(4),\n\tguid varchar(65535),\n\tauthorization_code varchar(10),\n\tetl_load_date timestamptz\n);\n\nalter table web_db.posted_transaction_new owner to svc_etl;\n\n\ninsert into web_db.posted_transaction_new\nselect * from web_db.posted_transaction;\n*/"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958328":{"id":2958328,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-960,"y":-304,"width":32,"height":32,"inputConnectorIDs":[2958410],"outputSuccessConnectorIDs":[2958432],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"etl.depository_transaction_merchant"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"insert into etl.depository_transaction_merchant\nselect 807, '%soapbox soap%'\nunion select 807, '%soapboxsoap%'\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958329":{"id":2958329,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-624,"y":-448,"width":32,"height":32,"inputConnectorIDs":[2958444],"outputSuccessConnectorIDs":[2958367],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Message","mapTo":"component_message"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"component_name"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of Create Header SQL Script"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/*insert into etl.issue_log\n(issue_program, issue_description, issue_count, issue_object, issue_identifier, issue_priority)\nselect\n       'test',\n       'records inserted: ${record_count}',\n        ${record_count},\n       'blah',\n       'blah',\n       'low';\n       */\n--alter table etl.alloy_evaluations_flattened_staging add \"Socure 30_score_versions\" varchar(1000) null;\n--alter table rdl.alloy_evaluations_flattened add \"Socure 30_score_versions\" varchar(1000) null;\n\n--alter table etl.alloy_evaluations_flattened_staging RENAME column blah TO \"socure 30_score_versions\";\n--alter table rdl.alloy_evaluations_flattened RENAME column blah TO \"socure 30_score_versions\";\n\n--GRANT USAGE ON SCHEMA USH TO role LOOKER_ROLE;\ndrop table if exists etl.control_parameter;\n\ncreate table etl.control_parameter\n(\n    parameter_name varchar(100) not null,\n    parameter_description varchar(300) not null,\n    parameter_value varchar(100) not null,\n    parameter_date_type varchar(50) not null\n);\n\ninsert into etl.control_parameter\nselect 'account_daily_start_date',\n       'Date to begin pulling data for the table dt_account_daily_data.  Originally was 2014-10-01',\n       '2019-01-01',\n       'date';\n       \ngrant select on etl.control_parameter to role data_engineering_group;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958330":{"id":2958330,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-528,"y":-288,"width":32,"height":32,"inputConnectorIDs":[2958413],"outputSuccessConnectorIDs":[2958434],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SQL Script 1"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop table if exists aoa_db_stg.alloy_evaluations;\n\ncreate table aoa_db_stg.alloy_evaluations\n(\n    id                          bigint,\n    evaluation_token            varchar(1000),\n    result_status               varchar(50),\n    user_product_application_id bigint,\n    submitted_at                timestamptz,\n    alloy_entity_id             bigint,\n    created_at                  timestamptz,\n    updated_at                  timestamptz,\n    etl_load_date               timestamptz\n);"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958331":{"id":2958331,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-736,"y":-288,"width":32,"height":32,"inputConnectorIDs":[2958432],"outputSuccessConnectorIDs":[2958413],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"etl.depository_transaction_merchant_exclude"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/*create table etl.depository_transaction_merchant_exclude\n(\n company_id bigint not null,\n transaction_description varchar(200)\n)  ;\n*/\n\ninsert into etl.depository_transaction_merchant_exclude\nselect 819 as company_id, '%hold%' as no_match\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958332":{"id":2958332,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-960,"y":-384,"width":32,"height":32,"inputConnectorIDs":[2958411],"outputSuccessConnectorIDs":[2958400],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{"1":{"slot":1,"fromId":null,"fromName":"Message","mapTo":"component_message"},"2":{"slot":2,"fromId":null,"fromName":"Component","mapTo":"component_name"}},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"export variable test"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--drop table if exists rdl.alloy_evaluations_flattened_old;\n\n--create table rdl.alloy_evaluations_flattened_old as\n--select * from rdl.alloy_evaluations_flattened;\n\n--grant select on rdl.alloy_evaluations_flattened to svc_looker;\n\n--VACUUM rdl.alloy_evaluations_flattened;\n--analyze rdl.alloy_evaluations_flattened;\n\n\n--grant select on usharris.ach_dump to group read_only_group;\n--drop table usharris.dt_users\n\ncreate table etl.depository_transaction_merchant\n(\n  company_id bigint not null,\n  transaction_description varchar(300) not null\n) DISTSTYLE ALL;\n\n--truncate table etl.depository_transaction_merchant\ninsert into etl.depository_transaction_merchant\n(company_id, transaction_description)\nselect 810,'%feed projects%'\nunion select 809,'%blueapron.com%'\nunion select 809, '%blue%apron%order%'\nunion select 809, '%blue%apron%foods%'\nunion select 809, '%blue%apron%28 liberty%'\nunion select 809, '%blue%apron%5 crosby%'\nunion select 809, '%blue%apron%8882784349%';\n\ngrant select on etl.depository_transaction_merchant to group read_only_group;\ngrant all on etl.depository_transaction_merchant to group data_eng_group;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958333":{"id":2958333,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1344,"y":-352,"width":32,"height":32,"inputConnectorIDs":[2958409],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958407],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python Script 0"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport boto3\ns3_resource = boto3.resource(\"s3\")\nfile_name = \"ACHACHP125108997PD20191023T160559.ACHACHP125108997PD20191023T160559\"\n\n#move gpg file to archive-gpg\ns3_resource.Object(\"aspiration-datateam\", \n                   \"dump/sharris/\" + file_name).copy_from(\n CopySource=\"aspiration-etl-staging/file_processing/ach/coastal_file_drop/\" + file_name)\n\n\n#move gpg file to archive-gpg\n#s3_resource.Object(\"aspiration-alpha-data-planet-protection\", \n#                   \"subscription-billing/from-galileo/archive-gpg/btrans_584_20191230_sub150033.txt.out.gpg\").copy_from(\n# CopySource=\"aspiration-alpha-data-planet-protection/subscription-billing/from-galileo/btrans_584_20191230_sub150033.txt.out.gpg\")\n\n#delete gpg from old location\n#s3_resource.Object(\"aspiration-prod-data-planet-protection\", \n#                   \"subscription-billing/to-galileo/btrans_584_20200103_sub142313.txt000\").delete()\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958334":{"id":2958334,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1032749985,"x":-816,"y":-448,"width":32,"height":32,"inputConnectorIDs":[2958449],"outputSuccessConnectorIDs":[2958444],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Query Result To Scalar 0"}}}},"visible":true},"2":{"slot":2,"name":"SQL Query","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"select count(*) as row_count_query\nfrom ush.test"}}}},"visible":true},"3":{"slot":3,"name":"Scalar Variable Mapping","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"record_count"},"2":{"slot":2,"type":"STRING","value":"ROW_COUNT_QUERY"}}}},"visible":true},"4":{"slot":4,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958335":{"id":2958335,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-816,"y":-368,"width":32,"height":32,"inputConnectorIDs":[2958400],"outputSuccessConnectorIDs":[2958361],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"get job hour"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\n# get hour job starts in\n\nimport uuid\nfrom datetime import datetime,timezone\nfrom dateutil import tz\nfrom_zone = tz.gettz('America/Los_Angeles')\ndateTimeObj = datetime.now()\ndateTimeObj = dateTimeObj.replace(tzinfo=timezone.utc).astimezone(tz=from_zone)\ntimestampStr = dateTimeObj.strftime(\"%H\")\ncontext.updateVariable('job_hour', timestampStr)\nprint (timestampStr)\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Python 3"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958351":{"id":2958351,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-867,"y":-124,"width":32,"height":32,"inputConnectorIDs":[2958445],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"LOOKER WH settings"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"LOOKER"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"STATEMENT_TIMEOUT_IN_SECONDS"},"2":{"slot":2,"type":"STRING","value":"3600"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958365":{"id":2958365,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-888888192,"x":-1577,"y":-97,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Google BigQuery 0"}}}},"visible":true},"2":{"slot":2,"name":"Basic/Advanced Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Basic"}}}},"visible":true},"3":{"slot":3,"name":"Authentication","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":true},"6":{"slot":6,"name":"Data Source","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":true},"7":{"slot":7,"name":"Data Selection","elements":{},"visible":true},"8":{"slot":8,"name":"Data Source Filter","elements":{},"visible":true},"9":{"slot":9,"name":"Combine Filters","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"10":{"slot":10,"name":"SQL Query","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SELECT ..."}}}},"visible":false},"11":{"slot":11,"name":"Limit","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"100"}}}},"visible":true},"12":{"slot":12,"name":"Connection Options","elements":{},"visible":true},"13":{"slot":13,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":true},"14":{"slot":14,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":true},"15":{"slot":15,"name":"Target Table","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":true},"16":{"slot":16,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":true},"17":{"slot":17,"name":"S3 Staging Area","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":true},"18":{"slot":18,"name":"Primary Keys","elements":{},"visible":true},"20":{"slot":20,"name":"Data Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"106":{"slot":106,"name":"Project ID","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":true},"107":{"slot":107,"name":"Dataset ID","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":true},"108":{"slot":108,"name":"SQL Dialect","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Legacy"}}}},"visible":false},"1001":{"slot":1001,"name":"","elements":{},"visible":false},"1013":{"slot":1013,"name":"Auto Debug","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Off"}}}},"visible":true},"1014":{"slot":1014,"name":"Debug Level","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"3"}}}},"visible":false},"1992":{"slot":1992,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1993":{"slot":1993,"name":"Use Accelerated Endpoint","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"False"}}}},"visible":false},"1994":{"slot":1994,"name":"Stage","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"1995":{"slot":1995,"name":"Stage Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1996":{"slot":1996,"name":"Stage Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1997":{"slot":1997,"name":"New Table Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"1998":{"slot":1998,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1999":{"slot":1999,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"2000":{"slot":2000,"name":"Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Standard"}}}},"visible":true},"40000":{"slot":40000,"name":"Encryption","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"None"}}}},"visible":true},"40001":{"slot":40001,"name":"KMS Key ID","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"40501":{"slot":40501,"name":"","elements":{},"visible":false},"40502":{"slot":40502,"name":"Load Options","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"On"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"Off"}}},"3":{"slot":3,"values":{"1":{"slot":1,"type":"STRING","value":"On"}}},"5":{"slot":5,"values":{"1":{"slot":1,"type":"STRING","value":"On"}}},"6":{"slot":6,"values":{"1":{"slot":1,"type":"STRING","value":"Gzip"}}}},"visible":true},"63319":{"slot":63319,"name":"Stage Authentication","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Credentials"}}}},"visible":false},"63320":{"slot":63320,"name":"Storage Account","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"63321":{"slot":63321,"name":"Blob Container","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"63322":{"slot":63322,"name":"Storage Integration","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"84533":{"slot":84533,"name":"Storage Integration","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"88340":{"slot":88340,"name":"","elements":{},"visible":false},"88341":{"slot":88341,"name":"Stage Platform","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Existing Amazon S3 Location"}}}},"visible":true},"88342":{"slot":88342,"name":"Stage Authentication","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Credentials"}}}},"visible":true},"88343":{"slot":88343,"name":"Storage Integration","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"88344":{"slot":88344,"name":"Use Accelerated Endpoint","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"False"}}}},"visible":false},"88345":{"slot":88345,"name":"Stage","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Custom]"}}}},"visible":true},"98776":{"slot":98776,"name":"GCS Staging Area","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958368":{"id":2958368,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":1897708461,"x":-304,"y":-272,"width":32,"height":32,"inputConnectorIDs":[2958358],"outputSuccessConnectorIDs":[2958359],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of Excel - Detail"}}}},"visible":true},"2":{"slot":2,"name":"Basic/Advanced Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Advanced"}}}},"visible":true},"6":{"slot":6,"name":"Data Source","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Received Entries Detail"}}}},"visible":false},"7":{"slot":7,"name":"Data Selection","elements":{},"visible":false},"8":{"slot":8,"name":"Data Source Filter","elements":{},"visible":false},"9":{"slot":9,"name":"Combine Filters","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":false},"10":{"slot":10,"name":"SQL Query","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SELECT '${file_name}' as file_name,    \n    A as Receiver_Account_Number,\n    B as Receiver_Account_Number_canonical_form,\n    C as Settlement_Date,\n    D as Receiver_Name,\n    E as Entry_Description,\n    F as SEC,\n    G as Originator_Name,\n    H as Originator_ID,\n    I as Originator_ID_canonical_form,\n    J as ID_Check_IAT_Receiver_ID,\n    K as Fed_ACH_Process_Date,\n    L as Received_Originated,\n    M as Effective_Entry_Date,\n    N as Same_Day_Settlement,\n    O as Company_Descriptive_Date,\n    P as Trace_Number,\n    Q as Dollar_Amount,\n    R as Transaction_Code,\n    S as Credit_Debit,\n    T as Category,\n    U as Originating_ABA,\n    V as Receiving_ABA,\n    W as Company_Discretionary_Data,\n    X as Entry_Discretionary_Data,\n    Y as Check_number,\n    Z as Individual_ID,\n    AA as Originator_Status_Code,\n    AB as Originator_Country_Code,\n    AC as ODFI_Branch_Country_Code,\n    AD as ISO_Destination_Country_Code,\n    AE as ISO_Originating_Currency_Code,\n    AF as Originator_Street_Address,\n    AG as Originator_City_State_Province,\n    AH as Originator_Country_Postal_Code,\n    AI as IAT_Originating_DFI_Name,\n    AJ as IAT_Originating_DFI_ID,\n    AK as Gateway_Operator_OFAC_Screening_Indicator,\n    AL as Secondary_OFAC_Screening_Indicator,\n    AM as IAT_Transaction_Type_Code,\n    AN as IAT_Payment_Related_Information_Field_1,\n    AO as IAT_Payment_Related_Information_Field_2,\n    AP as NACHA_Same_Day_Fee,\n    AQ as Return_Change_Code,\n    AR as File_ID_Modifier,\n    AS as Batch_Number\nfrom SheetData\n"}}}},"visible":true},"11":{"slot":11,"name":"Limit","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"12":{"slot":12,"name":"Connection Options","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DefineTables"},"2":{"slot":2,"type":"STRING","value":"SheetData=Received Entries Detail!A9:AS500000"}}}},"visible":true},"13":{"slot":13,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":true},"14":{"slot":14,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"ETL"}}}},"visible":true},"15":{"slot":15,"name":"Target Table","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"RER_ACH_DETAIL"}}}},"visible":true},"16":{"slot":16,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":true},"17":{"slot":17,"name":"S3 Staging Area","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"aspiration-etl-staging"}}}},"visible":true},"18":{"slot":18,"name":"Primary Keys","elements":{},"visible":true},"20":{"slot":20,"name":"Data Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Excel"}}}},"visible":false},"400":{"slot":400,"name":"Storage URL","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${s3_path}${file_name}"}}}},"visible":true},"401":{"slot":401,"name":"Cell Range","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"402":{"slot":402,"name":"Contains Header Row","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"No"}}}},"visible":true},"403":{"slot":403,"name":"Credentials","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":true},"498":{"slot":498,"name":"Storage Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Amazon S3 Storage"}}}},"visible":true},"1001":{"slot":1001,"name":"","elements":{},"visible":false},"1013":{"slot":1013,"name":"Auto Debug","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Off"}}}},"visible":true},"1014":{"slot":1014,"name":"Debug Level","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"3"}}}},"visible":false},"1992":{"slot":1992,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1994":{"slot":1994,"name":"Stage","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"1995":{"slot":1995,"name":"Stage Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1996":{"slot":1996,"name":"Stage Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1997":{"slot":1997,"name":"New Table Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"1998":{"slot":1998,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1999":{"slot":1999,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"2000":{"slot":2000,"name":"Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Standard"}}}},"visible":true},"40000":{"slot":40000,"name":"Encryption","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"None"}}}},"visible":true},"40001":{"slot":40001,"name":"KMS Key ID","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"40501":{"slot":40501,"name":"","elements":{},"visible":false},"40502":{"slot":40502,"name":"Load Options","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"On"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"Off"}}},"3":{"slot":3,"values":{"1":{"slot":1,"type":"STRING","value":"Off"}}},"4":{"slot":4,"values":{"1":{"slot":1,"type":"STRING","value":""}}},"5":{"slot":5,"values":{"1":{"slot":1,"type":"STRING","value":"On"}}}},"visible":true},"63320":{"slot":63320,"name":"Storage Account","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"63321":{"slot":63321,"name":"Blob Container","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"84533":{"slot":84533,"name":"Integration","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"88340":{"slot":88340,"name":"","elements":{},"visible":false},"88341":{"slot":88341,"name":"Staging","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Existing Amazon S3 Location"}}}},"visible":true},"98776":{"slot":98776,"name":"GCS Staging Area","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958369":{"id":2958369,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-512,"y":-368,"width":32,"height":32,"inputConnectorIDs":[2958357],"outputSuccessConnectorIDs":[2958439],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of create ach_received_entries"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--drop table if exists rdl.ach_received_entries;\ncreate table rdl.ach_originated_entries\n(\n    file_date date,\n    report_generation_date date,\n    reporting_date_range date,\n    --receiving_aba varchar(100),\n    FILE_NAME varchar(100),      \n    Receiver_Account_Number varchar(100),\n    Receiver_Account_Number_canonical_form varchar(100),\n    Settlement_Date date,\n    Receiver_Name varchar(500),\n    Entry_Description varchar(100),\n    SEC varchar(100),\n    Originator_Name varchar(100),\n    Originator_ID varchar(100),\n    Originator_ID_canonical_form varchar(100),\n    ID_Check_IAT_Receiver_ID varchar(100),\n    Fed_ACH_Process_Date date,\n    Received_Originated varchar(100),\n    Effective_Entry_Date date,\n    Same_Day_Settlement varchar(100),\n    Company_Descriptive_Date varchar(100),\n    Trace_Number varchar(100),\n    Dollar_Amount decimal(20,2),\n    Transaction_Code varchar(100),\n    Credit_Debit varchar(100),\n    Category varchar(100),\n    Originating_ABA varchar(100),\n    Receiving_ABA varchar(100),\n    Company_Discretionary_Data varchar(100),\n    Entry_Discretionary_Data varchar(100),\n    Check_number varchar(100),\n    Individual_ID varchar(300),\n    Originator_Status_Code varchar(100),\n    Originator_Country_Code varchar(100),\n    ODFI_Branch_Country_Code varchar(100),\n    ISO_Destination_Country_Code varchar(100),\n    ISO_Originating_Currency_Code varchar(100),\n    Originator_Street_Address varchar(100),\n    Originator_City_State_Province varchar(100),\n    Originator_Country_Postal_Code varchar(100),\n    IAT_Originating_DFI_Name varchar(100),\n    IAT_Originating_DFI_ID varchar(100),\n    Gateway_Operator_OFAC_Screening_Indicator varchar(100),\n    Secondary_OFAC_Screening_Indicator varchar(100),\n    IAT_Transaction_Type_Code varchar(100),\n    IAT_Payment_Related_Information_Field_1 varchar(100),\n    IAT_Payment_Related_Information_Field_2 varchar(100),\n    NACHA_Same_Day_Fee varchar(100),\n    Return_Change_Code varchar(100),\n    File_ID_Modifier varchar(100),\n    Batch_Number varchar(100)\n);\n\n\ngrant select on rdl.ach_received_entries_returns to data_engineering_group;\ngrant select on rdl.ach_received_entries_returns to looker_role;\ngrant select on rdl.ach_received_entries_returns to data_science_analytics;\ngrant select on rdl.ach_received_entries_returns to read_only_internal_users;\n\n--insert into rdl.ach_received_entries\n--select reporting_date_range, * from ush.ach_received_entries;\n\n/*\ninsert into rdl.ach_received_entries\nwith header as (\n    select a.FILE_NAME,\n           a.FIELD_VALUE::date as report_generation_date,\n           b.FIELD_VALUE::date as reporting_date_range,\n           c.FIELD_VALUE as receiving_aba\n    from etl.RER_ACH_HEADER a\n    left join etl.RER_ACH_HEADER b on a.FILE_NAME = b.FILE_NAME and b.FIELD_NAME = 'Reporting Date Range:'\n    left join etl.RER_ACH_HEADER c on a.FILE_NAME = c.FILE_NAME and c.FIELD_NAME = 'Receiving ABA:'\n    where a.field_name = 'Report Generation Date'\n)\nselect\n    h.report_generation_date,\n    h.reporting_date_range,\n    --h.receiving_aba,\n    d.FILE_NAME,\n    d.RECEIVER_ACCOUNT_NUMBER,\n    d.RECEIVER_ACCOUNT_NUMBER_CANONICAL_FORM,\n    d.SETTLEMENT_DATE::date as SETTLEMENT_DATE,\n    d.RECEIVER_NAME,\n    d.ENTRY_DESCRIPTION,\n    d.SEC,\n    d.ORIGINATOR_NAME,\n    d.ORIGINATOR_ID,\n    d.ORIGINATOR_ID_CANONICAL_FORM,\n    d.ID_CHECK_IAT_RECEIVER_ID,\n    d.FED_ACH_PROCESS_DATE::date as FED_ACH_PROCESS_DATE,\n    d.RECEIVED_ORIGINATED,\n    d.EFFECTIVE_ENTRY_DATE::date as EFFECTIVE_ENTRY_DATE,\n    d.SAME_DAY_SETTLEMENT,\n    d.COMPANY_DESCRIPTIVE_DATE,\n    d.TRACE_NUMBER,\n    d.DOLLAR_AMOUNT::decimal(20,2) as DOLLAR_AMOUNT,\n    d.TRANSACTION_CODE,\n    d.CREDIT_DEBIT,\n    d.CATEGORY,\n    d.ORIGINATING_ABA,\n    d.RECEIVING_ABA,\n    d.COMPANY_DISCRETIONARY_DATA,\n    d.ENTRY_DISCRETIONARY_DATA,\n    d.CHECK_NUMBER,\n    d.INDIVIDUAL_ID,\n    d.ORIGINATOR_STATUS_CODE,\n    d.ORIGINATOR_COUNTRY_CODE,\n    d.ODFI_BRANCH_COUNTRY_CODE,\n    d.ISO_DESTINATION_COUNTRY_CODE,\n    d.ISO_ORIGINATING_CURRENCY_CODE,\n    d.ORIGINATOR_STREET_ADDRESS,\n    d.ORIGINATOR_CITY_STATE_PROVINCE,\n    d.ORIGINATOR_COUNTRY_POSTAL_CODE,\n    d.IAT_ORIGINATING_DFI_NAME,\n    d.IAT_ORIGINATING_DFI_ID,\n    d.GATEWAY_OPERATOR_OFAC_SCREENING_INDICATOR,\n    d.SECONDARY_OFAC_SCREENING_INDICATOR,\n    d.IAT_TRANSACTION_TYPE_CODE,\n    d.IAT_PAYMENT_RELATED_INFORMATION_FIELD_1,\n    d.IAT_PAYMENT_RELATED_INFORMATION_FIELD_2,\n    d.NACHA_SAME_DAY_FEE,\n    d.RETURN_CHANGE_CODE,\n    d.FILE_ID_MODIFIER,\n    d.BATCH_NUMBER\nfrom header h\njoin etl.RER_ACH_DETAIL d on h.FILE_NAME = d.FILE_NAME\n;\n\n*/"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958370":{"id":2958370,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-405,"y":-229,"width":32,"height":32,"inputConnectorIDs":[2958364],"outputSuccessConnectorIDs":[2958435],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"vw_user_prn"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop view if exists rdl.vw_user_prn;\ncreate view rdl.vw_user_prn as \nwith cust_master as (\n    select a.GALILEO_ACCOUNT_ID,\n           case b.DESCRIPTION\n            when 'Savings Account' then 'Save'\n            when 'Spending Account' then 'Spend'\n           end as TYPE_OF_ACCOUNT,\n           CONCAT(current_balance_sign,current_balance::decimal(13,2))::DEC(18,2) as balance,\n           row_number() over (partition by a.GALILEO_ACCOUNT_ID order by FILE_DATE desc) as rn\n    from rdl.RAW_GALILEO_CUSTOMER_MASTER_DATA a\n    join WEB_DB.GALILEO_LOOKUP b on a.TYPE_OF_ACCOUNT = b.CODE and b.FILE = 'C'\n    where a.TYPE_OF_ACCOUNT in ('6','8')\n    --limit 1000\n)\n, upa_spend_save as (\n    select user_id,\n           ACCOUNT_NUMBER as prn,\n           case when NAME in ('Aspiration Spend','COASTAL COMMUNITY BANK') then 'Spend'\n                when NAME in ('Aspiration Save','Save Account') then 'Save' end as type_of_account,\n           row_number() over (partition by user_id, NAME order by DATE_CREATED) as rn\n    from WEB_DB.USER_PAYMENT_ACCOUNT\n    where (NAME in ('Aspiration Spend','Aspiration Save')\n          or (NAME in ('Save Account','COASTAL COMMUNITY BANK') and ROUTING_NUMBER = '125108997'))\n    and IS_DELETED = false\n)\n, rotated as (\n    select\n        p.USER_ID,\n        p.NEW_SPEND_PRN as PMT_REF_NO,\n        p.NEW_SPEND_BALANCE_ID::varchar(50) as galileo_account_id,\n        a.ACCOUNT_NUMBER as ASPIRATION_ACCOUNT_NUMBER,\n        'Spend' as type_of_account\n    from WEB_DB.ACCOUNT_ROTATION_PRN_HISTORY p\n    join WEB_DB.USER_ACCOUNT ua on p.USER_ID = ua.USER_ID\n    join WEB_DB.ACCOUNT a on ua.ACCOUNT_ID = a.ID\n    where p.NEW_SPEND_PRN is not null\n    and a.ACCOUNT_TYPE_ID = 2\n    and exists (select 1 from WEB_DB.DEPOSITORY d where a.ID = d.ACCOUNT_ID and d.PRODUCT_ID in (4,5))\n    union\n    select\n        p.USER_ID,\n        p.NEW_SAVE_PRN as PMT_REF_NO,\n        p.NEW_SAVE_BALANCE_ID::varchar(50) as galileo_account_id,\n        a.ACCOUNT_NUMBER as ASPIRATION_ACCOUNT_NUMBER,\n        'Save' as type_of_account\n    from WEB_DB.ACCOUNT_ROTATION_PRN_HISTORY p\n    join WEB_DB.USER_ACCOUNT ua on p.USER_ID = ua.USER_ID\n    join WEB_DB.ACCOUNT a on ua.ACCOUNT_ID = a.ID and a.ACCOUNT_TYPE_ID = 2\n    where p.NEW_SAVE_PRN is not null\n    and a.ACCOUNT_TYPE_ID = 2\n    and exists (select 1 from WEB_DB.DEPOSITORY d where a.ID = d.ACCOUNT_ID and d.PRODUCT_ID in (4,5))\n)\n, ga as (\n    select ga.ASPIRATION_USER_ID as user_id,\n           case ga.PMT_REF_NO\n              when 'XXXXXXXXXXXX'\n              then case ga.GALILEO_ACCOUNT_NUMBER\n                    when '1388396' then '223111874903'\n                    when '1388400' then '223111874945'\n                    when '1388401' then '223111874952'\n                    when '1388399' then '223111874937'\n                    when '1388397' then '223111874911'\n                    when '1388395' then '223111874895'\n                    when '1388398' then '223111874929'\n                    when '1388394' then '223111874887'\n                    else ga.PMT_REF_NO\n                   end\n              else ga.PMT_REF_NO\n           end as PMT_REF_NO,\n           ga.GALILEO_ACCOUNT_NUMBER as galileo_account_id,\n           ga.ASPIRATION_ACCOUNT_NUMBER,\n           cm.TYPE_OF_ACCOUNT,\n           row_number() over (partition by ga.ASPIRATION_USER_ID, cm.TYPE_OF_ACCOUNT\n                              order by up.ACCOUNT_NUMBER nulls last, cm.balance desc nulls last, ga.CREATED_AT) as rn\n    from aog_db.galileo_accounts ga\n    INNER JOIN web_db.user_product_application upa ON (upa.id = ga.aspiration_application_id)\n    --join below to web_db.account is important for selecting the correct PRN - sometimes\n    --there are multiple PRN's connected with a user, but not all are their actual active account\n    INNER JOIN web_db.account a on ga.aspiration_account_number = a.account_number\n    join cust_master cm on ga.GALILEO_ACCOUNT_NUMBER = cm.GALILEO_ACCOUNT_ID and cm.rn = 1\n    --using WEB_DB.USER_PAYMENT_ACCOUNT to help select prn\n    left join WEB_DB.USER_PAYMENT_ACCOUNT up on ga.ASPIRATION_USER_ID = up.USER_ID\n                                             and ga.PMT_REF_NO = up.ACCOUNT_NUMBER\n                                             and up.IS_DELETED = false\n    where ga.active = TRUE\n    AND upa.account_type_id = 2\n    --and ga.ASPIRATION_USER_ID in (195110,421617)\n)\nselect\n    ga.user_id,\n    ga.TYPE_OF_ACCOUNT,\n    --r.PMT_REF_NO as rotated_prn, ga.PMT_REF_NO as original_prn, usp.prn as usp_prn,\n    --re: case statements below, if user_payment_account.account_number doesn't match what's in\n    --ACCOUNT_ROTATION_PRN_HISTORY for a user, then account rotation failed, and we'll stay with original prn\n    case when r.PMT_REF_NO is not null and usp.prn = r.PMT_REF_NO\n         then r.PMT_REF_NO\n         else ga.PMT_REF_NO\n    end as prn,\n    case when r.PMT_REF_NO is not null and usp.prn = r.PMT_REF_NO\n         then r.galileo_account_id\n         else ga.galileo_account_id\n    end as galileo_account_id,\n         -- coalesce(r.PMT_REF_NO, ga.PMT_REF_NO) as prn,\n    --coalesce(r.galileo_account_id, ga.galileo_account_id) as galileo_account_id,\n    ga.ASPIRATION_ACCOUNT_NUMBER\nfrom ga\nleft join rotated r on ga.user_id = r.USER_ID\n                   and ga.TYPE_OF_ACCOUNT = r.type_of_account\nleft join upa_spend_save usp on ga.user_id = usp.USER_ID\n                            and ga.TYPE_OF_ACCOUNT = usp.type_of_account\n                            and usp.rn = 1\nwhere ga.rn = 1;\n\n\ngrant select on rdl.vw_user_prn to data_engineering_group;\ngrant select on rdl.vw_user_prn to looker_role;\ngrant select on rdl.vw_user_prn to data_science_analytics;\ngrant select on rdl.vw_user_prn to read_only_internal_users;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958371":{"id":2958371,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-512,"y":-224,"width":32,"height":32,"inputConnectorIDs":[2958440],"outputSuccessConnectorIDs":[2958364],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"scholly"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/*\nupdate rdl.scholly_promotion \nset status = 'ready_for_export' \nwhere status = 'no_status_from_galileo';\n*/\nupdate rdl.scholly_promotion \nset status = 'exported' \nwhere GALILEO_FILE_NAME = 'btrans_584_20220401_sch095007.txt'"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958372":{"id":2958372,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-288,"y":-448,"width":32,"height":32,"inputConnectorIDs":[2958367],"outputSuccessConnectorIDs":[2958356],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"credit and non-credit user lists"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop table if exists etl.dt_user_credit_wait_list;\n\n\ndrop table if exists etl.dt_user_upa_credit;\n\n\ndrop table if exists etl.dt_user_upa_non_credit;\n\n\ndrop table if exists etl.dt_user_credit_sign_up;\n\n\ndrop table if exists etl.dt_user_credit_invitation;\n\ndrop table if exists etl.credit_campaign_term;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958373":{"id":2958373,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-1536,"y":-256,"width":32,"height":32,"inputConnectorIDs":[2958436],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dt table"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse dev;\n\n\n\n\n-- use warehouse looker;\n-- alter session set QUOTED_IDENTIFIERS_IGNORE_CASE = true;\n\nSET TIMEZONE = 'America/Los_Angeles';\n\n--3 temp tables below are used to extract segment url data\n-- drop table if exists tmp_segment_lead;\n-- create temp table tmp_segment_lead as\n-- with seg as (\n--     select\n--            --nullif(trim(user_id), '') as user_id,\n--            email,\n--            nullif(trim(context_campaign_source),'') as context_campaign_source,\n--            nullif(trim(context_campaign_medium),'') as context_campaign_medium,\n--            nullif(trim(context_campaign_term),'') as context_campaign_term,\n--            nullif(trim(context_campaign_content),'') as context_campaign_content,\n--            nullif(trim(context_campaign_name),'') as context_campaign_name,\n--            case when context_page_search like '%click_id%'\n--                 then context_page_search\n--                 else null end as context_page_search,\n--            case when context_page_referrer like '%click_id%'\n--                 then context_page_referrer\n--                 else null end as context_page_referrer,\n--            received_at,\n--            row_number() over (partition by email order by received_at nulls last) as rn\n--     from segment_events.prod_segment_js.email_lead_submitted\n--     where (context_page_search like '%click_id%'\n--              or context_page_referrer like '%click_id%')\n--       and nullif(trim(email), '') is not null\n-- )\n-- select *,\n--        nvl(context_page_referrer, context_page_search) as url\n-- from seg\n-- where rn = 1;\n--\n-- drop table if exists tmp_segment_pages;\n-- create temp table tmp_segment_pages as\n-- with email as (\n--     select\n--         user_id,\n--         email,\n--         row_number() over (partition by user_id order by date_created desc nulls last) as rn\n--     from web_db.user_email\n--     where is_primary = true\n-- ),\n-- seg as (\n--     select\n--            u.id as user_id,\n--            e.email,\n--            nullif(trim(p.context_campaign_source),'') as context_campaign_source,\n--            nullif(trim(p.context_campaign_medium),'') as context_campaign_medium,\n--            nullif(trim(p.context_campaign_term),'') as context_campaign_term,\n--            nullif(trim(p.context_campaign_content),'') as context_campaign_content,\n--            nullif(trim(p.context_campaign_name),'') as context_campaign_name,\n--            case when p.context_page_search like '%click_id%'\n--                 then p.context_page_search\n--                 else null end as context_page_search,\n--            case when p.context_page_referrer like '%click_id%'\n--                 then p.context_page_referrer\n--                 else null end as context_page_referrer,\n--            p.received_at,\n--            row_number() over (partition by p.user_id order by p.received_at nulls last) as rn\n--     from segment_events.prod_segment_js.pages p\n--     join web_db._user u on p.user_id = u.uuid\n--     join email e on u.id = e.user_id and e.rn = 1\n--     where (p.context_page_search like '%click_id%'\n--              or p.context_page_referrer like '%click_id%')\n-- )\n-- select *,\n--        nvl(context_page_referrer, context_page_search) as url\n-- from seg\n-- where rn = 1;\n--\n-- drop table if exists etl.segment_url;\n-- create table etl.segment_url as\n-- with combined as (\n--     select email, received_at, url, context_campaign_source, context_campaign_name,\n--            context_campaign_medium, context_campaign_term, context_campaign_content\n--     from tmp_segment_lead\n--     union\n--     select email, received_at, url, context_campaign_source, context_campaign_name,\n--            context_campaign_medium, context_campaign_term, context_campaign_content\n--     from tmp_segment_pages\n--     ),\n-- combined_rn as (\n--     select *,\n--            row_number() over (partition by email order by received_at asc nulls last) as rn\n--     from combined\n-- )\n-- select *\n-- from combined_rn\n-- where rn = 1;\n\n--table to exclude users who only have the PYC Lite product\ndrop table if exists tmp_pyc_lite_only;\ncreate temp table tmp_pyc_lite_only as\nwith pyc_lite as (\n    select distinct USER_ID\n    from WEB_DB.USER_PRODUCT_APPLICATION upa\n    join WEB_DB.PRODUCT p on upa.PRODUCT_ID = p.id\n    where p.CODE = 'PYC-LITE'\n)\n, non_pyc_lite as (\n    select distinct USER_ID\n    from WEB_DB.USER_PRODUCT_APPLICATION upa\n    join WEB_DB.PRODUCT p on upa.PRODUCT_ID = p.id\n    where p.CODE != 'PYC-LITE'\n)\nselect pl.USER_ID\nfrom pyc_lite pl\nleft join non_pyc_lite npl on pl.USER_ID = npl.USER_ID\nwhere npl.USER_ID is null;\n\n--temp table below is used to identify credit leads\ndrop table if exists tmp_credit_lead_email;\ncreate temp table tmp_credit_lead_email as\nselect email\nfrom ush.DT_UTM_HISTORY\nwhere PRODUCT_ID = 8\nor PRODUCT_CODE in ('CREDIT-WAITLIST','BSB-CREDIT')\nor IS_CREDIT_UTM = true\ngroup by 1;\n\n-- drop table if exists tmp_credit_lead_user_id;\n-- create temp table tmp_credit_lead_user_id as\n-- select INVITED_USER_ID as USER_ID\n-- from WEB_DB.USER_SIGNUP a\n-- join WEB_DB.PRODUCT_WAITLIST b on a.PRODUCT_WAITLIST_ID = b.ID\n-- where b.PRODUCT_ID = 8\n-- union\n-- select INVITED_USER_ID as USER_ID\n-- from WEB_DB.USER_SIGNUP a\n-- join WEB_DB.USER_INVITATION b on a.USER_INVITATION_ID = b.ID\n-- where b.PRODUCT_ID = 8\n-- union\n-- --need queries below for people where wait list email differs from primary email\n-- select ue.USER_ID\n-- from tmp_credit_lead_email e\n-- join WEB_DB.USER_EMAIL ue on e.EMAIL = lower(ue.EMAIL)\n-- union\n-- select c.INVITED_USER_ID\n-- from WEB_DB.PRODUCT_WAITLIST a\n-- join WEB_DB.USER_INVITATION b on lower(a.EMAIL) = lower(b.EMAIL)\n-- join WEB_DB.USER_SIGNUP c on b.ID = c.USER_INVITATION_ID\n-- where a.PRODUCT_ID = 8;\n---use warehouse looker;\n--list of users for dt_users - combination of leads and non-leads\ndrop table if exists tmp_user_base;\ncreate temp table tmp_user_base as\nwith lead as (\n    select PRIMARY_EMAIL as LEAD_EMAIL,\n           USER_ID AS LEAD_USER_ID,\n           UUID AS LEAD_UUID\n    from ush.EMAIL_LEAD_REFERENCE\n    group by 1,2,3\n)\n, user as (\n    select USER_ID_PRIMARY as USER_ID,\n           EMAIL_PRIMARY as EMAIL,\n           UUID_PRIMARY as UUID\n    from ush.USER_ID_REFERENCE\n    group by 1,2,3\n) --select * from user where USER_ID in (253108,253927)\n, list as (\n    select *\n    from lead l\n    full outer join user u on l.LEAD_USER_ID = u.USER_ID\n) --select * from list where user_id in (253108,253927)\n, result as (\n    select ifnull(EMAIL, LEAD_EMAIL)     as email,\n           ifnull(USER_ID, LEAD_USER_ID) as user_id,\n           ifnull(UUID, LEAD_UUID)       as uuid\n    from list\n) --select * from result where USER_ID in (253108,253927)\nselect r.*,\n       u.ENABLED,\n       u.DATE_CREATED,\n       e.IS_VALIDATED,\n       us.DATE_CREATED as date_sign_up,\n       us.USER_INVITATION_ID,\n       ui.DATE_CREATED as date_user_invitation,\n       ui.CODE as code_invitation,\n       ui.INVITING_USER_ID,\n       us.INVITING_USER_ID as INVITING_USER_ID_US\nfrom result r\nleft join WEB_DB._USER u on r.user_id = u.id\nleft join WEB_DB.USER_EMAIL e on r.user_id = e.USER_ID and r.email = lower(trim(e.email))\nleft join WEB_DB.USER_SIGNUP us on r.user_id = us.INVITED_USER_ID\nleft join WEB_DB.USER_INVITATION ui on us.USER_INVITATION_ID = ui.ID;\n\n-- --table below used for email lead matching for cases where people have changed their emails since becoming a lead\n-- drop table if exists etl.dt_users_email;\n-- create table etl.dt_users_email as\n-- with waitlist_emails as (\n--     select lower(email) as email\n--     from WEB_DB.WAIT_LIST_USER\n--     union\n--     select lower(email)\n--     from WEB_DB.PRODUCT_WAITLIST\n-- )\n-- , user_data as (\n--     select a.EMAIL,\n--            c.INVITED_USER_ID as user_id\n--     from waitlist_emails a\n--     join WEB_DB.USER_INVITATION b on a.EMAIL = lower(b.EMAIL)\n--     join WEB_DB.USER_SIGNUP c on b.ID = c.USER_INVITATION_ID\n-- )\n-- , email as (\n--     select lower(email) as email,\n--            user_id,\n--            row_number() over (partition by user_id order by last_updated desc) as rn\n--     from web_db.user_email\n--     where is_primary = true\n-- )\n-- , list as (\n--     select w.EMAIL,\n--            e.EMAIL as primary_email,\n--            u.user_id,\n--            case when w.EMAIL = e.email then 1 else 2 end as priority_order,\n--            row_number() over (partition by w.email order by priority_order) as rn\n--     from waitlist_emails w\n--     left join user_data u on w.EMAIL = u.EMAIL\n--     left join email e on u.user_id = e.USER_ID and e.rn = 1\n--     where primary_email is not null\n-- )\n-- select email,\n--        primary_email,\n--        user_id\n-- from list\n-- where rn = 1;\n\n--remove email records where the link is probably to a different person or circular\n-- delete\n-- from etl.dt_users_email\n-- where EMAIL != PRIMARY_EMAIL\n-- and EMAIL in (select PRIMARY_EMAIL from etl.DT_USERS_EMAIL);\n\n--etl.dt_users will be used as a base for both non-credit and credit versions of dt_users\nDROP TABLE IF EXISTS ush.dt_users_etl;\nCREATE TABLE ush.dt_users_etl\nAS (\n   WITH\n      users AS (\n         WITH\n            attribution_data AS (\n                SELECT\n                  u.user_id\n                , u.email as user_email\n                , CASE WHEN u.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS has_entered_credentials\n                , u.date_created AS entered_credentials_date\n                , u.uuid AS external_user_id\n                , NOT u.enabled AS user_disabled\n                , u.INVITING_USER_ID_US as INVITING_USER_ID\n                , u.user_invitation_id\n                , CASE WHEN started_applications.user_id IS NULL THEN FALSE ELSE TRUE END AS has_started_application\n                , CASE WHEN entered_funding.user_id IS NULL THEN FALSE ELSE TRUE END AS has_entered_funding_amount\n                , CASE WHEN entered_fee.user_id IS NULL THEN FALSE ELSE TRUE END AS has_entered_fee\n                , coalesce(u.is_validated,FALSE) AS has_validated_email\n                    --, CASE WHEN ft.EMAIL IS NULL OR u.code_invitation IN ('mi','ma') THEN FALSE ELSE TRUE END AS is_wait_list_user\n                , CASE WHEN u.USER_INVITATION_ID IS NULL OR u.code_invitation IN ('mi','ma') THEN FALSE ELSE TRUE END AS is_invitation_sent\n                , CASE WHEN u.date_sign_up IS NULL THEN FALSE ELSE TRUE END AS is_signed_up\n                , CASE WHEN u.inviting_user_id > 1 OR u.INVITING_USER_ID_US > 1 THEN TRUE\n                       ELSE FALSE\n                       END AS is_referral\n\n                --first touch data\n                , CASE WHEN u.code_invitation IN ('mi','ma') THEN u.date_sign_up\n                       WHEN ft.email IS NOT NULL THEN ft.TOUCH_DATE\n                       WHEN u.USER_INVITATION_ID IS NOT NULL THEN u.date_user_invitation\n                       ELSE u.date_sign_up\n                       END AS lead_arrival_date_first_touch\n                , CASE WHEN u.code_invitation = 'mi' THEN 'iOS Signup'\n                       WHEN u.code_invitation = 'ma' THEN 'Android Signup'\n                       WHEN u.inviting_user_id > 1 OR u.USER_INVITATION_ID IS NULL THEN 'Referral'\n                       WHEN u.USER_INVITATION_ID IS NOT NULL THEN 'Web Signup'\n                       ELSE 'Unknown'\n                       END AS lead_source\n                , CASE WHEN ft.product_id = 1 AND ft.account_type_id = 2 THEN 'Redwood Individual'\n                       WHEN ft.product_id = 1 AND ft.account_type_id = 3 THEN 'Redwood IRA'\n                       WHEN ft.product_id = 2 AND ft.account_type_id = 2 THEN 'Flagship Individual'\n                       WHEN ft.product_id = 2 AND ft.account_type_id = 3 THEN 'Flagship IRA'\n                       WHEN ft.product_id IN (3,4) THEN 'Checking'\n                       WHEN ft.product_id = 8 THEN 'Credit'\n                       ELSE 'Unattributed'\n                       END AS initial_product_selected\n                , ft.UTM_SOURCE as UTM_SOURCE_first_touch\n                , ft.UTM_MEDIUM as UTM_MEDIUM_first_touch\n                , ft.UTM_TERM as UTM_TERM_first_touch\n                , ft.UTM_CONTENT as UTM_CONTENT_first_touch\n                , ft.UTM_CAMPAIGN as UTM_CAMPAIGN_first_touch\n                , ft.referral_domain\n                , ft.referral_url\n                , nvl(nullif(trim(ft.initial_url),''),su.url) AS utm_initial_url\n                , utm.UTM_LANDER\n                , regexp_substr(utm_initial_url,'click_?id=([^&]*)',1,1,'e') AS utm_click_id\n                , regexp_substr(utm_initial_url,'sub_?id1?=([^&]*)',1,1,'e') AS utm_click_sub_id\n                , regexp_substr(utm_initial_url,'sub_?id2=([^&]*)',1,1,'e') AS utm_click_sub_id2\n                , regexp_substr(utm_initial_url,'sub_?id3=([^&]*)',1,1,'e') AS utm_click_sub_id3\n                , regexp_replace(utm_initial_url,'(.*&gclid=([^&]*))?(.*)','$2') AS gcl_id\n\n                --last_touch_data\n                , wl.TOUCH_DATE as lead_arrival_date\n                , wl.utm_source AS utm_source\n                , case when up.SHOW_IN_DASHBOARD = true then 'Partner' else null end as utm_category\n                , wl.utm_medium AS utm_medium\n                , wl.utm_term AS utm_term\n                , wl.utm_content AS utm_content\n                , wl.utm_campaign AS utm_campaign\n                , nvl(cmp1.value, split_part(wl.utm_campaign,'-',1)) AS utm_campaign_product\n                , nvl(cmp2.value, ltrim(regexp_substr(wl.utm_campaign,'-.*',1),'-')) AS utm_campaign_marketing_campaign\n                , nvl(cnt1.value, split_part(wl.utm_content,'-',1)) AS utm_content_creative_type\n                , nvl(cnt2.value, split_part(wl.utm_content,'-',2)) AS utm_content_creative_description\n                , nvl(cnt3.value, split_part(wl.utm_content,'-',3)) AS utm_content_cta\n                , nvl(cnt4.value, split_part(wl.utm_content,'-',4)) AS utm_content_placement\n                , nvl(cnt5.value, split_part(wl.utm_content,'-',5)) AS utm_content_variable\n                , decode(regexp_replace(wl.utm_content,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$|(((-)[^-]+){4})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9$12$12$12$12$12')\n                   , '-----', split_part(split_part(wl.utm_content,'-',6),' ',2)\n                   ) AS utm_content_ad_id\n                , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                   , '----', trm1.value\n                   , '------', trm1.value\n                   ) AS utm_term_audience_type\n                , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                   , '----', trm2.value\n                   , '------', null\n                   ) AS utm_term_seed_audience\n                , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                   , '----', trm3.value\n                   , '------', null\n                   ) AS utm_term_lal_percentage\n                , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                   , '----', trm4.value\n                   , '------', null\n                   ) AS utm_term_messaging\n                , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                   , '----', null\n                   , '------', split_part(wl.utm_term,'-',2)\n                   ) AS utm_term_ad_id\n                , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                   , '----', null\n                   , '------', split_part(wl.utm_term,'-',3)\n                   ) AS utm_term_ad_platform\n                , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                   , '----', null\n                   , '------', split_part(wl.utm_term,'-',4)\n                   ) AS utm_term_ad_placement\n                , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                   , '----', split_part(wl.utm_term,'-',5)\n                   , '------', split_part(wl.utm_term,'-',5) || rtrim(concat(' ',split_part(wl.utm_term,'-',6))) || rtrim(concat(' ',split_part(wl.utm_term,'-',7)))\n                   ) AS utm_term_start_date\n\n               FROM tmp_user_base u\n\n               --join to last touch data\n               LEFT JOIN ush.DT_UTM_HISTORY wl on u.email = wl.EMAIL and wl.IS_LAST_TOUCH_DT_USERS = true\n\n               --join to first touch data\n               --we will only take non-segment wait list data, and prioritize non-credit over credit as a 1st step\n               --credit-specific leads will be pulled later in dt_credit_users\n               LEFT JOIN (\n                            select *,\n                                   row_number() over (partition by EMAIL\n                                                          order by is_first_touch_non_segment_non_credit desc nulls last,\n                                                                   is_first_touch_non_segment_credit desc nulls last) as rn\n                            from ush.DT_UTM_HISTORY\n                            where (is_first_touch_non_segment_non_credit = true\n                               or is_first_touch_non_segment_credit = true)\n                         ) ft on u.email = ft.EMAIL and ft.rn = 1\n               --alternate initial url if needed\n               LEFT JOIN etl.segment_url su on ft.EMAIL = su.EMAIL\n                                            and ft.TOUCH_DATE::date = su.received_at::date\n                                            and ifnull(nullif(trim(ft.utm_campaign),''),'99999') = ifnull(su.context_campaign_name,'99999')\n                                            and ifnull(nullif(trim(ft.utm_source),''),'99999') = ifnull(su.context_campaign_source,'99999')\n               LEFT JOIN web_db.dt_utm_fields_master utm ON utm.utm_generated_url_final = ft.initial_url\n\n               LEFT JOIN rdl.utm_lookup cmp1 ON cmp1.utm = 'Campaign' AND cmp1.part = '1' AND lower(cmp1.code) = lower(split_part(wl.utm_campaign,'-',1))\n               LEFT JOIN rdl.utm_lookup cmp2 ON cmp2.utm = 'Campaign' AND cmp2.part = '2' AND lower(cmp2.code) = lower(split_part(wl.utm_campaign,'-',2))\n               LEFT JOIN rdl.utm_lookup cnt1 ON cnt1.utm = 'Content'  AND cnt1.part = '1' AND lower(cnt1.code) = lower(split_part(wl.utm_content,'-',1))\n               LEFT JOIN rdl.utm_lookup cnt2 ON cnt2.utm = 'Content'  AND cnt2.part = '2' AND lower(cnt2.code) = lower(split_part(wl.utm_content,'-',2))\n               LEFT JOIN rdl.utm_lookup cnt3 ON cnt3.utm = 'Content'  AND cnt3.part = '3' AND lower(cnt3.code) = lower(split_part(wl.utm_content,'-',3))\n               LEFT JOIN rdl.utm_lookup cnt4 ON cnt4.utm = 'Content'  AND cnt4.part = '4' AND lower(cnt4.code) = lower(split_part(wl.utm_content,'-',4))\n               LEFT JOIN rdl.utm_lookup cnt5 ON cnt5.utm = 'Content'  AND cnt5.part = '5' AND lower(cnt5.code) = lower(split_part(wl.utm_content,'-',5))\n               LEFT JOIN rdl.utm_lookup trm1 ON trm1.utm = 'Term'     AND trm1.part = '1' AND lower(trm1.code) = lower(split_part(wl.utm_term,'-',1))\n               LEFT JOIN rdl.utm_lookup trm2 ON trm2.utm = 'Term'     AND trm2.part = '2' AND lower(trm2.code) = lower(split_part(wl.utm_term,'-',2))\n               LEFT JOIN rdl.utm_lookup trm3 ON trm3.utm = 'Term'     AND trm3.part = '3' AND lower(trm3.code) = lower(split_part(wl.utm_term,'-',3))\n               LEFT JOIN rdl.utm_lookup trm4 ON trm4.utm = 'Term'     AND trm4.part = '4' AND lower(trm4.code) = lower(split_part(wl.utm_term,'-',4))\n               LEFT JOIN rdl.utm_partnership up ON wl.utm_source = up.utm_source\n               LEFT JOIN (\n                  SELECT user_id\n                  FROM web_db.user_product_application\n                  WHERE account_type_id IN (2,3)\n                  GROUP BY 1\n                  ) started_applications ON started_applications.user_id = u.user_id\n\n               LEFT JOIN (\n                  SELECT user_id\n                  FROM web_db.user_product_application\n                  WHERE account_type_id IN (2,3)\n                    AND ifnull(funding_amount,0) != 0\n                  GROUP BY 1\n                  ) entered_funding ON entered_funding.user_id = u.user_id\n\n               LEFT JOIN (\n                  SELECT user_id\n                  FROM web_db.user_product_application\n                  WHERE account_type_id IN (2,3)\n                    AND ifnull(fee_amount,0) != 0\n                  GROUP BY 1\n                  ) entered_fee ON entered_fee.user_id = u.user_id\n               ),\n            aggregated_account_data AS (\n               WITH\n                  first_account AS (\n                     SELECT user_id\n                          , unique_account_id\n                          , inception_date\n                          , funding_amount\n                          , opening_monthly_usd_fee_setting\n                          , opening_yearly_percent_fee_setting\n                          , a.account_type\n                          , funding_bank_account_id\n                          , initial_monthly_recurring_investment_amount\n                     FROM bi.dt_accounts a\n                     WHERE account_creation_order = 1\n                     ),\n                  second_account AS (\n                     SELECT user_id\n                          , unique_account_id\n                          , account_type\n                          , inception_date\n                     FROM bi.dt_accounts a\n                     WHERE account_creation_order = 2\n                     ),\n\n                  initial_transfer_post as (\n                     SELECT user_id\n                          , min(initial_transfer_posted_date) as initial_transfer_posted_date\n                     FROM bi.dt_accounts a\n                     WHERE account_type = 'Checking'\n                     group by 1\n                  )\n\n               SELECT a.user_id\n                    , fa.account_type AS first_account_type\n                    , sa.account_type AS second_account_type\n                    , fa.funding_amount AS first_account_funding_amount\n                    , fa.inception_date AS first_account_inception_date\n                    , fa.opening_monthly_usd_fee_setting AS first_account_opening_monthly_usd_fee_setting\n                    , fa.opening_yearly_percent_fee_setting AS first_account_opening_yearly_percent_fee_setting\n                    , fa.funding_bank_account_id AS first_account_funding_bank_account_id\n                    , fa.initial_monthly_recurring_investment_amount AS first_account_initial_monthly_recurring_investment_account\n                    , sa.inception_date::DATE - fa.inception_date::DATE AS days_between_first_and_second_account\n                    , date_part('year',sa.inception_date) * 12 - date_part('year',fa.inception_date) * 12 +\n                      date_part('month',sa.inception_date) -\n                      date_part('month',fa.inception_date) AS months_between_first_and_second_account\n                    , itp.initial_transfer_posted_date as initial_transfer_posted_date\n                    , BOOLOR_AGG(a.account_type = 'Checking') AS has_checking_account\n                    , BOOLOR_AGG(a.account_type = 'Flagship Individual') AS has_flagship_individual\n                    , BOOLOR_AGG(a.account_type = 'Flagship IRA') AS has_flagship_ira\n                    , BOOLOR_AGG(a.account_type = 'Redwood Individual') AS has_redwood_individual\n                    , BOOLOR_AGG(a.account_type = 'Redwood IRA') AS has_redwood_ira\n                    , sum(current_balance) AS current_total_assets\n                    , count(*) AS total_accounts_opened\n                    , CASE WHEN count(*) >= 1 THEN TRUE ELSE FALSE END AS has_opened_aspiration_account\n                    , sum(current_monthly_recurring_investment_amount) AS current_monthly_recurring_investment_amount\n\n               FROM bi.dt_accounts a\n               INNER JOIN first_account fa ON a.user_id = fa.user_id\n               LEFT JOIN second_account sa ON a.user_id = sa.user_id\n               left join initial_transfer_post itp on itp.user_id = a.user_id\n               GROUP BY 1\n                      , 2\n                      , 3\n                      , 4\n                      , 5\n                      , 6\n                      , 7\n                      , 8\n                      , 9\n                      , 10\n                      , 11\n                      , 12\n               ),\n            customer_information AS (\n               SELECT up.user_id\n                    , date_of_birth\n                    , datediff('months',date_of_birth,CURRENT_DATE) / 12 AS customer_age\n                    , upper(first_name) AS first_name\n                    , upper(middle_name) AS middle_name\n                    , upper(last_name) AS last_name\n                    , CASE gender_type WHEN 1 THEN 'Male' WHEN 2 THEN 'Female' ELSE 'Other' END AS gender\n                    , gross_income\n                    , liquid_net_worth\n                    , has_alternative_investments\n                    , has_bonds\n                    , has_cd\n                    , has_checking\n                    , has_etf\n                    , has_ira\n                    , has_mutual_funds\n                    , has_options\n                    , has_savings\n                    , has_stock\n                    , CASE uip.employment_status WHEN 0 THEN 'Undefined'\n                                                 WHEN 1 THEN 'Employed Full Time'\n                                                 WHEN 2 THEN 'Employed Part Time'\n                                                 WHEN 3 THEN 'Self Employed'\n                                                 WHEN 4 THEN 'Student'\n                                                 WHEN 5 THEN 'Retired'\n                                                 WHEN 6 THEN 'Not Employed'\n                                                 END AS employment\n                    , CASE marital_status WHEN 0 THEN 'Undefined'\n                                          WHEN 1 THEN 'Single'\n                                          WHEN 2 THEN 'Married'\n                                          WHEN 3 THEN 'Divorced'\n                                          WHEN 4 THEN 'Widowed'\n                                          WHEN 5 THEN 'Separated'\n                                          WHEN 6 THEN 'Domestic Partner'\n                                          END AS marital_status\n                    , has_trust\n                    , has401k\n                    , has_joint\n                    , upper(city) AS city\n                    , s.name AS state\n                    , upper(a.street1) AS street_line_1\n                    , upper(a.street2) AS street_line_2\n                    , phone_number\n                    , is_phone_validated\n                    , zip_or_postal_code AS zip_code\n               FROM web_db.user_profile up\n               LEFT JOIN web_db.user_investment_profile uip ON uip.user_id = up.user_id\n               LEFT JOIN web_db.address a ON a.id = coalesce(mailing_address_id,up.address_id)\n               LEFT JOIN web_db.state s ON s.id = a.state_id\n               ),\n            alloy_evaluation AS (\n               SELECT CIP_status\n                    , user_id\n                    , CIP_status_date\n                    , CIP_manual_review_completion_date\n                    , alloy_custom_model_score\n                    , alloy_custom_model_version\n                    , alloy_summary_application_version\n               FROM (\n                  SELECT d.\"alloy summary_outcome\" || CASE WHEN d.\"alloy summary_outcome\" = 'Manual Review'\n                                                              THEN cast(' - ' || coalesce(rd.outcome,'Pending') AS VARCHAR(50))\n                                                           ELSE ''\n                                                           END AS CIP_status\n                       , app.user_id AS user_id\n                       , e.submitted_at AS CIP_status_date\n                       , rd.timestamp AS CIP_manual_review_completion_date\n                       , d.\"custom models_model_score\" as alloy_custom_model_score\n                       , d.\"custom models_model_version\" as alloy_custom_model_version\n                       , d.\"alloy summary_application_version_id\" as alloy_summary_application_version\n                       , row_number() OVER (PARTITION BY app.user_id ORDER BY CIP_status_date DESC) AS row_num\n                  FROM aoa_db.alloy_evaluations e\n                  JOIN web_db.user_product_application app ON app.id = e.user_product_application_id\n                  JOIN rdl.alloy_evaluations_flattened d ON d.evaluation_id = e.id\n                  LEFT JOIN aoa_db.evaluation_reviews er ON er.alloy_evaluation_id = e.id\n                  LEFT JOIN rdl.alloy_evaluation_reviews_flattened rd ON rd.evaluation_review_id = er.id\n                  WHERE d.\"alloy summary_outcome\" IS NOT NULL\n                  ) AS a\n               WHERE a.row_num = 1\n               ),\n            cohorts AS (\n               SELECT uc.user_id\n                    , c.name AS cohort_name\n               FROM web_db.cohorts c\n               JOIN web_db.user_cohorts uc ON c.id = uc.cohorts_id\n               WHERE c.name IN ('check-deposit-disabled','withdrawal-disabled')\n               )\n\n         SELECT a.user_email\n              , a.has_validated_email\n              , a.user_id\n              , a.has_entered_credentials\n              , a.entered_credentials_date\n              , a.external_user_id\n              , a.is_signed_up\n              , a.user_disabled\n\n              --first touch data\n              , a.lead_arrival_date_first_touch\n              , a.lead_source\n              , a.initial_product_selected\n              , a.UTM_SOURCE_first_touch\n              , a.UTM_MEDIUM_first_touch\n              , a.UTM_TERM_first_touch\n              , a.UTM_CONTENT_first_touch\n              , a.UTM_CAMPAIGN_first_touch\n              , nvl(a.referral_domain,'direct') AS referral_domain\n              , a.referral_url\n              , a.utm_INITIAL_URL\n              , a.utm_lander\n              , ifnull(a.utm_click_id,'') AS utm_click_id\n              , ifnull(a.utm_click_sub_id,'') AS utm_click_sub_id\n              , ifnull(a.utm_click_sub_id2,'') AS utm_click_sub_id2\n              , ifnull(a.utm_click_sub_id3,'') AS utm_click_sub_id3\n              , a.gcl_id\n\n              --last touch data\n              , a.lead_arrival_date\n              , a.utm_source\n              , a.utm_medium\n              , a.utm_term\n              , a.utm_content\n              , a.utm_campaign\n              , a.utm_category\n              , utm_campaign_product\n              , utm_campaign_marketing_campaign\n              , utm_content_creative_type\n              , utm_content_creative_description\n              , utm_content_cta\n              , utm_content_placement\n              , utm_content_variable\n              , utm_content_ad_id\n              , utm_term_audience_type\n              , utm_term_seed_audience\n              , utm_term_lal_percentage\n              , utm_term_messaging\n              , utm_term_ad_id\n              , utm_term_ad_platform\n              , utm_term_ad_placement\n              , utm_term_start_date\n\n              , has_started_application\n              , has_opened_aspiration_account\n              , CASE WHEN /*gross_income IS NULL or ssn IS NULL or*/ has_started_application = FALSE THEN FALSE\n                     ELSE has_entered_funding_amount\n                     END AS has_entered_funding_amount\n              , CASE WHEN /*gross_income IS NULL or ssn IS NULL or*/ has_started_application = FALSE OR has_entered_funding_amount = FALSE\n                        THEN FALSE\n                     ELSE has_entered_fee\n                     END AS has_entered_fee\n              , CASE WHEN /*ssn IS NULL or*/ has_started_application = FALSE OR first_name IS NULL THEN FALSE\n                     ELSE TRUE\n                     END AS has_entered_personal_information\n              , CASE WHEN /*gross_income IS NULL or ssn IS NULL or*/ has_started_application = FALSE OR first_name IS NULL\n                        THEN FALSE\n                     ELSE TRUE\n                     END AS has_entered_financial_information\n              , CASE WHEN\n                        /* gross_income IS NULL or ssn IS NULL or has_started_application = false or has_entered_funding_amount = false\n                        or has_entered_fee = false or*/ entered_bank.user_id IS NULL THEN FALSE\n                     ELSE TRUE\n                     END AS has_attempted_to_link_bank\n              , CASE WHEN\n                        /* gross_income IS NULL or ssn IS NULL or has_started_application = false or has_entered_funding_amount = false\n                        or has_entered_fee = false or*/ verified_bank.user_id IS NULL THEN FALSE\n                     ELSE TRUE\n                     END AS has_verified_bank\n              , CASE WHEN tc.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS has_accepted_terms_and_conditions\n              , b.zip_code\n              , b.state\n              , b.street_line_2\n              , b.marital_status\n              , b.street_line_1\n              , b.gender\n              , b.date_of_birth\n              , b.customer_age\n              -- ssn,\n              , b.employment\n              , b.phone_number\n              , b.is_phone_validated\n              , b.first_name\n              , b.city\n              , b.gross_income\n              , b.last_name\n              , b.middle_name\n              , b.has_checking\n              , b.has401k\n              , b.has_alternative_investments\n              , b.has_bonds\n              , b.has_cd\n              , b.has_etf\n              , b.has_ira\n              , b.has_joint\n              , b.has_mutual_funds\n              , b.has_options\n              , b.has_savings\n              , b.has_stock\n              , b.has_trust\n              , b.liquid_net_worth\n              , c.second_account_type\n              , c.first_account_type\n              , c.current_monthly_recurring_investment_amount\n              , c.current_total_assets\n              , c.days_between_first_and_second_account\n              , c.months_between_first_and_second_account\n              , c.first_account_funding_amount\n              , c.first_account_funding_bank_account_id\n              , c.first_account_inception_date\n              , c.first_account_opening_monthly_usd_fee_setting\n              , c.first_account_opening_yearly_percent_fee_setting\n              , coalesce(c.has_flagship_individual,FALSE) AS has_flagship_individual\n              , coalesce(c.has_flagship_ira,FALSE) AS has_flagship_ira\n              , coalesce(c.has_redwood_individual,FALSE) AS has_redwood_individual\n              , coalesce(c.has_redwood_ira,FALSE) AS has_redwood_ira\n              , coalesce(c.has_checking_account,FALSE) AS has_checking_account\n              , coalesce(c.total_accounts_opened,0) AS total_accounts_opened\n              , c.initial_transfer_posted_date\n              , CASE WHEN r_ind.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS redwood_individual_application_started\n              , CASE WHEN r_ira.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS redwood_ira_application_started\n              , CASE WHEN f_ind.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS flagship_individual_application_started\n              , CASE WHEN f_ira.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS flagship_ira_application_started\n              , CASE WHEN risk_cohorts.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS has_risk_cohorts\n              , a.inviting_user_id\n              , alloy.CIP_status AS CIP_status\n              , alloy.CIP_status_date AS CIP_status_date\n              , alloy.CIP_manual_review_completion_date AS CIP_manual_review_completion_date\n              , alloy.alloy_custom_model_score\n              , alloy.alloy_custom_model_version\n              , alloy.alloy_summary_application_version\n              , CASE WHEN cohort_deposit.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS is_mobile_check_deposit_disabled\n              , CASE WHEN cohort_withdrawal.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS is_withdrawal_disabled\n              , CASE WHEN HSA.STATUS in (4,5,6) THEN TRUE else FALSE end AS HAS_SUBMIT_APPLICATION\n\n         FROM attribution_data a\n         LEFT JOIN customer_information b ON a.user_id = b.user_id\n         LEFT JOIN aggregated_account_data c ON a.user_id = c.user_id\n         LEFT JOIN (\n            SELECT user_id\n                 , status\n            FROM web_db.user_product_application\n            WHERE product_id = 1\n              AND account_type_id = 2\n            ) r_ind ON r_ind.user_id = a.user_id\n         LEFT JOIN (\n            SELECT user_id\n                 , status\n            FROM web_db.user_product_application\n            WHERE product_id = 1\n              AND account_type_id = 3\n            ) r_ira ON r_ira.user_id = a.user_id\n         LEFT JOIN (\n            SELECT user_id\n                 , status\n            FROM web_db.user_product_application\n            WHERE product_id = 2\n              AND account_type_id = 2\n            ) f_ind ON f_ind.user_id = a.user_id\n         LEFT JOIN (\n            SELECT user_id\n                 , status\n            FROM web_db.user_product_application\n            WHERE product_id = 2\n              AND account_type_id = 3\n            ) f_ira ON f_ira.user_id = a.user_id\n         LEFT JOIN (select row_number() over (partition by USER_ID order by DATE_CREATED desc ) as row_num, * from (\n              select DATE_CREATED, USER_ID,ACCOUNT_ID, STRIPE_FUNDING_AMOUNT, PRODUCT_ID, STATUS from WEB_DB.USER_PRODUCT_APPLICATION\n              where PRODUCT_ID in (4,5)\n              and STATUS in (4,5,6)\n            ) ) HSA ON HSA.user_id = a.user_id  and  hsa.row_num=1\n         LEFT JOIN (\n            SELECT DISTINCT user_id\n            FROM bi.dt_banks\n            WHERE is_checking_account = FALSE\n            ) entered_bank ON entered_bank.user_id = a.user_id\n         LEFT JOIN (\n            SELECT DISTINCT user_id\n            FROM bi.dt_banks\n            WHERE is_verified = TRUE\n              AND is_checking_account = FALSE\n            ) verified_bank ON verified_bank.user_id = a.user_id\n         LEFT JOIN (\n            SELECT DISTINCT user_id\n            FROM web_db.user_terms_conditions\n            ) tc ON tc.user_id = a.user_id\n\n         LEFT JOIN (\n            SELECT DISTINCT user_id\n            FROM web_db.user_cohorts\n            WHERE cohorts_id IN (22,23)\n            ) risk_cohorts ON risk_cohorts.user_id = a.user_id\n         LEFT JOIN cohorts AS cohort_deposit\n                   ON cohort_deposit.user_id = a.user_id AND cohort_deposit.cohort_name = 'check-deposit-disabled'\n         LEFT JOIN cohorts AS cohort_withdrawal\n                   ON cohort_withdrawal.user_id = a.user_id AND cohort_withdrawal.cohort_name = 'withdrawal-disabled'\n         LEFT JOIN alloy_evaluation AS alloy ON alloy.user_id = a.user_id\n         ),\n      aggregate_spending AS (\n         SELECT paid_channel_name\n              , utm_source_1\n              , utm_source_2\n              , start_date\n              , end_date\n              , spend / (1.0 * cnt) AS spend_per_acquisition\n         FROM (\n            SELECT m.channel_name AS paid_channel_name\n                 , utm_source_1\n                 , utm_source_2\n                 , start_date\n                 , end_date\n                 , m.spend\n                 , count(*) AS cnt\n            FROM users u\n            INNER JOIN web_db.dt_marketing_spend m\n                       ON (u.utm_source = m.utm_source_1 OR u.utm_source = m.utm_source_2) AND\n                          lead_arrival_date::DATE >= m.start_date AND lead_arrival_date::DATE < m.end_date AND\n                          m.spend IS NOT NULL AND u.total_accounts_opened > 0\n            GROUP BY 1\n                   , 2\n                   , 3\n                   , 4\n                   , 5\n                   , 6\n            ORDER BY 1\n                   , 2\n                   , 3\n                   , 4\n                   , 5\n                   , 6\n            ) a\n         ),\n      filled_end_dates AS (\n         SELECT channel_name\n              , utm_source_1\n              , utm_source_2\n              , start_date\n              , (\n            SELECT min(start_date)\n            FROM web_db.dt_marketing_spend a\n            WHERE a.channel_name = s.channel_name\n              AND a.start_date > s.start_date\n            ) AS end_date\n              , cpa\n              , cpl\n         FROM web_db.dt_marketing_spend s\n         WHERE cpl IS NOT NULL\n            OR cpa IS NOT NULL\n         ),\n      cpl_spends AS (\n         SELECT channel_name\n              , lead_arrival_month\n              , utm_source_1\n              , utm_source_2\n              , cpl * lead_count / (1.0 * customer_count) AS spend_per_aquisition\n         FROM (\n            SELECT channel_name\n                 , utm_source_1\n                 , utm_source_2\n                 , start_date\n                 , end_date\n                 , cpl\n                 , date_trunc('month',lead_arrival_date) :: DATE AS lead_arrival_month\n                 , count(*) AS lead_count\n                 , sum(CASE WHEN total_accounts_opened > 0 THEN 1 ELSE 0 END) AS customer_count\n            FROM filled_end_dates fed\n            INNER JOIN users u ON (fed.utm_source_1 = u.utm_source OR fed.utm_source_2 = u.utm_source) AND\n                                  lead_arrival_date::DATE >= start_date AND\n                                  (end_date IS NULL OR lead_arrival_date::DATE < end_date)\n            WHERE fed.cpl IS NOT NULL\n            GROUP BY 1\n                   , 2\n                   , 3\n                   , 4\n                   , 5\n                   , 6\n                   , 7\n            HAVING sum(CASE WHEN total_accounts_opened > 0 THEN 1 ELSE 0 END) > 0\n            ) a\n         ),\n      cpa_spends AS (\n         SELECT channel_name\n              , date_trunc('month',lead_arrival_date) :: DATE AS lead_arrival_month\n              , utm_source_1\n              , utm_source_2\n              , cpa AS spend_per_acquisition\n         FROM filled_end_dates fed\n         INNER JOIN users u ON (fed.utm_source_1 = u.utm_source OR fed.utm_source_2 = u.utm_source) AND\n                               lead_arrival_date::DATE >= start_date AND\n                               (end_date IS NULL OR lead_arrival_date::DATE < end_date)\n         WHERE cpa IS NOT NULL\n         GROUP BY 1\n                , 2\n                , 3\n                , 4\n                , 5\n         ),\n      months AS (\n         SELECT DATEADD('month',i - 1,'2014-10-01') AS month\n         FROM (\n                     select row_number() over(order by seq4()) as i\n                     from table(generator(\n                                rowcount =>3000\n                                )\n                         )\n                  )\n         WHERE i <= (DATE_PART('year',CURRENT_DATE) - DATE_PART('year','2014-10-01'::DATE)) * 12 +\n                    (DATE_PART('month',CURRENT_DATE) - DATE_PART('month','2014-10-01'::DATE)) + 1\n         ),\n      agg_spend AS (\n         SELECT paid_channel_name\n              , month\n              , utm_source_1\n              , utm_source_2\n              , spend_per_acquisition\n         FROM aggregate_spending a\n         INNER JOIN months b ON b.month >= a.start_date AND b.month < a.end_date\n         ),\n      all_spend AS (\n         SELECT *\n         FROM cpa_spends\n         UNION ALL\n         SELECT *\n         FROM cpl_spends\n         UNION ALL\n         SELECT *\n         FROM agg_spend\n         ),\n      invites_count AS (\n            SELECT u.inviting_user_id\n            , count(*) AS number_invites_sent\n            ,sum(case\n                  when a.initial_transfer_posted_date IS NOT NULL then 1\n                  else 0 end) as num_funded_referrals\n            FROM web_db.user_signup u\n               left join bi.dt_accounts a on u.invited_user_id = a.user_id\n                                             and a.account_type = 'Checking'\n            GROUP BY u.inviting_user_id\n         ),\n      cte_smart_limit AS (\n         SELECT DISTINCT user_id\n         FROM web_db.user_product_application\n         WHERE is_smart_limit = TRUE\n         )\n\n   SELECT distinct u.*\n        , utm_source_clean\n        , utm_channel_type\n        , utm_channel_grouping\n        , spend_per_acquisition AS marketing_cost_per_user\n        , most_current_nps_score\n        , most_current_nps_survey_date\n        , CASE WHEN f.chargeoff_reason IS NOT NULL OR sum.chargeoff_reason IS NOT NULL THEN TRUE\n               ELSE FALSE\n               END AS is_fraud_or_chargeoff\n        , coalesce(sum.chargeoff_reason,f.chargeoff_reason) AS fraud_or_chargeoff_type\n        , sum.total_amount_charged_off\n        , sum.hard_loss_charge_off\n        , sum.fees_charged_off\n        , invites_count.number_invites_sent\n        , invites_count.num_funded_referrals\n        , CASE WHEN csl.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS is_smart_limit\n        , min_payment_account_linked_date AS external_bank_account_connected_date\n        , case when tcle.email is not null-- or tclui.user_id is not null\n               then true else false end as has_credit_lead\n        , case when upa_cred.USER_ID is not null\n               then true else false end as has_credit_product_application\n   FROM users u\n\n   LEFT JOIN invites_count ON invites_count.inviting_user_id = u.user_id\n   LEFT JOIN cte_smart_limit csl ON csl.user_id = u.user_id\n   LEFT JOIN all_spend s ON (u.utm_source = s.utm_source_1 OR u.utm_source = s.utm_source_2) AND\n                            CASE WHEN total_accounts_opened > 0 THEN date_trunc('month',u.lead_arrival_date) :: DATE\n                                 ELSE NULL\n                                 END = s.lead_arrival_month\n\n   LEFT JOIN (\n    SELECT\n      a.email,\n      a.pull_date :: DATE AS most_current_nps_survey_date,\n      a.nps_rating        AS most_current_nps_score\n    FROM dataops_ace_db.nps_survey_candidate a\n      INNER JOIN (\n         SELECT\n           email,\n           max(pull_date) AS max_pull_date\n         FROM dataops_ace_db.nps_survey_candidate\n         GROUP BY email\n       ) b\n      ON a.email = b.email AND a.pull_date = b.max_pull_date\n     AND zendesk_nps_survey_id IS NOT NULL\n    ) nps ON u.user_email = nps.email\n\n   LEFT JOIN web_db.dt_input_fraud_users f ON u.user_email = f.email\n\n   LEFT JOIN (\n      SELECT user_id\n           , is_charged_off\n           , chargeoff_reason\n           , total_amount_charged_off\n           , hard_loss_charge_off\n           , fees_charged_off\n      FROM bi.dt_accounts\n      WHERE account_type = 'Checking'\n      ) sum ON sum.user_id = u.user_id\n\n   LEFT JOIN web_db.dt_external_user_ids e ON e.user_id = u.user_id\n\n   LEFT JOIN web_db.dt_utm_mapping m ON m.utm_source = u.utm_source\n\n   LEFT JOIN (\n      SELECT user_id\n           , min(payment_account_linked_date) min_payment_account_linked_date\n      FROM bi.dt_banks\n      WHERE is_verified = TRUE\n      GROUP BY user_id\n      ) payment_account_link_date ON payment_account_link_date.user_id = u.user_id\n\n   LEFT JOIN tmp_credit_lead_email tcle on u.user_email = tcle.email\n   --LEFT JOIN tmp_credit_lead_user_id tclui on u.user_id = tclui.user_id\n   LEFT JOIN (select distinct user_id\n              from WEB_DB.USER_PRODUCT_APPLICATION\n              where PRODUCT_ID = 8) upa_cred on u.user_id = upa_cred.USER_ID\n\n   );\n\n--create the non-credit version of dt_users\ndrop table if exists ush.dt_users;\ncreate table ush.dt_users as\nselect u.*\nfrom ush.dt_users_etl u\n-- exclude pyc-lite *only* users\nLEFT JOIN tmp_pyc_lite_only plo ON u.USER_ID = plo.USER_ID\nWHERE plo.USER_ID is null\n--keep credit leads in other non-credit products; remove credit only leads\nand (u.has_credit_lead = false\nor u.initial_product_selected != 'Credit'\nor (u.has_credit_lead = true\n    and u.user_id in (select user_id from WEB_DB.USER_PRODUCT_APPLICATION where PRODUCT_ID not in (7,8))))\n;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958374":{"id":2958374,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":716056355,"x":-700,"y":-372,"width":32,"height":32,"inputConnectorIDs":[2958361],"outputSuccessConnectorIDs":[2958357],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of Metadata"}}}},"visible":true},"2":{"slot":2,"name":"","elements":{},"visible":false},"3":{"slot":3,"name":"Database Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"postgresql"}}}},"visible":true},"4":{"slot":4,"name":"RDS Endpoint","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"beta-sanitized-2021-04-06-1521.ctawxryivyva.us-west-2.rds.amazonaws.com:5432"}}}},"visible":true},"5":{"slot":5,"name":"Database Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"web_db"}}}},"visible":true},"6":{"slot":6,"name":"Username","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"webuser"}}}},"visible":true},"7":{"slot":7,"name":"Password","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"cAB4mu2kMV79WY"}}}},"visible":true},"8":{"slot":8,"name":"SQL Query","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WITH\n   meta AS (\n      SELECT DISTINCT\n             table_catalog                   AS schema_name\n           , table_name                      AS table_name\n           , column_name || '::' || udt_name AS column_name\n           , ordinal_position                AS column_order\n      FROM information_schema.columns col\n      WHERE col.table_schema = 'public'\n      ORDER BY column_order ASC\n      )\nSELECT '${source_database}'             AS database_name\n     , schema_name                      AS schema_name\n     , table_name                       AS table_name\n     , string_agg(column_name,', ')     AS columns\n     , null::VARCHAR\t\t\t\t\tAS diff_id\n     , now()::DATE\t\t\t\t\t\tAS last_update\nFROM meta\nGROUP BY 1, 2, 3"}}}},"visible":true},"9":{"slot":9,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"ADW_BETA"}}}},"visible":true},"11":{"slot":11,"name":"JDBC Options","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"ssl"},"2":{"slot":2,"type":"STRING","value":"true"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"logUnclosedConnections"},"2":{"slot":2,"type":"STRING","value":"true"}}}},"visible":true},"12":{"slot":12,"name":"Concurrency","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"8"}}}},"visible":true},"13":{"slot":13,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WEB_DB"}}}},"visible":true},"14":{"slot":14,"name":"Target Table","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"LOAD_METADATA"}}}},"visible":true},"15":{"slot":15,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DEV"}}}},"visible":true},"16":{"slot":16,"name":"S3 Staging Area","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"aspiration-etl-staging"}}}},"visible":true},"17":{"slot":17,"name":"Primary Keys","elements":{},"visible":true},"20":{"slot":20,"name":"Data Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"101":{"slot":101,"name":"Basic/Advanced Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Advanced"}}}},"visible":true},"102":{"slot":102,"name":"Data Source","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"103":{"slot":103,"name":"Data Selection","elements":{},"visible":false},"104":{"slot":104,"name":"Data Source Filter","elements":{},"visible":false},"105":{"slot":105,"name":"Combine Filters","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":false},"106":{"slot":106,"name":"Limit","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"100"}}}},"visible":false},"1001":{"slot":1001,"name":"","elements":{},"visible":false},"1992":{"slot":1992,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1994":{"slot":1994,"name":"Stage","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"1995":{"slot":1995,"name":"Stage Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1996":{"slot":1996,"name":"Stage Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1997":{"slot":1997,"name":"New Table Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"1998":{"slot":1998,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"1999":{"slot":1999,"name":"Database","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"[Environment Default]"}}}},"visible":false},"2000":{"slot":2000,"name":"Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Standard"}}}},"visible":true},"40000":{"slot":40000,"name":"Encryption","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SSE KMS"}}}},"visible":true},"40001":{"slot":40001,"name":"KMS Key ID","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${kms_s3_key}"}}}},"visible":true},"40501":{"slot":40501,"name":"","elements":{},"visible":false},"40502":{"slot":40502,"name":"Load Options","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"On"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"Off"}}},"3":{"slot":3,"values":{"1":{"slot":1,"type":"STRING","value":"On"}}},"4":{"slot":4,"values":{"1":{"slot":1,"type":"STRING","value":""}}},"5":{"slot":5,"values":{"1":{"slot":1,"type":"STRING","value":"On"}}}},"visible":true},"63320":{"slot":63320,"name":"Storage Account","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"63321":{"slot":63321,"name":"Blob Container","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"84533":{"slot":84533,"name":"Integration","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"88340":{"slot":88340,"name":"","elements":{},"visible":false},"88341":{"slot":88341,"name":"Staging","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Existing Amazon S3 Location"}}}},"visible":true},"98776":{"slot":98776,"name":"GCS Staging Area","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958375":{"id":2958375,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-272,"y":-512,"width":32,"height":32,"inputConnectorIDs":[2958363],"outputSuccessConnectorIDs":[2958450],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"control_parameter"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/*create table etl.origoe_ach_detail as\nselect * from rer_ach_detail;\n\ncreate table etl.origoe_ach_header as\nselect * from rer_ach_header;\n*/\n\ninsert into etl.CONTROL_PARAMETER\nselect 'utm_history_date', 'Date to begin pulling data for bi.utm_history table', '2013-01-01', 'date'\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958376":{"id":2958376,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-1136,"y":-112,"width":32,"height":32,"inputConnectorIDs":[2958354],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958430],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"account_daily_diffs"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse dev;\n\ndrop table if exists ush.account_daily_diffs;\ncreate table ush.account_daily_diffs as\nselect top 1000 a.UNIQUE_ACCOUNT_ID, a.date\nfrom ush.dt_account_daily_data a\njoin bi.dt_account_daily_data b on a.UNIQUE_ACCOUNT_ID = b.UNIQUE_ACCOUNT_ID and a.date = b.DATE\nwhere\na.ACCOUNT_TYPE!= b.ACCOUNT_TYPE\nor a.DAILY_BALANCE!= b.DAILY_BALANCE\nor a.ORIGINAL_BALANCE!= b.ORIGINAL_BALANCE\nor a.SPEND_DAILY_BALANCE!= b.SPEND_DAILY_BALANCE\nor a.SAVE_DAILY_BALANCE!= b.SAVE_DAILY_BALANCE\n--or a.HAS_SET_RECURRING_DEPOSIT!= b.HAS_SET_RECURRING_DEPOSIT\nor a.IS_FUNDED!= b.IS_FUNDED\nor a.DAILY_BILL_PAY_AMOUNT!= b.DAILY_BILL_PAY_AMOUNT\nor a.DAILY_BILL_PAY_COUNT!= b.DAILY_BILL_PAY_COUNT\nor a.IS_TERMINATED!= b.IS_TERMINATED\nor a.MONTHLY_USD_FEE_SETTING!= b.MONTHLY_USD_FEE_SETTING\nor a.YEARLY_PERCENT_FEE_SETTING!= b.YEARLY_PERCENT_FEE_SETTING\nor a.PREVIOUS_DAY_MONTHLY_USD_FEE_SETTING!= b.PREVIOUS_DAY_MONTHLY_USD_FEE_SETTING\nor a.PREVIOUS_DAY_YEARLY_PERCENT_FEE_SETTING!= b.PREVIOUS_DAY_YEARLY_PERCENT_FEE_SETTING\nor a.ACH_WITHDRAWAL_AMOUNT!= b.ACH_WITHDRAWAL_AMOUNT\nor a.ACH_WITHDRAWAL_COUNT!= b.ACH_WITHDRAWAL_COUNT\nor a.LARGEST_ACH_WITHDRAWAL_AMOUNT!= b.LARGEST_ACH_WITHDRAWAL_AMOUNT\nor a.ACH_DEPOSIT_AMOUNT!= b.ACH_DEPOSIT_AMOUNT\nor a.ACH_DEPOSIT_COUNT!= b.ACH_DEPOSIT_COUNT\nor a.LARGEST_ACH_DEPOSIT_AMOUNT!= b.LARGEST_ACH_DEPOSIT_AMOUNT\nor a.DBT_CARD_NO_PIN_AMOUNT!= b.DBT_CARD_NO_PIN_AMOUNT\nor a.DBT_CARD_NO_PIN_COUNT!= b.DBT_CARD_NO_PIN_COUNT\nor a.LARGEST_DBT_CARD_NO_PIN_AMOUNT!= b.LARGEST_DBT_CARD_NO_PIN_AMOUNT\nor a.DBT_CARD_PIN_AMOUNT!= b.DBT_CARD_PIN_AMOUNT\nor a.DBT_CARD_PIN_COUNT!= b.DBT_CARD_PIN_COUNT\nor a.LARGEST_DBT_CARD_PIN_AMOUNT!= b.LARGEST_DBT_CARD_PIN_AMOUNT\nor a.INTEREST_AMOUNT!= b.INTEREST_AMOUNT\nor a.CHECK_WITHDRAWAL_AMOUNT!= b.CHECK_WITHDRAWAL_AMOUNT\nor a.CHECK_WITHDRAWAL_COUNT!= b.CHECK_WITHDRAWAL_COUNT\nor a.LARGEST_CHECK_WITHDRAWAL_AMOUNT!= b.LARGEST_CHECK_WITHDRAWAL_AMOUNT\nor a.CHECK_DEPOSIT_AMOUNT!= b.CHECK_DEPOSIT_AMOUNT\nor a.CHECK_DEPOSIT_COUNT!= b.CHECK_DEPOSIT_COUNT\nor a.ACTUAL_PWIF_PAID!= b.ACTUAL_PWIF_PAID\nor a.CASHBACK!= b.CASHBACK\nor a.PROMO!= b.PROMO\nor a.LARGEST_CHECK_DEPOSIT_AMOUNT!= b.LARGEST_CHECK_DEPOSIT_AMOUNT\nor a.WIRE_WITHDRAWAL_AMOUNT!= b.WIRE_WITHDRAWAL_AMOUNT\nor a.WIRE_WITHDRAWAL_COUNT!= b.WIRE_WITHDRAWAL_COUNT\nor a.INTERNAL_TRANSFER_DEPOSIT!= b.INTERNAL_TRANSFER_DEPOSIT\nor a.INTERNAL_TRANSFER_WITHDRAWAL!= b.INTERNAL_TRANSFER_WITHDRAWAL\nor a.LARGEST_WIRE_WITHDRAWAL_AMOUNT!= b.LARGEST_WIRE_WITHDRAWAL_AMOUNT\nor a.WIRE_DEPOSIT_AMOUNT!= b.WIRE_DEPOSIT_AMOUNT\nor a.WIRE_DEPOSIT_COUNT!= b.WIRE_DEPOSIT_COUNT\nor a.LARGEST_WIRE_DEPOSIT_AMOUNT!= b.LARGEST_WIRE_DEPOSIT_AMOUNT\nor a.ATM_DEPOSIT_AMOUNT!= b.ATM_DEPOSIT_AMOUNT\nor a.ATM_DEPOSIT_COUNT!= b.ATM_DEPOSIT_COUNT\nor a.LARGEST_ATM_DEPOSIT_AMOUNT!= b.LARGEST_ATM_DEPOSIT_AMOUNT\nor a.ATM_WITHDRAWAL_AMOUNT!= b.ATM_WITHDRAWAL_AMOUNT\nor a.ATM_WITHDRAWAL_COUNT!= b.ATM_WITHDRAWAL_COUNT\nor a.LARGEST_ATM_WITHDRAWAL_AMOUNT!= b.LARGEST_ATM_WITHDRAWAL_AMOUNT\nor a.ATM_FEE_REFUND_AMOUNT!= b.ATM_FEE_REFUND_AMOUNT\nor a.AIM_DEBIT_AMOUNT!= b.AIM_DEBIT_AMOUNT\nor a.AIM_DEBIT_COUNT!= b.AIM_DEBIT_COUNT\nor a.AIM_PEOPLE_TRANSACTION_AVERAGE!= b.AIM_PEOPLE_TRANSACTION_AVERAGE\nor a.AIM_PEOPLE_DOLLAR_WEIGHTED_AVERAGE!= b.AIM_PEOPLE_DOLLAR_WEIGHTED_AVERAGE\nor a.DAILY_AIM_PEOPLE_SCORE!= b.DAILY_AIM_PEOPLE_SCORE\nor a.AIM_PLANET_TRANSACTION_AVERAGE!= b.AIM_PLANET_TRANSACTION_AVERAGE\nor a.AIM_PLANET_DOLLAR_WEIGHTED_AVERAGE!= b.AIM_PLANET_DOLLAR_WEIGHTED_AVERAGE\nor a.DAILY_AIM_PLANET_SCORE!= b.DAILY_AIM_PLANET_SCORE\nor a.OTHER_DEPOSIT_COUNT!= b.OTHER_DEPOSIT_COUNT\nor a.OTHER_DEPOSIT_AMOUNT!= b.OTHER_DEPOSIT_AMOUNT\nor a.OTHER_WITHDRAWAL_COUNT!= b.OTHER_WITHDRAWAL_COUNT\nor a.OTHER_WITHDRAWAL_AMOUNT!= b.OTHER_WITHDRAWAL_AMOUNT\nor a.PLANET_PROTECTION_SUBSCRIPTION_ACTIVE!= b.PLANET_PROTECTION_SUBSCRIPTION_ACTIVE\nor a.PLANET_PROTECTION_SUBSCRIBED_DEBIT_COUNT!= b.PLANET_PROTECTION_SUBSCRIBED_DEBIT_COUNT\nor a.PLANET_PROTECTION_UNSUBSCRIBED_DEBIT_COUNT!= b.PLANET_PROTECTION_UNSUBSCRIBED_DEBIT_COUNT\nor a.PLANET_PROTECTION_SUBSCRIBED_DEBIT_AMOUNT!= b.PLANET_PROTECTION_SUBSCRIBED_DEBIT_AMOUNT\nor a.PLANET_PROTECTION_UNSUBSCRIBED_DEBIT_AMOUNT!= b.PLANET_PROTECTION_UNSUBSCRIBED_DEBIT_AMOUNT\nor a.PLANET_PROTECTION_SUBSCRIBED_DEBIT_EMISSIONS_AMOUNT!= b.PLANET_PROTECTION_SUBSCRIBED_DEBIT_EMISSIONS_AMOUNT\nor a.PLANET_PROTECTION_UNSUBSCRIBED_DEBIT_EMISSIONS_AMOUNT!= b.PLANET_PROTECTION_UNSUBSCRIBED_DEBIT_EMISSIONS_AMOUNT\nor a.DAY_OVER_DAY_MONTHLY_FEE_SETTING_CHANGE!= b.DAY_OVER_DAY_MONTHLY_FEE_SETTING_CHANGE\nor a.DAY_OVER_DAY_YEARLY_FEE_SETTING_CHANGE!= b.DAY_OVER_DAY_YEARLY_FEE_SETTING_CHANGE;\n\ngrant select on ush.account_daily_diffs to role data_engineering_group;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958377":{"id":2958377,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-361,"y":-510,"width":32,"height":32,"inputConnectorIDs":[2958442],"outputSuccessConnectorIDs":[2958363],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SQL Script 11"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--delete from rdl.GALILEO_INTEREST_ACCRUAL\n--where file_date = '2020-10-23'\n\n--truncate table etl.table_row_count\n\n/*\n--drop table if exists etl.table_row_counts;\ncreate table etl.table_row_count\n(\n create_date timestamp,\n source varchar(30),\n table_name varchar(50),\n month_year date,\n row_count bigint\n);\n\ngrant select on etl.table_row_count to data_engineering_group\n\n\ndrop table if exists web_db_stg.cached_balance;\ncreate table web_db_stg.cached_balance\n(\n\tid bigint not null,\n\tuser_payment_account_id bigint not null,\n\tbalance numeric(36,4) null,\n\tis_current boolean not null,\n\toriginal_balance_response variant not null,\n\tdate_created TIMESTAMPNTZ not null,\n\tlast_updated TIMESTAMPNTZ not null,\n    etl_load_date TIMESTAMPNTZ not null\n);\n\n\ngrant select on  web_db_stg.cached_balance to data_engineering_group;\n\ndrop table if exists web_db.cached_balance;\ncreate table web_db.cached_balance\n(\n\tid bigint not null,\n\tuser_payment_account_id bigint not null,\n\tbalance numeric(36,4) null,\n\tis_current boolean not null,\n\toriginal_balance_response variant not null,\n\tdate_created TIMESTAMPNTZ not null,\n\tlast_updated TIMESTAMPNTZ not null,\n    etl_load_date TIMESTAMPNTZ not null\n);\n\n\ngrant select on  web_db.cached_balance to data_engineering_group;\ngrant select on  web_db.cached_balance to looker_role;\ngrant select on  web_db.cached_balance to data_science_analytics;\ngrant select on  web_db.cached_balance to read_only_internal_users;\n\n\ncreate table etl.test_account_restore as\nselect top 100 *\nfrom web_db_restore.account;\n*/\n\n---delete from rdl.ACH_GALILEO_FILE\n--where FILE_DATE = '2021-02-17';\n\n--create table rdl.alloy_evaluations_parsed_clone clone rdl.alloy_evaluations_parsed;\n--drop table rdl.alloy_evaluations_parsed_clone;\n\n--create table web_db.user_signup_clone clone web_db.user_signup;\n/*\ncreate table rdl.scholly_promotion\n(\n    scholly_promotion_id bigint identity not null,\n    batch_id varchar(50),\n    UNIQUE_ACCOUNT_ID varchar(100) not null,\n    prn varchar(50),\n    payment_date timestamptz,\n    payment_amount decimal(10,2),\n    status varchar(50),\n    galileo_file_name varchar(50),\n    galileo_file_record_number varchar(6),\n    galileo_response_code varchar(20),\n    created_at timestamptz not null,\n    updated_at timestamp_tz not null\n);\n\ncreate table rdl.scholly_promotion_output\n(\n    OUTPUT_ID                bigint identity not null,\n    BATCH_ID                 VARCHAR(40)                             not null,\n    GALILEO_OUTPUT_FILE_NAME VARCHAR(50)                             not null,\n    RECORD_TYPE              VARCHAR(1)                              not null,\n    RECORD_NUMBER            VARCHAR(6)                              not null,\n    ACCOUNT_ID_TYPE          VARCHAR(1)                              not null,\n    ACCOUNT_IDENTIFIER       VARCHAR(50)                             not null,\n    TRANSACTION_IDENTIFIER   VARCHAR(20)                             not null,\n    GALILEO_RESPONSE_CODE    VARCHAR(4)                              not null,\n    CREATED_AT               TIMESTAMPTZ default CURRENT_TIMESTAMP() not null\n);\n\ngrant select on rdl.scholly_promotion to data_engineering_group;\ngrant select on rdl.scholly_promotion_output to data_engineering_group;\n\n*/\n\n--grant USAGE on SCHEMA bi to ANODOT_POC_ROLE;\n--GRANT SELECT ON TABLE BI.DT_DEPOSITORY_TRANSACTIONS TO ANODOT_POC_ROLE;\n--grant role ANODOT_POC_ROLE to user SHARRIS;\n--revoke usage on schema bank_db_stg from role ANODOT_POC_ROLE;\n--grant usage on schema bank_db to role ANODOT_POC_ROLE;\n--GRANT SELECT ON TABLE bank_db.ROUNDUP_DAILY_TRANSFER TO ANODOT_POC_ROLE;\n--revoke SELECT ON TABLE bank_db.ROUNDUP_DAILY_TRANSFER from ANODOT_POC_ROLE;\n\n--delete from etl.issue_log\n--where issue_log_id = 2058;\n/*\ncreate table etl.operations_cancellation\n(\n    UUID varchar(50)\n    ,EMAIL varchar(200)\n    ,CUST_NAME varchar(100)\n    ,SPEND_PRN varchar(50)\n    ,SAVE_PRN varchar(50)\n);\n\n\ndelete from PROMOTIONS.THANK_YOU_PROGRAM\nwhere CREATED_AT::date = '2022-02-28'\n*/\ninsert into etl.ZENDESK_PRODUCTS\nselect 'zero','Zero','zero','_zero'"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958378":{"id":2958378,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-992,"y":-112,"width":32,"height":32,"inputConnectorIDs":[2958430],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"warehouse size to small (5)"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DEV"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WAREHOUSE_SIZE"},"2":{"slot":2,"type":"STRING","value":"XSMALL"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958379":{"id":2958379,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-1168,"y":-192,"width":32,"height":32,"inputConnectorIDs":[2958415],"outputSuccessConnectorIDs":[2958354],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"warehouse size to medium"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DEV"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WAREHOUSE_SIZE"},"2":{"slot":2,"type":"STRING","value":"MEDIUM"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958380":{"id":2958380,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-1312,"y":-208,"width":32,"height":32,"inputConnectorIDs":[2958431],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"ush.dt_account_daily_data"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"\nset timezone = 'America/Los_Angeles';\n\nDROP TABLE IF EXISTS ush.dt_summit_daily_fee_settings_tmp;\nCREATE TABLE ush.dt_summit_daily_fee_settings_tmp\nAS (\n  WITH\n  dates AS (\n    SELECT '2014-10-01'::DATE + i - 1 AS date\n    FROM (\n            select row_number() over(order by seq4()) as i\n            from table (\n                    generator(\n                            rowcount => 3000\n                        )\n                )\n           )\n    WHERE i <= CURRENT_DATE - '2014-10-01'::DATE + 1\n    ),\n  all_dep_dates AS (\n    SELECT a.unique_account_id\n      , COALESCE(a.galileo_id, a.radius_id) AS depository_id\n      , a.termination_date\n      , b.date\n    FROM bi.dt_accounts a\n    JOIN dates b ON b.date >= a.inception_date\n    WHERE a.inception_date IS NOT NULL\n    AND a.account_type = 'Checking'\n    ),\n  depository_fee_histories AS (\n    SELECT dta.unique_account_id\n      , dfh_g.fee_date\n      , dfh_g.fee_amount\n      , dfh_g.id\n    FROM web_db.depository_fee_history dfh_g\n    JOIN bi.dt_accounts dta ON (dta.galileo_id = dfh_g.depository_id)\n    UNION ALL\n    SELECT dta.unique_account_id\n      , dfh_r.fee_date as fee_date\n      , dfh_r.fee_amount\n      , dfh_r.id\n    FROM web_db.depository_fee_history dfh_r\n    JOIN bi.dt_accounts dta ON (dta.radius_id = dfh_r.depository_id)\n    ),\n  fee_history AS (\n    SELECT dfh.unique_account_id\n      , dfh.fee_date\n      , dfh.fee_amount\n    FROM (\n      SELECT dfh.unique_account_id\n        , dfh.fee_date\n        , MAX(dfh.id) AS max_id\n      FROM depository_fee_histories dfh\n      GROUP BY dfh.unique_account_id, dfh.fee_date\n      ) a\n    JOIN depository_fee_histories dfh ON a.max_id = dfh.id\n    ),\n  initial_fees AS (\n    SELECT b.unique_account_id\n      , min_date\n      , b.fee_amount AS initial_fee\n    FROM (\n      SELECT unique_account_id\n        , MIN(fee_date) AS min_date\n      FROM fee_history\n      GROUP BY 1\n      ) a\n    JOIN fee_history b ON (a.unique_account_id = b.unique_account_id AND a.min_date = b.fee_date)\n    )\n  SELECT foo.unique_account_id\n    , foo.date\n    , CASE WHEN foo.termination_date IS NULL OR foo.termination_date > foo.date\n      THEN COALESCE(CASE WHEN foo.date < min_date THEN initial_fee ELSE b.fee_amount END, 0)\n      ELSE 0 END AS fee_amount\n  FROM all_dep_dates foo\n  LEFT JOIN (\n    SELECT a.unique_account_id\n      , a.date\n      , MAX(b.fee_date) AS max_date\n    FROM all_dep_dates a\n    LEFT JOIN fee_history b ON a.unique_account_id = b.unique_account_id AND a.date >= b.fee_date\n    GROUP BY 1, 2\n    ) a ON foo.unique_account_id = a.unique_account_id AND foo.date = a.date\n  LEFT JOIN fee_history b ON a.unique_account_id = b.unique_account_id AND a.max_date = b.fee_date\n  LEFT JOIN initial_fees md ON md.unique_account_id = foo.unique_account_id\n);\n\nDROP TABLE IF EXISTS ush.dt_investment_daily_fee_settings_tmp;\nCREATE TABLE ush.dt_investment_daily_fee_settings_tmp\nAS (\n  WITH\n  dates AS (\n    SELECT '2014-10-01'::DATE + i - 1 AS date\n    FROM (\n            select row_number() over(order by seq4()) as i\n            from table (\n                    generator(\n                            rowcount => 3000\n                        )\n                )\n           )\n    WHERE i <= CURRENT_DATE - '2014-10-01'::DATE + 1\n    ),\n  all_inv_dates AS (\n    SELECT id AS investment_id\n      , date\n    FROM web_db.investment a\n    JOIN dates b ON b.date >= a.inception_date\n    WHERE inception_date IS NOT NULL\n    ),\n  fee_history AS (\n    SELECT ifh.investment_id\n      , ifh.fee_date::DATE as fee_date\n      , ifh.fee_pct\n    FROM (\n      SELECT investment_id\n        , fee_date::DATE as investment_fee_date\n\n        , max(id) AS max_id\n      FROM web_db.investment_fee_history\n      GROUP BY 1, 2\n      ) a\n    JOIN web_db.investment_fee_history ifh ON a.max_id = ifh.id AND ifh.investment_id = a.investment_id AND ifh.fee_date :: DATE = a.investment_fee_date :: DATE\n    ),\n  initial_fees AS (\n    SELECT b.investment_id\n      , min_date\n      , b.fee_pct AS initial_fee\n    FROM (\n      SELECT investment_id\n        , MIN(fee_date) AS min_date\n      FROM fee_history\n      GROUP BY 1) a\n    JOIN fee_history b ON a.investment_id = b.investment_id AND a.min_date = b.fee_date\n    )\n  SELECT 'i' || aid.investment_id AS unique_account_id\n    , aid.date\n    , CASE WHEN acc.termination_date IS NULL OR acc.termination_date > aid.date\n      THEN coalesce(CASE WHEN aid.date < min_date THEN initial_fee ELSE b.fee_pct END, 0)\n      ELSE 0 END AS fee_pct\n  FROM all_inv_dates aid\n  LEFT JOIN (\n    SELECT a.investment_id\n      , a.date\n      , max(b.fee_date) AS max_date\n    FROM all_inv_dates a\n    LEFT JOIN fee_history b ON a.investment_id = b.investment_id AND a.date >= b.fee_date\n    GROUP BY 1, 2\n    ) a ON a.investment_id = aid.investment_id AND a.date = aid.date\n  LEFT JOIN fee_history b ON aid.investment_id = b.investment_id AND a.max_date = b.fee_date\n  LEFT JOIN initial_fees md ON md.investment_id = a.investment_id\n  LEFT JOIN web_db.investment i ON i.id = b.investment_id\n  LEFT JOIN web_db.account acc ON acc.id = i.account_id\n);\n\n\nDROP TABLE IF EXISTS ush.dt_account_daily_fee_settings_tmp;\nCREATE TABLE ush.dt_account_daily_fee_settings_tmp\nAS (\n  SELECT a.unique_account_id\n    , a.date\n    , a.fee_amount AS monthly_fee_setting\n    , b.fee_amount AS previous_day_monthly_fee_setting\n    , NULL AS yearly_percent_setting\n    , NULL AS previous_day_yearly_percent_setting\n  FROM ush.dt_summit_daily_fee_settings_tmp a\n  LEFT JOIN ush.dt_summit_daily_fee_settings_tmp b ON a.unique_account_id = b.unique_account_id AND a.date = b.date + 1\n  UNION ALL\n  SELECT a.unique_account_id\n    , a.date\n    , NULL AS monthly_fee_setting\n    , NULL AS previous_day_monthly_fee_setting\n    , a.fee_pct AS yearly_percent_setting\n    , b.fee_pct AS previous_day_yearly_percent_setting\n  FROM ush.dt_investment_daily_fee_settings_tmp a\n  LEFT JOIN ush.dt_investment_daily_fee_settings_tmp b ON a.unique_account_id = b.unique_account_id AND a.date = b.date + 1\n);\n\n\nDROP TABLE IF EXISTS ush.dt_summit_daily_fee_settings_tmp;\nDROP TABLE IF EXISTS ush.dt_investment_daily_fee_settings_tmp;\n\n--insert any brand new accounts into etl.daily balances so they will be included in the table\n-- insert into etl.DAILY_BALANCES\n-- (UNIQUE_ACCOUNT_ID, DATE, DAILY_BALANCE, ORIGINAL_BALANCE, SPEND_DAILY_BALANCE, SAVE_DAILY_BALANCE, HAS_SET_RECURRING_DEPOSIT)\n-- select a.UNIQUE_ACCOUNT_ID,\n--        INCEPTION_DATE::date as date,\n--        0 as daily_balance,\n--        0 as original_balance,\n--        0 as spend_daily_balance,\n--        0 as save_daily_balance,\n--        false as has_set_recurring_deposit\n-- from bi.dt_accounts a\n-- left join etl.DAILY_BALANCES b on a.UNIQUE_ACCOUNT_ID = b.UNIQUE_ACCOUNT_ID\n-- where b.UNIQUE_ACCOUNT_ID is null\n-- and a.INCEPTION_DATE is not null\n-- and a.ACCOUNT_TYPE = 'Checking';\n\nDROP TABLE IF EXISTS ush.dt_investment_daily_balances_tmp;\nCREATE TABLE ush.dt_investment_daily_balances_tmp\nAS (\n  WITH\n  dates AS (\n    SELECT '2014-10-01'::DATE + i - 1 AS date\n    FROM (\n            select row_number() over(order by seq4()) as i\n            from table (\n                    generator(\n                            rowcount => 3000\n                        )\n                )\n           )\n    WHERE i <= CURRENT_DATE - '2014-10-01'::DATE + 1\n    ),\n  investment_dates AS (\n    SELECT 'i' || i.id AS unique_account_id\n      , date\n    FROM web_db.investment i\n    JOIN dates ON dates.date >= inception_date\n    WHERE inception_date IS NOT NULL\n    )\n  SELECT ad.unique_account_id\n    , ad.date\n    , COALESCE(ip.current_value, LAG(ip.current_value) IGNORE NULLS OVER (PARTITION BY ad.unique_account_id ORDER BY ad.date)) AS current_value\n  FROM investment_dates ad\n  LEFT JOIN web_db.investment_position ip ON ad.unique_account_id = 'i' || ip.investment_id AND ad.date = DATEADD('hour', 10, convert_timezone('America/Los_Angeles',ip.position_date))::date\n);\n\nDROP TABLE IF EXISTS ush.dt_investment_daily_balances_tmp_2;\n\nCREATE TABLE ush.dt_investment_daily_balances_tmp_2\nAS (\n  WITH\n  min_posted_investment_dates AS (\n    SELECT unique_account_id\n      , MIN(date) AS min_date\n    FROM ush.dt_investment_daily_balances_tmp\n    WHERE current_value > 0\n    GROUP BY 1\n    ),\n  initial_investment_balances AS (\n    SELECT db.unique_account_id\n      , db.current_value AS initial_balance\n      , min_date\n    FROM min_posted_investment_dates a\n    JOIN ush.dt_investment_daily_balances_tmp db ON a.unique_account_id = db.unique_account_id AND a.min_date = db.date\n    )\n  SELECT a.unique_account_id\n    , a.date\n    , greatest(0, CASE WHEN date < min_date THEN initial_balance ELSE current_value END) AS daily_balance\n    , current_value AS original_balance\n  FROM ush.dt_investment_daily_balances_tmp a\n  LEFT JOIN initial_investment_balances b ON a.unique_account_id = b.unique_account_id\n);\n\n\nDROP TABLE IF EXISTS ush.dt_investment_daily_balances_tmp;\n\nDROP TABLE IF EXISTS ush.dt_investment_daily_balances_tmp_3;\nCREATE TABLE ush.dt_investment_daily_balances_tmp_3\nAS (\n  SELECT unique_account_id\n    , date\n    , daily_balance\n    , original_balance\n    , null::dec(18,2) AS spend_daily_balance\n    , null::dec(18,2) AS save_daily_balance\n    , max(flag::int)\n    OVER(PARTITION BY unique_account_id)::BOOLEAN AS has_set_recurring_deposit\n    FROM (\n      SELECT a.*\n        , CASE when b.unique_account_id IS NULL THEN FALSE ELSE TRUE END AS flag\n      FROM ush.dt_investment_daily_balances_tmp_2 a\n      LEFT JOIN (\n        SELECT 'i' || investment_id AS unique_account_id\n          , date_created :: date AS sb_setting_dt\n        FROM web_db.recurring_order_txn\n        GROUP BY 1, 2\n        ) b on a.unique_account_id = b.unique_account_id AND a.date = b.sb_setting_dt\n      ) a\n);\n\n\nDROP TABLE IF EXISTS ush.dt_investment_daily_balances_tmp_2;\n\nDROP TABLE IF EXISTS ush.dt_account_daily_data_new;\nCREATE TABLE ush.dt_account_daily_data_new\nAS (\n  WITH\n  billpay AS (\n    SELECT cp.date_created::DATE AS check_creation_date,\n      dta.unique_account_id,\n      SUM(cp.amount) AS daily_bill_pay_amount,\n      COUNT(*) AS daily_bill_pay_count\n    FROM web_db.check_payment cp\n    JOIN bi.dt_accounts dta ON (cp.user_id = dta.user_id)\n    WHERE cp.status = 6\n    GROUP BY 1, 2\n    ),\n  planet_protection_subscription as (\n    select pp.unique_account_id,\n           pp.date\n    from etl.DAILY_BALANCES pp\n    where exists(\n          select 1\n          from web_db.subscription s\n          join bi.dt_accounts a on s.account_id = a.galileo_account_id\n          join WEB_DB.SUBSCRIPTION_INVOICE si on s.SUBSCRIPTION_ID = si.SUBSCRIPTION_ID\n          where s.plan_group ilike '%planet%protection%'\n            and pp.unique_account_id = a.unique_account_id\n            and pp.date between si.PERIOD_START::date and si.PERIOD_END::date\n            and si.STATUS = 'paid'\n        )\n    ),\n  transactions AS (\n    SELECT unique_account_id\n      , post_date\n      , sum(CASE WHEN transaction_type IN ('ACH Withdrawal', 'Coastal ACH Debit', 'Money Transfer') AND amount < 0 THEN amount ELSE 0 END) AS ach_withdrawal_amount\n      , min(CASE WHEN transaction_type IN ('ACH Withdrawal', 'Coastal ACH Debit', 'Money Transfer') AND amount < 0 THEN amount ELSE 0 END) AS largest_ach_withdrawal_amount\n      , sum(CASE WHEN transaction_type IN ('ACH Withdrawal', 'Coastal ACH Debit', 'Money Transfer') AND amount < 0 THEN 1 ELSE 0 END) AS ach_withdrawal_count\n      , sum(CASE WHEN transaction_type IN ('Debit Card - No PIN', 'Purchase', 'Unique Transactions') THEN amount ELSE 0 END) AS dbt_card_no_pin_amount\n      , min(CASE WHEN transaction_type IN ('Debit Card - No PIN', 'Purchase', 'Unique Transactions') THEN amount ELSE 0 END) AS largest_dbt_card_no_pin_amount\n      , sum(CASE WHEN transaction_type IN ('Debit Card - No PIN', 'Purchase', 'Unique Transactions') THEN 1 ELSE 0 END) AS dbt_card_no_pin_count\n      , sum(CASE WHEN transaction_type IN ('Interest','Interest Payment', 'Interest Posting', 'Interest Paid') THEN amount ELSE 0 END) AS interest_amount\n      , sum(CASE WHEN transaction_type IN ('Check Withdrawal', 'Bill Pay Check Payment', 'Bill Payment - Check', 'Convenience Check') THEN amount ELSE 0 END) AS check_withdrawal_amount\n      , min(CASE WHEN transaction_type IN ('Check Withdrawal', 'Bill Pay Check Payment', 'Bill Payment - Check', 'Convenience Check') THEN amount ELSE 0 END) AS largest_check_withdrawal_amount\n      , sum(CASE WHEN transaction_type IN ('Check Withdrawal', 'Bill Pay Check Payment', 'Bill Payment - Check', 'Convenience Check') THEN 1 ELSE 0 END) AS check_withdrawal_count\n      , sum(CASE WHEN transaction_type IN('Wire Transfer - Withdrawal', 'API funds transfer') AND amount < 0 THEN amount ELSE 0 END) AS wire_withdrawal_amount\n      , min(CASE WHEN transaction_type IN ('Wire Transfer - Withdrawal', 'API funds transfer') AND amount < 0 THEN amount ELSE 0 END) AS largest_wire_withdrawal_amount\n      , sum(CASE WHEN transaction_type IN ('Wire Transfer - Withdrawal', 'API funds transfer') AND amount < 0 THEN 1 ELSE 0 END) AS wire_withdrawal_count\n      , sum(CASE WHEN transaction_type IN ('Card to Card') THEN amount ELSE 0 END) as internal_transfer_deposit\n      , sum(CASE WHEN transaction_type in ('C2C - Customer Initiated') THEN amount ELSE 0 END) as internal_transfer_withdrawal\n      , sum(CASE WHEN transaction_type IN ('ATM Deposit', 'Money Transfer') AND amount > 0 THEN amount ELSE 0 END) AS atm_deposit_amount\n      , max(CASE WHEN transaction_type IN ('ATM Deposit', 'Money Transfer') AND amount > 0 THEN amount ELSE 0 END) AS largest_atm_deposit_amount\n      , sum(CASE WHEN transaction_type IN ('ATM Deposit', 'Money Transfer') AND amount > 0 THEN 1 ELSE 0 END) AS atm_deposit_count\n      , sum(CASE transaction_type WHEN 'ATM Withdrawal' THEN amount ELSE 0 END) AS atm_withdrawal_amount\n      , min(CASE transaction_type WHEN 'ATM Withdrawal' THEN amount ELSE 0 END) AS largest_atm_withdrawal_amount\n      , sum(CASE transaction_type WHEN 'ATM Withdrawal' THEN 1 ELSE 0 END) AS atm_withdrawal_count\n      , sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Pre-auth completion') THEN amount ELSE 0 END) AS dbt_card_pin_amount\n      , min(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Pre-auth completion') THEN amount ELSE 0 END) AS largest_dbt_card_pin_amount\n      , sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Pre-auth completion') THEN 1 ELSE 0 END) AS dbt_card_pin_count\n      , sum(CASE WHEN transaction_type IN ('Wire Transfer - Deposit', 'API funds transfer offset') THEN amount ELSE 0 END) AS wire_deposit_amount\n      , max(CASE WHEN transaction_type IN ('Wire Transfer - Deposit', 'API funds transfer offset') THEN amount ELSE 0 END) AS largest_wire_deposit_amount\n      , sum(CASE WHEN transaction_type IN ('Wire Transfer - Deposit', 'API funds transfer offset') THEN 1 ELSE 0 END) AS wire_deposit_count\n      , sum(CASE WHEN transaction_type IN ('ATM Fee Refund', 'Domestic ATM Fee Rebate', 'Int''l ATM Fee Rebate', 'Academy Credit', 'Fee Rebate') THEN amount ELSE 0 END) AS atm_fee_refund_amount\n      , sum(CASE WHEN transaction_type in ('ACH Deposit', 'Coastal ACH Deposit', 'E-Check') THEN amount ELSE 0 END) AS ach_deposit_amount\n      , max(CASE WHEN transaction_type in ('ACH Deposit', 'Coastal ACH Deposit', 'E-Check') THEN amount ELSE 0 END) AS largest_ach_deposit_amount\n      , sum(CASE WHEN transaction_type in ('ACH Deposit', 'Coastal ACH Deposit', 'E-Check') THEN 1 ELSE 0 END) AS ach_deposit_count\n      , sum(CASE WHEN transaction_type IN ('Check Deposit', 'RDC Other Check Deposit', 'Other Check Deposit') THEN amount ELSE 0 END) AS check_deposit_amount\n      , max(CASE WHEN transaction_type IN ('Check Deposit', 'RDC Other Check Deposit', 'Other Check Deposit') THEN amount ELSE 0 END) AS largest_check_deposit_amount\n      , sum(CASE WHEN transaction_type IN ('Check Deposit', 'RDC Other Check Deposit', 'Other Check Deposit') THEN 1 ELSE 0 END) AS check_deposit_count\n      , sum(CASE WHEN transaction_type in ('PWIF Monthly Summit Tip Fee', 'PWIF Payment', 'Aspiration Pay What is Fair') THEN amount ELSE 0 END) AS actual_pwif_paid\n      , sum(CASE WHEN transaction_type in ('Promotional Credit') THEN amount ELSE 0 END) as promo\n      , sum(CASE WHEN transaction_type in ('Cashback Rewards') THEN amount ELSE 0 END) as cashback\n      , sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN amount ELSE 0 END) AS aim_debit_amount\n      , sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN 1 ELSE 0 END) AS aim_debit_count\n      , avg(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN aim_planet_score ELSE NULL END)::decimal(38,6) AS aim_planet_transaction_average\n      , sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN -aim_planet_score * amount ELSE NULL END)\n        /sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN -amount ELSE NULL END)::decimal(38,6) AS aim_planet_dollar_weighted_average\n      , avg(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN aim_people_score ELSE NULL END) AS aim_people_transaction_average\n      , sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN -aim_people_score * amount ELSE NULL END)\n        /sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN -amount ELSE NULL END)::decimal(38,6) AS aim_people_dollar_weighted_average\n      , sum(CASE WHEN transaction_type IN('Reversal-Credit Account', 'Merchant Credit', 'Temp Provisional Credit', 'Cashback Rewards', 'Chargeback', 'Arbitration Chargeback', 'STAR Chargeback', 'Charge Off',\n                                         'Returned ACH Items', 'Debit Chargeback', 'Final Dispute', 'Visa Chargeback', 'Admin Adjustment',\n                                         'RDC Other Check Dep Ret', 'Debit or Credit Adjustment', 'Maestro Load', 'UNKNOWN',\n                                          'Debit Card Return', 'Deposit Verification', 'Balance Transfer', 'Paypal Deposit', 'Radius ACH transfer adj', 'Convenience Check Adjustment',\n                                         'Wire Transfer - Fee', 'CS Agent Initiated Adjustment', 'Chargeback/Credit Temporary Adjustment', 'Foreign Transaction Fee', 'Domestic Wire Out Fee',\n                                         'International Wire Out Fee', 'Domestic Wire In Fee', 'International Wire In Fee', 'Cancelled acct or failedid refund adjustment', 'Repayment of Overdraft Funds',\n                                         'Outgoing Wire Transfer Reversal', 'Outgoing Wire Transfer', 'Transfer for Program Secured DDA', 'Write off Fees', 'Closing Transfer to Card', 'MasterCard Load',\n                                         'Refund', 'Wire Transfer - Deposit - Reversal') AND amount > 0 THEN 1 ELSE 0 END)::decimal(38,6) as other_deposit_count\n      , sum(CASE WHEN transaction_type IN('Reversal-Credit Account',  'Merchant Credit', 'Temp Provisional Credit', 'Cashback Rewards', 'Chargeback', 'Arbitration Chargeback', 'STAR Chargeback', 'Charge Off',\n                                         'Returned ACH Items', 'Debit Chargeback', 'Final Dispute', 'Visa Chargeback', 'Admin Adjustment',\n                                         'RDC Other Check Dep Ret', 'Debit or Credit Adjustment', 'Maestro Load', 'UNKNOWN',\n                                          'Debit Card Return', 'Deposit Verification', 'Balance Transfer', 'Paypal Deposit', 'Radius ACH transfer adj.', 'Convenience Check Adjustment',\n                                         'Wire Transfer - Fee', 'CS Agent Initiated Adjustment', 'Chargeback/Credit Temporary Adjustment', 'Foreign Transaction Fee', 'Domestic Wire Out Fee',\n                                         'International Wire Out Fee', 'Domestic Wire In Fee', 'International Wire In Fee', 'Cancelled acct or failedid refund adjustment', 'Repayment of Overdraft Funds',\n                                         'Outgoing Wire Transfer Reversal', 'Outgoing Wire Transfer', 'Transfer for Program Secured DDA', 'Write off Fees', 'Closing Transfer to Card', 'MasterCard Load',\n                                         'Refund', 'Wire Transfer - Deposit - Reversal') AND amount > 0 THEN amount ELSE 0 END)::decimal(38,6) as other_deposit_amount\n      , sum(CASE WHEN transaction_type IN('Repayment of Overdraft Funds', 'Settlement Reversals', 'Domestic Wire In Fee', 'Domestic Wire Out Fee', 'International Wire In Fee', 'International Wire Out Fee',\n                                          'C2C - Customer Initiated', 'Charge Off Recovery', 'ATM Intl. Fee', 'Express mail fee', 'Foreign Transaction Fee','Over the Counter Cash Access Fee (International)', '2nd Presentment',\n                                         'Returned ACH Items', 'Charge Off Recovery', 'Debit 2nd Presentment', 'Final Dispute',\n                                         'Visa Chargeback', 'Admin Adjustment', 'Visa Second Presentment', 'RDC Other Check Dep Ret', 'ACH Debit Adjustment', 'Temp Provisional Credit',\n                                          'Radius ACH transfer adj.', 'Convenience Check Adjustment', 'Wire Transfer - Fee', 'CS Agent Initiated Adjustment', 'Chargeback/Credit Temporary Adjustment',\n                                         'Cancelled acct or failedid refund adjustment','Outgoing Wire Transfer Reversal', 'Outgoing Wire Transfer', 'Transfer for Program Secured DDA', 'Write off Fees',\n                                          'Arbitration Chargeback', 'Reversal-Credit Account', 'Cash Disbursements', 'Wire Transfer - Withdrawal - Reversal', 'Coastal ACH Reversal',\n                                          'Charge Off Recovery', 'Express mail fee', 'Closing Transfer from Savings', 'Force Post Settle-Could not match to an Auth', 'Reversal-Debiting Account',\n                                         'Retail Sale', 'Auth', 'Over the Counter Cash Access Fee (International)') AND amount < 0 THEN 1 ELSE 0 END)::decimal(38,6) as other_withdrawal_count\n      , sum(CASE WHEN transaction_type IN('Repayment of Overdraft Funds', 'Settlement Reversals', 'Domestic Wire In Fee', 'Domestic Wire Out Fee', 'International Wire In Fee', 'International Wire Out Fee',\n                                          'C2C - Customer Initiated', 'Charge Off Recovery', 'ATM Intl. Fee', 'Express mail fee', 'Foreign Transaction Fee','Over the Counter Cash Access Fee (International)', '2nd Presentment',\n                                         'Returned ACH Items', 'Charge Off Recovery', 'Debit 2nd Presentment', 'Final Dispute',\n                                         'Visa Chargeback', 'Admin Adjustment', 'Visa Second Presentment', 'RDC Other Check Dep Ret', 'ACH Debit Adjustment', 'Temp Provisional Credit',\n                                          'Radius ACH transfer adj.', 'Convenience Check Adjustment', 'Wire Transfer - Fee', 'CS Agent Initiated Adjustment', 'Chargeback/Credit Temporary Adjustment',\n                                         'Cancelled acct or failedid refund adjustment','Outgoing Wire Transfer Reversal', 'Outgoing Wire Transfer', 'Transfer for Program Secured DDA', 'Write off Fees',\n                                          'Arbitration Chargeback', 'Reversal-Credit Account', 'Cash Disbursements', 'Wire Transfer - Withdrawal - Reversal', 'Coastal ACH Reversal',\n                                          'Charge Off Recovery', 'Express mail fee', 'Closing Transfer from Savings', 'Force Post Settle-Could not match to an Auth', 'Reversal-Debiting Account',\n                                         'Retail Sale', 'Auth', 'Over the Counter Cash Access Fee (International)') AND amount < 0 THEN amount ELSE 0 END)::decimal(38,6) as other_withdrawal_amount\n       , sum(CASE WHEN amount < 0 and emissions_amount is not null and is_planet_protection_subscribed = true THEN 1 ELSE 0 END) AS planet_protection_subscribed_debit_count\n       , sum(CASE WHEN amount < 0 and emissions_amount is not null and is_planet_protection_subscribed = false THEN 1 ELSE 0 END) AS planet_protection_unsubscribed_debit_count\n       , sum(CASE WHEN amount < 0 and emissions_amount is not null and is_planet_protection_subscribed = true THEN amount ELSE 0 END) AS planet_protection_subscribed_debit_amount\n       , sum(CASE WHEN amount < 0 and emissions_amount is not null and is_planet_protection_subscribed = false THEN amount ELSE 0 END) AS planet_protection_unsubscribed_debit_amount\n       , sum(CASE WHEN amount < 0 and emissions_amount is not null and is_planet_protection_subscribed = true THEN emissions_amount ELSE 0 END) AS planet_protection_subscribed_debit_emissions_amount\n       , sum(CASE WHEN amount < 0 and emissions_amount is not null and is_planet_protection_subscribed = false THEN emissions_amount ELSE 0 END) AS planet_protection_unsubscribed_debit_emissions_amount\n    FROM bi.dt_depository_transactions\n    where post_date >= (current_date - 70)\n    GROUP BY 1, 2\n    )\n     , final_txn as (\n  SELECT a.unique_account_id\n    , account_type\n    , a.date\n    , a.daily_balance\n    , a.original_balance\n    , a.spend_daily_balance\n    , a.save_daily_balance\n    , a.has_set_recurring_deposit\n    , CASE WHEN acc.initial_transfer_posted_date IS NULL OR acc.initial_transfer_posted_date > a.date THEN FALSE ELSE TRUE END AS is_funded\n    , CASE WHEN account_type = 'Checking' THEN coalesce(daily_bill_pay_amount, 0) ELSE NULL END AS daily_bill_pay_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(daily_bill_pay_count, 0) ELSE NULL END AS daily_bill_pay_count\n    , CASE WHEN termination_date IS NULL OR termination_date > a.date THEN FALSE ELSE TRUE END AS is_terminated\n    , coalesce(monthly_fee_setting, daily_balance * yearly_percent_setting / 12) AS monthly_usd_fee_setting\n    , coalesce(yearly_percent_setting, CASE WHEN daily_balance = 0 THEN 0 ELSE monthly_fee_setting * 12 / (1.0 * daily_balance) END) AS yearly_percent_fee_setting\n    , coalesce(previous_day_monthly_fee_setting, daily_balance * previous_day_yearly_percent_setting / 12) AS previous_day_monthly_usd_fee_setting\n    , coalesce(previous_day_yearly_percent_setting, CASE WHEN daily_balance = 0 THEN 0 ELSE previous_day_monthly_fee_setting * 12 / (1.0 * daily_balance) END) AS previous_day_yearly_percent_fee_setting\n    , CASE WHEN account_type = 'Checking' THEN coalesce(ach_withdrawal_amount, 0) ELSE NULL END AS ach_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(ach_withdrawal_count, 0) ELSE NULL END AS ach_withdrawal_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_ach_withdrawal_amount, 0) ELSE NULL END AS largest_ach_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(ach_deposit_amount, 0) ELSE NULL END AS ach_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(ach_deposit_count, 0) ELSE NULL END AS ach_deposit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_ach_deposit_amount, 0) ELSE NULL END AS largest_ach_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(dbt_card_no_pin_amount, 0) ELSE NULL END AS dbt_card_no_pin_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(dbt_card_no_pin_count, 0) ELSE NULL END AS dbt_card_no_pin_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_dbt_card_no_pin_amount, 0) ELSE NULL END AS largest_dbt_card_no_pin_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(dbt_card_pin_amount, 0) ELSE NULL END AS dbt_card_pin_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(dbt_card_pin_count, 0) ELSE NULL END AS dbt_card_pin_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_dbt_card_pin_amount, 0) ELSE NULL END AS largest_dbt_card_pin_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(interest_amount, 0) ELSE NULL END AS interest_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(check_withdrawal_amount, 0) ELSE NULL END AS check_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(check_withdrawal_count, 0) ELSE NULL END AS check_withdrawal_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_check_withdrawal_amount, 0) ELSE NULL END AS largest_check_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(check_deposit_amount, 0) ELSE NULL END AS check_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(check_deposit_count, 0) ELSE NULL END AS check_deposit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(actual_pwif_paid, 0) ELSE NULL END AS actual_pwif_paid\n    , CASE WHEN account_type = 'Checking' THEN coalesce(cashback, 0) ELSE NULL END AS cashback\n    , CASE WHEN account_type = 'Checking' THEN coalesce(promo, 0) ELSE NULL END AS promo\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_check_deposit_amount, 0) ELSE NULL END AS largest_check_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(wire_withdrawal_amount, 0) ELSE NULL END AS wire_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(wire_withdrawal_count, 0) ELSE NULL END AS wire_withdrawal_count\n    , CASE when account_type = 'Checking' THEN coalesce(internal_transfer_deposit, 0) ELSE NULL END AS internal_transfer_deposit\n    , CASE when account_type = 'Checking' THEN coalesce(internal_transfer_withdrawal, 0) ELSE NULL END AS internal_transfer_withdrawal\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_wire_withdrawal_amount, 0) ELSE NULL END AS largest_wire_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(wire_deposit_amount, 0) ELSE NULL END AS wire_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(wire_deposit_count, 0) ELSE NULL END AS wire_deposit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_wire_deposit_amount, 0) ELSE NULL END AS largest_wire_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(atm_deposit_amount, 0) ELSE NULL END AS atm_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(atm_deposit_count, 0) ELSE NULL END AS atm_deposit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_atm_deposit_amount, 0) ELSE NULL END AS largest_atm_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(atm_withdrawal_amount, 0) ELSE NULL END AS atm_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(atm_withdrawal_count, 0) ELSE NULL END AS atm_withdrawal_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_atm_withdrawal_amount, 0) ELSE NULL END AS largest_atm_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(atm_fee_refund_amount, 0) ELSE NULL END AS atm_fee_refund_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(aim_debit_amount, 0) ELSE NULL END AS aim_debit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(aim_debit_count, 0) ELSE NULL END AS aim_debit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(aim_people_transaction_average, 0) ELSE NULL END AS aim_people_transaction_average\n    , CASE WHEN account_type = 'Checking' THEN coalesce(aim_people_dollar_weighted_average, 0) ELSE NULL END AS aim_people_dollar_weighted_average\n    , CASE WHEN account_type = 'Checking' THEN coalesce(0.5 * aim_people_transaction_average + 0.5 * aim_people_dollar_weighted_average, 0) ELSE NULL END AS daily_aim_people_score\n    , CASE WHEN account_type = 'Checking' THEN coalesce(aim_planet_transaction_average, 0) ELSE NULL END AS aim_planet_transaction_average\n    , CASE WHEN account_type = 'Checking' THEN coalesce(aim_planet_transaction_average, 0) ELSE NULL END AS aim_planet_dollar_weighted_average\n    , CASE WHEN account_type = 'Checking' THEN coalesce(0 / 5 * aim_planet_transaction_average + 0.5 * aim_planet_dollar_weighted_average, 0) ELSE NULL END AS daily_aim_planet_score\n    , CASE WHEN account_type = 'Checking' THEN coalesce(other_deposit_count, 0) ELSE NULL END AS other_deposit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(other_deposit_amount, 0) ELSE NULL END AS other_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(other_withdrawal_count, 0) ELSE NULL END AS other_withdrawal_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(other_withdrawal_amount, 0) ELSE NULL END AS other_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' AND pps.unique_account_id IS NOT NULL THEN TRUE ELSE FALSE END AS planet_protection_subscription_active\n    , CASE WHEN account_type = 'Checking' THEN coalesce(planet_protection_subscribed_debit_count, 0) ELSE NULL END AS planet_protection_subscribed_debit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(planet_protection_unsubscribed_debit_count, 0) ELSE NULL END AS planet_protection_unsubscribed_debit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(planet_protection_subscribed_debit_amount, 0) ELSE NULL END AS planet_protection_subscribed_debit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(planet_protection_unsubscribed_debit_amount, 0) ELSE NULL END AS planet_protection_unsubscribed_debit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(planet_protection_subscribed_debit_emissions_amount, 0) ELSE NULL END AS planet_protection_subscribed_debit_emissions_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(planet_protection_unsubscribed_debit_emissions_amount, 0) ELSE NULL END AS planet_protection_unsubscribed_debit_emissions_amount\n  FROM (\n    SELECT *\n    FROM etl.DAILY_BALANCES\n    WHERE DATE >= (current_date - 625)\n    UNION ALL\n    SELECT *\n    FROM ush.dt_investment_daily_balances_tmp_3\n    WHERE DATE >= (current_date - 625)\n    ) a\n  JOIN bi.dt_accounts acc ON a.unique_account_id = acc.unique_account_id\n  LEFT JOIN billpay pay ON a.unique_account_id = pay.unique_account_id AND a.date = pay.check_creation_date\n  LEFT JOIN ush.dt_account_daily_fee_settings_tmp dfs ON a.unique_account_id = dfs.unique_account_id AND a.date = dfs.date\n  LEFT JOIN transactions b ON a.unique_account_id = b.unique_account_id AND a.date = b.post_date\n  LEFT JOIN planet_protection_subscription pps ON a.unique_account_id = pps.unique_account_id AND a.date = pps.date\n)\n  SELECT a.*\n    , a.monthly_usd_fee_setting - a.previous_day_monthly_usd_fee_setting AS day_over_day_monthly_fee_setting_change\n    , a.yearly_percent_fee_setting - a.previous_day_yearly_percent_fee_setting AS day_over_day_yearly_fee_setting_change\n    , a.unique_account_id || '-' || to_varchar(a.date,'yyyymmdd') AS unique_id\n  FROM final_txn a\n  order by a.unique_account_id, a.date\n);\n\n\n\n\nDROP TABLE IF EXISTS ush.dt_investment_daily_balances_tmp_2;\nDROP TABLE IF EXISTS ush.dt_investment_daily_balances_tmp_3;\nDROP TABLE IF EXISTS ush.dt_account_daily_fee_settings_tmp;\nDROP TABLE IF EXISTS ush.dt_summit_daily_balances_tmp_2;\n\n--append new data to daily table\ndrop table if exists ush.dt_account_daily_data;\ncreate table ush.dt_account_daily_data clone bi.dt_account_daily_data;\n\ndelete from ush.dt_account_daily_data\nwhere date >= (select min(date) from ush.dt_account_daily_data_new);\n\ninsert into ush.dt_account_daily_data\nselect *\nfrom ush.dt_account_daily_data_new;\n\ndrop table if exists ush.dt_account_daily_data_new;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958381":{"id":2958381,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-461,"y":-507,"width":32,"height":32,"inputConnectorIDs":[2958360],"outputSuccessConnectorIDs":[2958442],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SQL Script 10"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/*drop table if exists rdl.authorization_response;\ncreate table rdl.authorization_response\nas     \nselect '00' as auth_code, 'Success' as auth_description\nunion all select '01', 'Issuer Error'\nunion all select '04', 'Pick Up'\nunion all select '05', 'Do Not Honor'\nunion all select '06', 'Error'\nunion all select '10', 'Partial Approval'\nunion all select '14', 'Invalid PAN'\nunion all select '30', 'Format Error'\nunion all select '41', 'Lost Fraud Pick Up'\nunion all select '43', 'Stolen Fraud Pick Up'\nunion all select '51', 'NSF'\nunion all select '54', 'Card Expired'\nunion all select '55', 'Invalid PIN'\nunion all select '57', 'Transaction not Permitted to Cardholder'\nunion all select '59', 'Suspected Fraud (Visa Only)'\nunion all select '61', 'Exceeds Amount Limit'\nunion all select '65', 'Exceeds Count Limit'\nunion all select '75', 'Pin Count Exceeded'\nunion all select '85', 'AVS Only (No reason to decline)'\nunion all select '87', 'Partial Approval (POS Amount only, no cashback)'\nunion all select '96', 'System Error'\nunion all select 'N7', 'Invalid CVV2 (Visa Only)';*/\n\ncreate table rdl.galileo_network_code\n(\n    network_code varchar(5),\n    network_name varchar(100),\n    primary key (network_code)\n);\n\ninsert into rdl.galileo_network_code\n(network_code, network_name)\nselect 'A',\t'Allpoint'\nunion select 'B',\t'Pulse'\nunion select 'C',\t'Maestro / Cirrus'\nunion select 'D',\t'Discover'\nunion select 'I',\t'Interlink'\nunion select 'M',\t'Mastercard'\nunion select 'P',\t'Maestro'\nunion select 'S',\t'Star'\nunion select 'V',\t'Visa'\nunion select 'Z',\t'Visa Plus';"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958382":{"id":2958382,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-1360,"y":-128,"width":32,"height":32,"inputConnectorIDs":[2958414],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"etl.daily_balances"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DROP TABLE IF EXISTS etl.daily_balances_staging_0;\nCREATE TABLE etl.daily_balances_staging_0\nAS (\n  WITH\n  dates AS (\n    SELECT '2014-10-01'::DATE + i - 1 AS date\n    FROM (\n            select row_number() over(order by seq4()) as i\n            from table (\n                    generator(\n                            rowcount => 3000\n                        )\n                )\n           )\n    WHERE i <= CURRENT_DATE - '2014-10-01'::DATE + 1\n    ),\n  summit_dates AS (\n    SELECT dta.unique_account_id\n      , dates.date\n      , dta.termination_date\n    FROM bi.dt_accounts dta\n    JOIN dates ON dates.date >= dta.inception_date\n    WHERE dta.inception_date IS NOT NULL\n      AND dta.account_type = 'Checking'\n      AND dates.date <= ifnull(dta.TERMINATION_DATE,current_date::date)\n    ),\n  r_depository_balances AS (\n    SELECT dta.unique_account_id\n      , CASE\n            -- if account is terminated then nullify its balance\n            WHEN ad.date <= r_a.termination_date::date THEN COALESCE(db.current_balance, LAG(db.current_balance) IGNORE NULLS OVER (PARTITION BY dta.unique_account_id ORDER BY ad.date), 0)\n            ELSE 0\n        END AS current_balance\n      , ad.date AS balance_date\n    FROM summit_dates ad\n    JOIN bi.dt_accounts dta ON ad.unique_account_id = dta.unique_account_id\n    LEFT JOIN web_db.depository_balance db ON ad.date = db.balance_date AND dta.radius_id = db.depository_id\n    left join web_db.depository b on dta.radius_id = b.id\n    left JOIN web_db.account r_a on r_a.id = b.account_id\n    ),\n  g_depository_balances AS (\n    SELECT dta.unique_account_id\n      , COALESCE(rgcmd.spend_current_balance, LAG(rgcmd.spend_current_balance) IGNORE NULLS OVER (PARTITION BY dta.unique_account_id ORDER BY ad.date), 0.0) AS spend_current_balance\n      , COALESCE(rgcmd.save_current_balance, LAG(rgcmd.save_current_balance) IGNORE NULLS OVER (PARTITION BY dta.unique_account_id ORDER BY ad.date), 0.0) AS save_current_balance\n      , ad.date AS balance_date\n    FROM summit_dates ad\n    JOIN bi.dt_accounts dta ON ad.unique_account_id = dta.unique_account_id\n    LEFT JOIN (\n      SELECT ga.aspiration_user_id\n        , t.file_date\n        , MAX(CASE WHEN t.type_of_account = '6' THEN CONCAT(t.current_balance_sign, t.current_balance::decimal(18,2))::dec(18,2) END) AS spend_current_balance\n        , MAX(CASE WHEN t.type_of_account = '8' THEN CONCAT(t.current_balance_sign, t.current_balance::decimal(18,2))::dec(18,2) END) AS save_current_balance\n      FROM rdl.raw_galileo_customer_master_data t\n      JOIN aog_db.galileo_accounts ga ON (ga.galileo_account_number = t.galileo_account_id)\n      JOIN web_db.user_product_application upa ON (upa.id = ga.aspiration_application_id)\n      WHERE ga.active = true\n        AND upa.account_type_id = 2\n      GROUP BY ga.aspiration_user_id, t.file_date\n      ) AS rgcmd ON (rgcmd.aspiration_user_id = dta.user_id AND ad.date = rgcmd.file_date)\n    )\n  SELECT ad.unique_account_id\n    , ad.date\n    , ifnull(g_db.spend_current_balance, 0) + ifnull(g_db.save_current_balance, 0) + ifnull(r_db.current_balance, 0) AS current_balance\n    , ifnull(g_db.spend_current_balance, 0) + ifnull(r_db.current_balance, 0) AS spend_current_balance\n    , ifnull(g_db.save_current_balance, 0) AS save_current_balance\n\n  FROM summit_dates ad\n  LEFT JOIN r_depository_balances r_db ON ad.unique_account_id = r_db.unique_account_id AND ad.date = r_db.balance_date\n  LEFT JOIN g_depository_balances g_db ON ad.unique_account_id = g_db.unique_account_id AND ad.date = g_db.balance_date\n  \n); \n\nDROP TABLE IF EXISTS etl.daily_balances_staging;\nCREATE TABLE etl.daily_balances_staging\nAS (\n  WITH\n  min_posted_summit_dates AS (\n    SELECT unique_account_id\n      , min(date) AS min_date\n    FROM etl.daily_balances_staging_0\n    WHERE current_balance > 0\n    GROUP BY 1\n    ),\n  initial_summit_balances AS (\n    SELECT db.unique_account_id\n      , db.current_balance AS initial_balance\n      , min_date\n    FROM min_posted_summit_dates a\n    JOIN etl.daily_balances_staging_0 db ON a.unique_account_id = db.unique_account_id AND a.min_date = db.date\n    )\n  SELECT a.unique_account_id\n    , a.date\n    , GREATEST(0, CASE WHEN date < min_date THEN initial_balance ELSE current_balance END) AS daily_balance\n    , current_balance AS original_balance\n    , spend_current_balance AS spend_daily_balance\n    , save_current_balance AS save_daily_balance\n    , false AS has_set_recurring_deposit\n  FROM etl.daily_balances_staging_0 a\n  LEFT JOIN initial_summit_balances b ON a.unique_account_id = b.unique_account_id\n);\n\nalter table etl.daily_balances rename to etl.daily_balances_old;\nalter table etl.daily_balances_staging rename to etl.daily_balances;\ndrop table if exists etl.daily_balances_old;\nDROP TABLE IF EXISTS etl.daily_balances_staging_0;\n\ngrant select on etl.daily_balances to role data_engineering_group;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958383":{"id":2958383,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-1088,"y":-192,"width":32,"height":32,"inputConnectorIDs":[2958427],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"etl.radius_daily_balances"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop table if exists etl.radius_daily_balances;\n/*create table etl.radius_daily_balances\nAS \n  WITH\n  dates AS (\n    SELECT '2014-10-01'::DATE + i - 1 AS date\n    FROM (\n            select row_number() over(order by seq4()) as i\n            from table (\n                    generator(\n                            rowcount => 3000\n                        )\n                )\n           )\n    WHERE i <= CURRENT_DATE - '2014-10-01'::DATE + 1\n    ),\n  summit_dates AS (\n    SELECT dta.unique_account_id\n      , dates.date\n    FROM bi.dt_accounts dta\n    JOIN dates ON dates.date >= dta.inception_date\n    WHERE dta.inception_date IS NOT NULL\n      AND dta.account_type = 'Checking'\n      AND dates.date <= ifnull(dta.TERMINATION_DATE,current_date::date)\n    )\n    SELECT dta.unique_account_id, dta.termination_date\n      , CASE\n            -- if account is terminated then nullify its balance\n            WHEN ad.date <= r_a.termination_date::date THEN COALESCE(db.current_balance, LAG(db.current_balance) IGNORE NULLS OVER (PARTITION BY dta.unique_account_id ORDER BY ad.date), 0)\n            ELSE 0\n        END AS current_balance\n      , ad.date AS balance_date\n    FROM summit_dates ad\n    JOIN bi.dt_accounts dta ON ad.unique_account_id = dta.unique_account_id\n    JOIN web_db.depository_balance db ON ad.date = db.balance_date AND dta.radius_id = db.depository_id\n    join web_db.depository b on dta.radius_id = b.id\n    JOIN web_db.account r_a on r_a.id = b.account_id\n;\n\ngrant select on etl.radius_daily_balances to role data_engineering_group;*/"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958384":{"id":2958384,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-1504,"y":-528,"width":32,"height":32,"inputConnectorIDs":[2958437],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958402],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of dt table (1)"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse dev;\n\n\n\nSET TIMEZONE = 'America/Los_Angeles';\n\ndrop table if exists tmp_plaid_balance;\ncreate temp table tmp_plaid_balance as\nwith plaid_data as (\n    select pii.id,\n           pii.USER_PAYMENT_ACCOUNT_ID,\n           upa.last_four_digits as upa_last_four,\n           upa.account_type,\n           case upa.account_type\n              when 1 then 'checking'\n              when 2 then 'savings'\n              else 'unknown'\n           end as upa_account_type,\n           parse_json(ORIGINAL_PLAID_DATA) as plaid_source\n    from web_db.bank_account_plaid_identity_info pii\n    left join web_db.user_payment_account upa on pii.user_payment_account_id = upa.id\n    where pii.original_plaid_data is not null\n    and pii.original_plaid_data not ilike '{\"error\"%'\n)\nselect id,\n       USER_PAYMENT_ACCOUNT_ID,\n       upa_last_four,\n       upa_account_type,\n       value:mask::string as plaid_last_four,\n       lower(value:subtype::string) as plaid_account_type,\n       value:balances:available::numeric(30,2) as plaid_available_balance,\n       value:balances:current::numeric(30,2) as plaid_current_balance,\n       value:balances:limit::numeric(30,2) as plaid_account_limit,\n       case when upa_last_four = plaid_last_four and upa_account_type = plaid_account_type then 1\n            when upa_last_four = plaid_last_four and upa_account_type <> plaid_account_type then 2\n            when upa_last_four <> plaid_last_four and upa_account_type = plaid_account_type then 3\n            else 4\n       end as plaid_upa_match_rank,\n       case when plaid_upa_match_rank = 1 then 'last 4 and account type both match'\n            when plaid_upa_match_rank = 2 then 'last 4 match only'\n            when plaid_upa_match_rank = 3 then 'account type match only'\n            when plaid_upa_match_rank = 4 then 'no match on either last 4 or account type'\n       end as plaid_balance_match_type,\n       row_number() over (partition by id\n                              order by plaid_upa_match_rank asc nulls last,\n                                       plaid_available_balance desc nulls last,\n                                       plaid_current_balance desc nulls last) as plaid_choice_rank\nfrom plaid_data jd, lateral flatten (input => jd.plaid_source, path => 'accounts');\n\nDROP TABLE IF EXISTS ush.dt_banks;\nCREATE TABLE ush.dt_banks\nAS \n(\nwith bapii_max_ids as (\n\tSELECT\n\t  user_payment_account_id,\n\t  max(id) as max_id\n\tFROM web_db.bank_account_plaid_identity_info\n\tWHERE 1=1\n\t--  AND user_payment_account_id=528507\n\tGROUP BY user_payment_account_id\n),\n\nbapii as (\n\tselect * from web_db.bank_account_plaid_identity_info\n\twhere bank_account_plaid_identity_info.id in (\n\t  select max_id from bapii_max_ids\n\t)\n)\n\nSELECT user_id,\n\tupa.id AS user_payment_account_id,\n    null as STRIPE_PAYMENT_METHOD_ID,\n\tRTRIM(REGEXP_REPLACE(\n\tCASE \n\t    WHEN UPPER(upa.name) LIKE '%CHASE%' THEN 'Chase Bank'\n\t    WHEN UPPER(upa.name) LIKE 'COMPASS BANK%' THEN 'Compass Bank'\n\t    WHEN UPPER(upa.name) LIKE 'PNC BANK%' THEN 'PNC Bank'\n\t    WHEN UPPER(upa.name) LIKE '%GREEN DOT%' THEN 'Green Dot'\n\t    WHEN UPPER(upa.name) LIKE '%BANCORP.COM%' THEN 'Bancorp Bank'\n\t    ELSE upa.name \n\tEND, '\\(x[0-9]{4}\\)', '')) AS bank_name,\n    NULL as card_brand,\n\n\tis_verified,\n\n\tCASE\n\t\tWHEN depository_id IS NOT NULL\n\t\t\tOR (upa.NAME in ('Radius Account','Radius Bank') and upa.VALIDATION_TYPE = 3)\n\t\tTHEN TRUE\n\t\tELSE FALSE\n\tEND AS is_checking_account,\n\t\t\n        upa.is_deleted,\n        upa.is_admin_disabled,\n\t\t\n\tCOALESCE(deposited_from_amount, 0) AS transferred_from_amount,\n\tCOALESCE(withdrawn_to_amount, 0) AS transferred_to_amount,\n\taccount_number,\n\tlast_four_digits,\t\t\n\trouting_number,\n  \n\tCASE \n\t\tWHEN is_micro_deposit_send THEN 'Micro-Deposit'\n\t\tWHEN depository_id IS NOT NULL THEN NULL\n\t\tELSE 'Plaid' \n\tEND AS verification_type,\n\t\n\tupa.date_created AS payment_account_linked_date,\n\n\t-- plaid identity\n\tbapii.name_score    as plaid_identity_name_score,\n\tbapii.email_score   as plaid_identity_email_score,\n\tbapii.phone_score   as plaid_identity_phone_score,\n\tbapii.address_score as plaid_identity_address_score,\n\tbapii.total_score   as plaid_identity_total_score,\n\n\tbapii.is_name_matched    as plaid_identity_is_name_match,\n\tbapii.is_email_matched   as plaid_identity_is_email_match,\n\tbapii.is_phone_matched   as plaid_identity_is_phone_match,\n\tbapii.is_address_matched as plaid_identity_is_address_match,\n\n\tbapii.is_ops_approved     as plaid_identity_is_ops_approved,\n\tbapii.ops_approved_reason as plaid_identity_ops_approved_reason,\n\tbapii.ops_agent           as plaid_identity_ops_agent,\n\n\tbapii.plaid_data_date_retrieved as plaid_identity_date_retrieved,\n\n\tbapii.is_fraud as plaid_identity_is_fraud,\n\t\t\n        tpb.plaid_balance_match_type,\n        tpb.plaid_current_balance,\n        tpb.plaid_available_balance,\n        tpb.plaid_account_limit,\n        bapii.original_plaid_data\n\nFROM web_db.user_payment_account upa\nLEFT JOIN bapii\n\tON upa.id = bapii.user_payment_account_id\nLEFT JOIN tmp_plaid_balance tpb\n       ON bapii.id = tpb.id\n      AND tpb.plaid_choice_rank = 1\t\nLEFT JOIN \n(\n\tSELECT user_payment_account_id,\n\t\tSUM(deposited_from_amount) AS deposited_from_amount,\n\t\tSUM(withdrawn_to_amount) AS withdrawn_to_amount\n\tFROM\n\t(\n\t\tSELECT user_payment_account_id,\n\t\t\tCASE \n\t\t\t\tWHEN amount > 0 THEN amount\n\t\t\t\tELSE 0 \n\t\t\tEND AS deposited_from_amount,\n\n\t\t\tCASE \n\t\t\t\tWHEN amount < 0 THEN amount\n\t\t\t\tELSE 0 \n\t\t\tEND AS withdrawn_to_amount\n\n\tFROM bi.dt_transfers\n\tWHERE transaction_status = 'Processed'\n\t) a\n\tGROUP BY 1\n) pay ON (upa.id = pay.user_payment_account_id)\n)\n\nunion all\n\nselect\n    spm.USER_ID,\n    null,\n    spm.PAYMENT_METHOD_ID as STRIPE_PAYMENT_METHOD_ID,\n    'Stripe Payment',\n    replace(parse_json(RAW_PAYMENT_METHOD):card:brand, '\"', '') as card_brand,\n    case\n        when sl.PAYMENT_METHOD_ID is not null then true\n        else 0\n    end as is_verified,  -- is_verified, stripe account is verified when customer can initialized a funding transaction\n    false, -- is_checking_account\n    spm.IS_DELETED,\n    false,\n    COALESCE(deposited_from_amount, 0), -- transferred_from_amount\n    COALESCE(withdrawn_to_amount, 0), -- transferred_to_amount\n    null,\n    replace(parse_json(RAW_PAYMENT_METHOD):card:last4, '\"', '') as last_four_digits, -- last_four_digits\n    null,\n    'Stripe',\n    spm.CREATED_AT,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null\nfrom BANK_DB.STRIPE_PAYMENT_METHOD spm\nleft join (\n    select\n        PAYMENT_METHOD_ID,\n        sum(\n            case\n                when STATUS='galileo_paid' then AMOUNT / 100.0\n                else 0\n            end\n        ) as deposited_from_amount,\n        0 as withdrawn_to_amount\n    from BANK_DB.STRIPE_LEDGER\n    where 1=1\n      and STRIPE_ACCOUNT_ID='aspiration-cma'\n    group by 1\n) sl on spm.PAYMENT_METHOD_ID=sl.PAYMENT_METHOD_ID\nwhere 1=1\n  and spm.STRIPE_ACCOUNT_ID='aspiration-cma'\n\n;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958385":{"id":2958385,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-1584,"y":-416,"width":32,"height":32,"inputConnectorIDs":[2958425],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958428],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of permissions 23"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"grant select on all tables in schema ush to data_engineering_group;\n--drop table if exists ush.dt_utm_history_staging;\n--grant select on all tables in schema ush to data_science_analytics;\n--grant select on etl.dt_users_ush to data_science_analytics;\n/*\n--authorized transactions\nDROP VIEW IF EXISTS rdl.vw_authorized_transactions;\ncreate view rdl.vw_authorized_transactions as\n\nselect t.auth_tran_key,\n       t.file_name,\n       t.file_date,\n       t.unique_program_id,\n       t.galileo_account_id,\n       t.card_identifier,\n       t.transaction_date,\n       t.transaction_currency_code,\n       c1.currency_country,\n       c1.currency,\n       t.address_verification_response,\n       t.authorization_response,\n       r.auth_description as authorization_response_description,\n       t.transaction_amount,\n       t.authorization_code,\n       t.network_code,\n       nc.network_name,\n       t.merchant_number,\n       t.merchant_description,\n       t.merchant_category_code,\n       mcc.description    as merchant_category_code_description,\n       t.transaction_code,\n       gl.description     as transaction_code_description,\n       t.merchant_country_code,\n       c2.country         as merchant_country,\n       t.prn,\n       p.posted_transaction_id,\n       t.etl_load_date\nfrom rdl.authorized_transactions t\n         left join rdl.authorization_response r on t.authorization_response = r.auth_code\n         left join rdl.currency c1 on t.transaction_currency_code = c1.numeric_currency_code\n         left join rdl.country c2 on t.merchant_country_code = c2.numeric_code::varchar(100)\n         left join etl.merchant_category_codes mcc on t.merchant_category_code = mcc.merchant_category_code\n         left join rdl.galileo_network_code nc on t.network_code = nc.network_code\n         left join web_db.galileo_lookup gl on t.transaction_code = gl.code\n                                           and gl.field_name = 'TRANSACTION CODE'\n         left join rdl.AUTHORIZED_TRANSACTIONS_POSTED p on t.AUTH_TRAN_KEY = p.AUTH_TRAN_KEY;\n         */"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958386":{"id":2958386,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-1607,"y":-345,"width":32,"height":32,"inputConnectorIDs":[2958428],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of dev warehouse to xsmall"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DEV"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WAREHOUSE_SIZE"},"2":{"slot":2,"type":"STRING","value":"XSMALL"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958387":{"id":2958387,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-1408,"y":-560,"width":32,"height":32,"inputConnectorIDs":[2958406],"outputSuccessConnectorIDs":[2958437],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of dev WH to med"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DEV"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WAREHOUSE_SIZE"},"2":{"slot":2,"type":"STRING","value":"LARGE"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958388":{"id":2958388,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-1472,"y":-336,"width":32,"height":32,"inputConnectorIDs":[2958355],"outputSuccessConnectorIDs":[2958436],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958429],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"utm history"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse dev;\n\n\ndrop table if exists ush.dt_utm_history_staging;\ncreate table ush.dt_utm_history_staging as\nselect\n    'web_db'::varchar(50) as schema_source,\n    'wait_list_user'::varchar(50) as table_source,\n    e.PRIMARY_EMAIL as email,\n    e.USER_ID,\n    wl.PRODUCT_ID,\n    upper(p.CODE::varchar(50)) as product_code,\n    wl.ACCOUNT_TYPE_ID,\n    wl.date_created as touch_date,\n    lower(wl.utm_content)::varchar(1000) as utm_content,\n    lower(wl.utm_campaign)::varchar(1000) as utm_campaign,\n    lower(wl.utm_medium)::varchar(1000) as utm_medium,\n    lower(wl.utm_source)::varchar(1000) as utm_source,\n    lower(wl.utm_term)::varchar(1000) as utm_term,\n    false as is_segment,\n    lower(wl.INITIAL_URL)::varchar(5000) as initial_url,\n    lower(wl.REFERRAL_URL)::varchar(8000) as referral_url\n--     lower(nullif(trim(split_part(CASE WHEN right(wl.referral_domain,1) = '.'\n--                                       THEN left(wl.referral_domain,length(wl.referral_domain) - 1)\n--                                       ELSE wl.referral_domain\n--                                  END,':',1)),''))::varchar(1000) as referral_domain_clean\nfrom web_db.wait_list_user wl\nleft join WEB_DB.PRODUCT p on wl.PRODUCT_ID = p.id\njoin ush.utm_history_user_email e on replace(lower(trim(wl.email)),'​','') = e.EMAIL;\n\ninsert into ush.dt_utm_history_staging\nselect\n    'web_db' as schema_source,\n    'product_waitlist' as table_source,\n    e.PRIMARY_EMAIL as email,\n    e.USER_ID,\n    pwl.PRODUCT_ID,\n    upper(p.code) as product_code,\n    pwl.ACCOUNT_TYPE_ID,\n    pwl.date_created as touch_date,\n    lower(pwl.utm_content),\n    lower(pwl.utm_campaign),\n    lower(pwl.utm_medium),\n    lower(pwl.utm_source),\n    lower(pwl.utm_term),\n    false as is_segment,\n    lower(pwl.INITIAL_URL),\n    lower(pwl.REFERRAL_URL)\n--     lower(nullif(trim(split_part(CASE WHEN right(pwl.referral_domain,1) = '.'\n--                                       THEN left(pwl.referral_domain,length(pwl.referral_domain) - 1)\n--                                       ELSE pwl.referral_domain\n--                                  END,':',1)),''))\nfrom web_db.PRODUCT_WAITLIST pwl\nleft join WEB_DB.PRODUCT p on pwl.PRODUCT_ID = p.id\njoin ush.utm_history_user_email e on replace(lower(trim(pwl.email)),'​','') = e.EMAIL;\n\n--EMAIL_LEAD_SUBMITTED by email match\ninsert into ush.dt_utm_history_staging\nselect distinct\n    'prod_segment_js' as schema_source,\n    'email_lead_submitted' as table_source,\n    e.PRIMARY_EMAIL as email,\n    e.USER_ID,\n    p.id as product_id,\n    upper(s.product_code) as product_code,\n    null as ACCOUNT_TYPE_ID,\n    s.RECEIVED_AT as touch_date,\n    lower(s.utm_content),\n    lower(s.utm_campaign),\n    lower(s.utm_medium),\n    lower(s.utm_source),\n    lower(s.utm_term),\n    true as is_segment,\n    max(lower(s.URL)),\n    max(lower(s.CONTEXT_PAGE_REFERRER))\nfrom SEGMENT_EVENTS.PROD_SEGMENT_JS.EMAIL_LEAD_SUBMITTED s\njoin ush.utm_history_user_email e on replace(lower(trim(s.email)),'​','') = e.EMAIL\nleft join WEB_DB.PRODUCT p on upper(s.product_code) = p.CODE\nwhere s.EMAIL is not null\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13;\n\n--EMAIL_LEAD_SUBMITTED with no email - user_id match\ninsert into ush.dt_utm_history_staging\nselect distinct\n    'prod_segment_js' as schema_source,\n    'email_lead_submitted' as table_source,\n    u.PRIMARY_EMAIL as email,\n    u.USER_ID,\n    p.ID as product_id,\n    upper(s.product_code) as product_code,\n    null as ACCOUNT_TYPE_ID,\n    s.RECEIVED_AT as touch_date,\n    lower(s.utm_content),\n    lower(s.utm_campaign),\n    lower(s.utm_medium),\n    lower(s.utm_source),\n    lower(s.utm_term),\n    true as is_segment,\n    max(lower(s.URL)),\n    max(lower(s.CONTEXT_PAGE_REFERRER))\nfrom SEGMENT_EVENTS.PROD_SEGMENT_JS.EMAIL_LEAD_SUBMITTED s\njoin ush.utm_history_user_email u on replace(s.USER_ID,'-','') = u.UUID\nleft join WEB_DB.PRODUCT p on upper(s.product_code) = p.CODE\nwhere s.EMAIL is null\nand s.USER_ID is not null\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13;\n\n\n--USER_CREDENTIALS_SUBMITTED user_id match\n--(most segment records have user_id at this point, so it's 1st choice)\ninsert into ush.dt_utm_history_staging\nselect distinct\n    'prod_segment_js' as schema_source,\n    'user_credentials_submitted' as table_source,\n    u.PRIMARY_EMAIL as email,\n    u.USER_ID,\n    null as product_id,\n    null as product_code,\n    null as ACCOUNT_TYPE_ID,\n    s.RECEIVED_AT as touch_date,\n    lower(s.utm_content),\n    lower(s.utm_campaign),\n    lower(s.utm_medium),\n    lower(s.utm_source),\n    lower(s.utm_term),\n    true as is_segment,\n    max(lower(s.URL)),\n    max(lower(s.CONTEXT_PAGE_REFERRER))\nfrom SEGMENT_EVENTS.PROD_SEGMENT_JS.USER_CREDENTIALS_SUBMITTED s\njoin ush.utm_history_user_email u on replace(s.USER_ID,'-','') = u.UUID\nwhere s.USER_ID is not null\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13;\n\n--USER_CREDENTIALS_SUBMITTED email match\n--(2nd choice when user_id is missing)\ninsert into ush.dt_utm_history_staging\nselect distinct\n    'prod_segment_js' as schema_source,\n    'user_credentials_submitted' as table_source,\n    e.PRIMARY_EMAIL as email,\n    e.USER_ID,\n    null as product_id,\n    null as product_code,\n    null as ACCOUNT_TYPE_ID,\n    s.RECEIVED_AT as touch_date,\n    lower(s.utm_content),\n    lower(s.utm_campaign),\n    lower(s.utm_medium),\n    lower(s.utm_source),\n    lower(s.utm_term),\n    true as is_segment,\n    max(lower(s.URL)),\n    max(lower(s.CONTEXT_PAGE_REFERRER))\nfrom SEGMENT_EVENTS.PROD_SEGMENT_JS.USER_CREDENTIALS_SUBMITTED s\njoin ush.utm_history_user_email e on replace(lower(trim(s.email)),'​','') = e.EMAIL\nwhere s.EMAIL is not null\nand s.USER_ID is null\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13;\n\n--BANK_ACCOUNT_LINKED user_id match\ninsert into ush.dt_utm_history_staging\nselect distinct\n    'prod_segment_js' as schema_source,\n    'bank_account_linked' as table_source,\n    u.PRIMARY_EMAIL as email,\n    u.USER_ID,\n    p.ID as product_id,\n    upper(s.product_code) as product_code,\n    null as ACCOUNT_TYPE_ID,\n    s.RECEIVED_AT as touch_date,\n    lower(s.utm_content),\n    lower(s.utm_campaign),\n    lower(s.utm_medium),\n    lower(s.utm_source),\n    lower(s.utm_term),\n    true as is_segment,\n    max(lower(s.URL)),\n    max(lower(s.CONTEXT_PAGE_REFERRER))\nfrom SEGMENT_EVENTS.PROD_SEGMENT_JS.BANK_ACCOUNT_LINKED s\njoin ush.utm_history_user_email u on replace(s.USER_ID,'-','') = u.UUID\nleft join WEB_DB.PRODUCT p on upper(s.product_code) = p.CODE\nwhere s.USER_ID is not null\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13;\n\n--BANK_ACCOUNT_LINKED user_id is null, so match by application_id\ninsert into ush.dt_utm_history_staging\nselect distinct\n    'prod_segment_js' as schema_source,\n    'bank_account_linked' as table_source,\n    u.PRIMARY_EMAIL as email,\n    u.USER_ID,\n    p.ID as product_id,\n    upper(s.product_code) as product_code,\n    null as ACCOUNT_TYPE_ID,\n    s.RECEIVED_AT as touch_date,\n    lower(s.utm_content),\n    lower(s.utm_campaign),\n    lower(s.utm_medium),\n    lower(s.utm_source),\n    lower(s.utm_term),\n    true as is_segment,\n    max(lower(s.URL)),\n    max(lower(s.CONTEXT_PAGE_REFERRER))\nfrom SEGMENT_EVENTS.PROD_SEGMENT_JS.BANK_ACCOUNT_LINKED s\njoin WEB_DB.USER_PRODUCT_APPLICATION b on s.APPLICATION_ID = b.id\njoin ush.utm_history_user_email u on b.USER_ID = u.USER_ID\nleft join WEB_DB.PRODUCT p on upper(s.product_code) = p.CODE\nwhere s.USER_ID is null\nand s.APPLICATION_ID is not null\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13;\n\n--STRIPE_FORM_SUBMISSION user_id match\ninsert into ush.dt_utm_history_staging\nselect distinct\n    'prod_segment_js' as schema_source,\n    'stripe_form_submission' as table_source,\n    u.PRIMARY_EMAIL as email,\n    u.USER_ID,\n    null as product_id,\n    null as product_code,\n    null as ACCOUNT_TYPE_ID,\n    s.RECEIVED_AT as touch_date,\n    lower(s.utm_content),\n    null as utm_campaign,\n    null as utm_medium,\n    lower(s.utm_source),\n    null as utm_term,\n    true as is_segment,\n    max(lower(s.URL)),\n    max(lower(s.CONTEXT_PAGE_REFERRER))\nfrom SEGMENT_EVENTS.PROD_SEGMENT_JS.STRIPE_FORM_SUBMISSION s\njoin ush.utm_history_user_email u on replace(s.USER_ID,'-','') = u.UUID\nwhere s.USER_ID is not null\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13;\n\n--PRODUCT_APPLICATION_SUBMITTED user_id match\ninsert into ush.dt_utm_history_staging\nselect distinct\n    'prod_segment_js' as schema_source,\n    'product_application_submitted' as table_source,\n    u.PRIMARY_EMAIL as email,\n    u.USER_ID,\n    p.ID as product_id,\n    upper(s.product_code) as product_code,\n    null as ACCOUNT_TYPE_ID,\n    s.RECEIVED_AT as touch_date,\n    lower(s.utm_content),\n    lower(s.utm_campaign),\n    lower(s.utm_medium),\n    lower(s.utm_source),\n    lower(s.utm_term),\n    true as is_segment,\n    max(lower(s.URL)),\n    max(lower(s.CONTEXT_PAGE_REFERRER))\nfrom SEGMENT_EVENTS.PROD_SEGMENT_JS.PRODUCT_APPLICATION_SUBMITTED s\njoin ush.utm_history_user_email u on replace(s.USER_ID,'-','') = u.UUID\nleft join WEB_DB.PRODUCT p on upper(s.product_code) = p.CODE\nwhere s.USER_ID is not null\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13;\n\n--PRODUCT_APPLICATION_SUBMITTED user_id is null, so match by application_id\ninsert into ush.dt_utm_history_staging\nselect distinct\n    'prod_segment_js' as schema_source,\n    'product_application_submitted' as table_source,\n    u.PRIMARY_EMAIL as email,\n    u.USER_ID,\n    p.ID as product_id,\n    upper(s.product_code) as product_code,\n    null as ACCOUNT_TYPE_ID,\n    s.RECEIVED_AT as touch_date,\n    lower(s.utm_content),\n    lower(s.utm_campaign),\n    lower(s.utm_medium),\n    lower(s.utm_source),\n    lower(s.utm_term),\n    true as is_segment,\n    max(lower(s.URL)),\n    max(lower(s.CONTEXT_PAGE_REFERRER))\nfrom SEGMENT_EVENTS.PROD_SEGMENT_JS.PRODUCT_APPLICATION_SUBMITTED s\njoin WEB_DB.USER_PRODUCT_APPLICATION b on s.APPLICATION_ID = b.id\njoin ush.utm_history_user_email u on b.USER_ID = u.USER_ID\nleft join WEB_DB.PRODUCT p on upper(s.product_code) = p.CODE\nwhere s.USER_ID is null\nand s.APPLICATION_ID is not null\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13;\n\ndrop table if exists ush.dt_utm_history;\ncreate table ush.dt_utm_history as\nwith credit as (\n    select b.USER_ID, min(a.DATE_ACCOUNT_CREATED) as credit_inception_date\n    from CREDIT_ACCOUNT_MANAGEMENT.CREDIT_ACCOUNT a\n    join CREDIT_ACCOUNT_MANAGEMENT.CREDIT_USERS b on a.ACCOUNT_ID = b.ACCOUNT_ID\n    group by 1\n)\n, inv_app as (\n    select USER_ID, min(DATE_CREATED) as investment_app_record_create_date\n    from WEB_DB.USER_PRODUCT_APPLICATION\n    where PRODUCT_ID in (1,2)\n    group by 1\n)\n, cred_app as (\n    select USER_ID, min(DATE_CREATED) as credit_app_record_create_date\n    from WEB_DB.USER_PRODUCT_APPLICATION\n    where PRODUCT_ID = 8\n    group by 1\n)\n, account as (\n    select USER_ID,\n           min(INCEPTION_DATE_TIME) as INCEPTION_DATE_TIME,\n           min(INCEPTION_DATE) as INCEPTION_DATE\n    from bi.DT_ACCOUNTS\n    where ACCOUNT_TYPE = 'Checking'\n    group by 1\n)\n, link as (\n    select USER_ID, min(PAYMENT_ACCOUNT_LINKED_DATE) as LINK_DATE\n    from bi.DT_BANKS\n    where IS_CHECKING_ACCOUNT = false\n    and IS_VERIFIED = true\n    group by 1\n)\n, stripe as (\n    select USER_ID, min(PAYMENT_ACCOUNT_LINKED_DATE) as STRIPE_DATE\n    from bi.DT_BANKS\n    where IS_VERIFIED = true\n    and STRIPE_PAYMENT_METHOD_ID is not null\n    group by 1\n)\n, result_0 as (\n   select a.*,\n           c.DATE_CREATED as entered_credentials_date,\n           l.LINK_DATE as bank_account_linked_date,\n           s.STRIPE_DATE as stripe_linked_date,\n           coalesce(b.INCEPTION_DATE_TIME, b.INCEPTION_DATE) as CMA_INCEPTION_DATE,\n           d.credit_inception_date,\n           e.investment_app_record_create_date,\n           f.credit_app_record_create_date,\n           --adding time to the dates segment data is compared against because sometimes\n           --there is a lag between backend and segment. If CMA inception date is just a\n           --date with no time, add a day + 2 minutes to it, otherwise just 2 minutes.\n           case when a.TOUCH_DATE < iff(b.INCEPTION_DATE = b.INCEPTION_DATE_TIME,\n                                            dateadd(minute,1442,b.INCEPTION_DATE),\n                                            dateadd(minute,2,b.INCEPTION_DATE_TIME))\n                then TRUE else FALSE end as is_before_CMA_INCEPTION_DATE,\n           case when TABLE_SOURCE in ('wait_list_user','product_waitlist','email_lead_submitted')\n                then true else false end as is_first_touch_data,\n           case when a.UTM_CAMPAIGN ilike '%credit%zero%'\n                    or a.UTM_CAMPAIGN ilike '%credit%waitlist%'\n                    or a.UTM_CAMPAIGN ilike '%credit%card%'\n                    or a.UTM_CAMPAIGN ilike '%aspiration%zero%'\n                then TRUE else FALSE end as is_credit_utm,\n           CASE WHEN a.PRODUCT_CODE ilike '%credit%' or a.PRODUCT_ID = 8 then TRUE else FALSE end as is_credit_lead,\n           case TABLE_SOURCE\n                when 'product_application_submitted' then 1\n                when 'bank_account_linked' then 2\n                when 'stripe_form_submission' then 2\n                when 'user_credentials_submitted' then 3\n                when 'wait_list_user' then 4\n                when 'product_waitlist' then 4\n                when 'email_lead_submitted' then 5\n                else null\n           end as TABLE_SOURCE_last_touch_rank\n    from ush.dt_utm_history_staging a\n    left join account b on a.USER_ID = b.USER_ID\n    left join WEB_DB._USER c on a.USER_ID = c.ID\n    left join credit d on a.USER_ID = d.USER_ID\n    left join inv_app e on a.USER_ID = e.USER_ID\n    left join cred_app f on a.USER_ID = f.USER_ID\n    left join link l on a.USER_ID = l.USER_ID\n    left join stripe s on a.USER_ID = s.USER_ID\n)\n, result as (\n    select EMAIL,\n           USER_ID,\n           TOUCH_DATE,\n           SCHEMA_SOURCE,\n           TABLE_SOURCE,\n           IS_SEGMENT,\n           entered_credentials_date,\n           bank_account_linked_date,\n           stripe_linked_date,\n           CMA_INCEPTION_DATE,\n           credit_inception_date,\n           investment_app_record_create_date,\n           credit_app_record_create_date,\n           PRODUCT_CODE,\n           PRODUCT_ID,\n           ACCOUNT_TYPE_ID,\n           UTM_CAMPAIGN,\n           UTM_SOURCE,\n           UTM_MEDIUM,\n           UTM_CONTENT,\n           UTM_TERM,\n           is_credit_utm,\n           case when is_first_touch_data = true\n                then row_number() over (partition by a.EMAIL, a.is_first_touch_data\n                                        order by a.IS_SEGMENT, a.TOUCH_DATE nulls last)\n                else null end as rn_order_first_touch,\n           a.TABLE_SOURCE_last_touch_rank,\n           case when is_before_CMA_INCEPTION_DATE = TRUE\n                then row_number() over (partition by a.EMAIL, a.is_before_CMA_INCEPTION_DATE\n                                        order by a.TABLE_SOURCE_last_touch_rank nulls last, a.TOUCH_DATE desc nulls last)\n                else null end as rn_order_last_touch_cma_inception,\n           a.initial_url,\n           a.referral_url\n    from result_0 a\n)\nselect\n    EMAIL,\n    USER_ID,\n    TOUCH_DATE,\n    SCHEMA_SOURCE,\n    TABLE_SOURCE,\n    IS_SEGMENT,\n    entered_credentials_date,\n    bank_account_linked_date,\n    stripe_linked_date,\n    CMA_INCEPTION_DATE,\n    credit_inception_date,\n    investment_app_record_create_date,\n    credit_app_record_create_date,\n    PRODUCT_CODE,\n    PRODUCT_ID,\n    UTM_CAMPAIGN,\n    UTM_SOURCE,\n    UTM_MEDIUM,\n    UTM_CONTENT,\n    UTM_TERM,\n    is_credit_utm,\n    case when rn_order_first_touch = 1 then TRUE else FALSE end as is_first_touch,\n    case when rn_order_last_touch_cma_inception = 1 then TRUE else FALSE end as is_last_touch_cma,\n    INITIAL_URL,\n    REFERRAL_URL\nfrom result;\n\ngrant select on ush.dt_utm_history to data_science_analytics;\ngrant select on ush.dt_utm_history to read_only_internal_users;\ngrant select on ush.dt_utm_history to data_engineering_group;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958389":{"id":2958389,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":620619864,"x":-212,"y":-250,"width":32,"height":32,"inputConnectorIDs":[2958359],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Data Transfer 0"}}}},"visible":true},"2":{"slot":2,"name":"Source Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"S3"}}}},"visible":true},"4":{"slot":4,"name":"Target Object Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":true},"5":{"slot":5,"name":"Target Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":true},"6":{"slot":6,"name":"Set Home Directory as Root","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"No"}}}},"visible":false},"7":{"slot":7,"name":"Source URL","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"ftp://[username[:password]@]hostname[:port][path]"}}}},"visible":false},"8":{"slot":8,"name":"Source Username","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"9":{"slot":9,"name":"Source Password","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"PASSWORD","value":""}}}},"visible":false},"10":{"slot":10,"name":"Source URL","elements":{},"visible":false},"11":{"slot":11,"name":"Source URL","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"hdfs://host:port/filePath"}}}},"visible":false},"12":{"slot":12,"name":"Perform Certificate Validation","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"No"}}}},"visible":false},"13":{"slot":13,"name":"Source URL","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"https://[username[:password]@]hostname[:port][absolute-path]"}}}},"visible":false},"14":{"slot":14,"name":"Source Username","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"15":{"slot":15,"name":"Source Password","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"PASSWORD","value":""}}}},"visible":false},"16":{"slot":16,"name":"Source URL","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"http://[username[:password]@]hostname[:port][absolute-path]"}}}},"visible":false},"17":{"slot":17,"name":"Source Username","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"18":{"slot":18,"name":"Source Password","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"PASSWORD","value":""}}}},"visible":false},"19":{"slot":19,"name":"Source URL","elements":{},"visible":false},"20":{"slot":20,"name":"Set Home Directory as Root","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"No"}}}},"visible":false},"21":{"slot":21,"name":"Source URL","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"sftp://[username[:password]@]hostname[:port][path]"}}}},"visible":false},"22":{"slot":22,"name":"Source Username","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"23":{"slot":23,"name":"Source Password","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"PASSWORD","value":""}}}},"visible":false},"24":{"slot":24,"name":"Source SFTP Key","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"25":{"slot":25,"name":"Source URL","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"smb://[[[authdomain;]user@]host[:port][/share[/dirpath][/name]]][?context]"}}}},"visible":false},"26":{"slot":26,"name":"Source Domain","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"27":{"slot":27,"name":"Source Username","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"28":{"slot":28,"name":"Source Password","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"PASSWORD","value":""}}}},"visible":false},"29":{"slot":29,"name":"Target URL","elements":{},"visible":false},"30":{"slot":30,"name":"Target URL","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"hdfs://host:port/filePath"}}}},"visible":false},"31":{"slot":31,"name":"Target URL","elements":{},"visible":false},"33":{"slot":33,"name":"Set Home Directory as Root","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"No"}}}},"visible":false},"34":{"slot":34,"name":"Target URL","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"sftp://[username[:password]@]hostname[:port][path]"}}}},"visible":false},"35":{"slot":35,"name":"Target Username","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"36":{"slot":36,"name":"Target Password","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"PASSWORD","value":""}}}},"visible":false},"37":{"slot":37,"name":"Target SFTP Key","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"38":{"slot":38,"name":"Target URL","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"smb://[[[authdomain;]user@]host[:port][/share[/dirpath][/name]]][?context]"}}}},"visible":false},"39":{"slot":39,"name":"Target Domain","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"40":{"slot":40,"name":"Target Username","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"41":{"slot":41,"name":"Target Password","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"PASSWORD","value":""}}}},"visible":false},"42":{"slot":42,"name":"Unpack ZIP file","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"No"}}}},"visible":true},"43":{"slot":43,"name":"Gzip data","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"No"}}}},"visible":true},"44":{"slot":44,"name":"Access Control List Options","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"50":{"slot":50,"name":"URL","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"https://<account>.sharepoint.com"}}}},"visible":false},"51":{"slot":51,"name":"User","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"52":{"slot":52,"name":"Password","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"PASSWORD","value":""}}}},"visible":false},"53":{"slot":53,"name":"SharePoint Edition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SharePoint Online"}}}},"visible":false},"54":{"slot":54,"name":"File Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Document"}}}},"visible":false},"55":{"slot":55,"name":"Library","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"56":{"slot":56,"name":"File URL","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"57":{"slot":57,"name":"Connection Options","elements":{},"visible":false},"90":{"slot":90,"name":"Authentication","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"91":{"slot":91,"name":"File ID","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"93":{"slot":93,"name":"File ID","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"94":{"slot":94,"name":"Path","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"95":{"slot":95,"name":"Download Format","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"HTML"}}}},"visible":false},"96":{"slot":96,"name":"Download As Zip","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"No"}}}},"visible":false},"97":{"slot":97,"name":"Authentication","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"98":{"slot":98,"name":"File Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"File"}}}},"visible":false},"158":{"slot":158,"name":"Service Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SOAP"}}}},"visible":false},"159":{"slot":159,"name":"Authentication","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"16040":{"slot":16040,"name":"Blob Location","elements":{},"visible":false},"16140":{"slot":16140,"name":"Blob Location","elements":{},"visible":false},"40000":{"slot":40000,"name":"Encryption","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"None"}}}},"visible":false},"40001":{"slot":40001,"name":"KMS Key ID","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958390":{"id":2958390,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-1600,"y":-512,"width":32,"height":32,"inputConnectorIDs":[2958402],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958425],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of dt table"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse dev;\n\n\n--table for column cma_initiated_funding_date\n-- drop table if exists etl.cma_initiated_funding_date;\n-- create table etl.cma_initiated_funding_date as\n-- with accounts as (\n--     select distinct USER_ID, JOINT_ACCOUNT_SECONDARY_USER_ID\n--     from bi.DT_ACCOUNTS\n--     where ACCOUNT_TYPE = 'Checking'\n--     and INCEPTION_DATE is not null\n-- )\n-- , application as (\n--     select USER_ID, FUNDING_AMOUNT, USER_BANK_ACCOUNT_ID, STRIPE_FUNDING_AMOUNT,\n--            row_number() over (partition by USER_ID order by DATE_CREATED nulls last) as rn\n--     from WEB_DB.USER_PRODUCT_APPLICATION\n--     where PRODUCT_ID in (3,4,5)\n--     and (STATUS = 4 or USER_ID in (select a.USER_ID from accounts a))\n-- )\n-- , stripe_with_application as (\n--     --there are users with more than one verified stripe account\n--     --we need the earliest one that matches their stripe funding amount\n--     select a.USER_ID,\n--            a.PAYMENT_ACCOUNT_LINKED_DATE,\n--            c.AMOUNT/100 as stripe_amount_charged,\n--            row_number() over (partition by a.USER_ID order by a.PAYMENT_ACCOUNT_LINKED_DATE nulls last) as rn\n--     from bi.DT_BANKS a\n--     join application b on a.USER_ID = b.USER_ID\n--     join BANK_DB.STRIPE_LEDGER c on a.STRIPE_PAYMENT_METHOD_ID = c.PAYMENT_METHOD_ID\n--     where a.VERIFICATION_TYPE = 'Stripe'\n--     and a.IS_VERIFIED = true\n--     and b.STRIPE_FUNDING_AMOUNT > 0\n--     and b.STRIPE_FUNDING_AMOUNT = stripe_amount_charged\n--     and b.rn = 1\n-- )\n-- , ach_with_application as (\n--     select a.USER_ID,\n--            a.PAYMENT_ACCOUNT_LINKED_DATE\n--     from bi.DT_BANKS a\n--     join application b on a.USER_ID = b.USER_ID\n--                        and a.USER_PAYMENT_ACCOUNT_ID = b.USER_BANK_ACCOUNT_ID\n--     where a.IS_VERIFIED = true\n--     and b.FUNDING_AMOUNT > 0\n--     and b.rn = 1\n-- )\n-- , no_application_funding as (\n--     --DSA business rule where for using ACH and Stripe data for cma_initiated_funding_date:\n--     ----look for first deposit transfer (regardless of status)\n--     ----look for earliest stripe funding in dt depository transactions where description = ‘Aspiration account debit card funding’\n--     ----compare a vs b and pick earliest (transfer date vs transaction date)\n--     ----find the associated bank account and use bank account link date\n--     select USER_ID,\n--            PAYMENT_ACCOUNT_LINKED_DATE,\n--            transaction_type,\n--            row_number() over (partition by USER_ID\n--                               order by evaluation_date nulls last, PAYMENT_ACCOUNT_LINKED_DATE nulls last) as rn\n--     from (\n--              --ach transfer - no funding indicated on application\n--              select b.USER_ID,\n--                     'ach' as transaction_type,\n--                     convert_timezone('America/Los_Angeles', 'UTC', b.TRANSACTION_DATE::timestamp) as evaluation_date,\n--                     c.PAYMENT_ACCOUNT_LINKED_DATE\n--              from application a\n--              --join rdl.ACH_GALILEO_DETAIL b on a.USER_ID = b.USER_ID\n--              join bi.DT_TRANSFERS b on a.USER_ID = b.USER_ID\n--              join bi.DT_BANKS c on b.USER_PAYMENT_ACCOUNT_ID = c.USER_PAYMENT_ACCOUNT_ID\n--              --where b.TYPE = 'Deposit'\n--              where b.TRANSFER_TYPE = 'Buy/Deposit'\n--              and b.CATEGORY = 'ACH transfer'\n--              and UNIQUE_ACCOUNT_ID != 'g211666' --DEPOSITORY_ID = 211666; exclude micro-deposits\n--              union\n--              --stripe - no funding indicated on application\n--              select b.USER_ID,\n--                     'stripe' as transaction_type,\n--                     a.TRANSACTION_DATE::timestamp as evaluation_date,\n--                     c.PAYMENT_ACCOUNT_LINKED_DATE::timestamp as PAYMENT_ACCOUNT_LINKED_DATE\n--              from bi.DT_DEPOSITORY_TRANSACTIONS a\n--              join bi.DT_ACCOUNTS b on a.UNIQUE_ACCOUNT_ID = b.UNIQUE_ACCOUNT_ID\n--              join application d on b.USER_ID = d.USER_ID\n--              join WEB_DB.GALILEO_POSTED_TRANSACTION gpt on a.POSTED_TRANSACTION_ID = gpt.POSTED_TRANSACTION_ID\n--              join BANK_DB.STRIPE_LEDGER sl on gpt.EXTERNAL_TRANSACTION_ID = sl.ID\n--              join bi.DT_BANKS c on sl.PAYMENT_METHOD_ID = c.STRIPE_PAYMENT_METHOD_ID\n--              where a.DESCRIPTION = 'Aspiration account debit card funding'\n--          )\n-- )\n-- , users as (\n--     select a.USER_ID,\n--            acct.USER_ID as primary_user_id,\n--            a.FUNDING_AMOUNT,\n--            a.STRIPE_FUNDING_AMOUNT,\n--            ach.PAYMENT_ACCOUNT_LINKED_DATE as ach_link_date,\n--            stripe.PAYMENT_ACCOUNT_LINKED_DATE as stripe_link_date,\n--            no_app.PAYMENT_ACCOUNT_LINKED_DATE as transaction_link_date,\n--            no_app.transaction_type,\n--            nullif(least(ifnull(ach.PAYMENT_ACCOUNT_LINKED_DATE,'3000-01-01'),\n--                         ifnull(stripe.PAYMENT_ACCOUNT_LINKED_DATE,'3000-01-01'),\n--                         ifnull(no_app.PAYMENT_ACCOUNT_LINKED_DATE,'3000-01-01')\n--                         )\n--                  ,'3000-01-01') as cma_initiated_funding_date\n--     from application a\n--     left join accounts acct on a.USER_ID = acct.JOINT_ACCOUNT_SECONDARY_USER_ID\n--     left join ach_with_application ach on a.USER_ID = ach.USER_ID\n--     left join stripe_with_application stripe on a.USER_ID = stripe.USER_ID and stripe.rn = 1\n--     left join no_application_funding no_app on a.USER_ID = no_app.USER_ID and no_app.rn = 1\n--     where a.rn = 1\n-- )\n-- select u.user_id,\n--        IFF(u.primary_user_id is null,u.FUNDING_AMOUNT,primary.FUNDING_AMOUNT) as FUNDING_AMOUNT,\n--        IFF(u.primary_user_id is null,u.STRIPE_FUNDING_AMOUNT,primary.STRIPE_FUNDING_AMOUNT) as STRIPE_FUNDING_AMOUNT,\n--        IFF(u.primary_user_id is null,u.ach_link_date,primary.ach_link_date) as ach_link_date,\n--        IFF(u.primary_user_id is null,u.stripe_link_date,primary.stripe_link_date) as stripe_link_date,\n--        IFF(u.primary_user_id is null,u.transaction_link_date,primary.transaction_link_date) as transaction_link_date,\n--        IFF(u.primary_user_id is null,u.transaction_type,primary.transaction_type) as transaction_type,\n--        IFF(u.primary_user_id is null,u.cma_initiated_funding_date,primary.cma_initiated_funding_date) as cma_initiated_funding_date\n-- from users u\n-- left join users primary on u.primary_user_id = primary.user_id;\n\n\n-- --3 temp tables below are used to extract segment url data\n-- drop table if exists tmp_segment_lead;\n-- create temp table tmp_segment_lead as\n-- with seg as (\n--     select\n--            --nullif(trim(user_id), '') as user_id,\n--            email,\n--            nullif(trim(context_campaign_source),'') as context_campaign_source,\n--            nullif(trim(context_campaign_medium),'') as context_campaign_medium,\n--            nullif(trim(context_campaign_term),'') as context_campaign_term,\n--            nullif(trim(context_campaign_content),'') as context_campaign_content,\n--            nullif(trim(context_campaign_name),'') as context_campaign_name,\n--            case when context_page_search like '%click_id%'\n--                 then context_page_search\n--                 else null end as context_page_search,\n--            case when context_page_referrer like '%click_id%'\n--                 then context_page_referrer\n--                 else null end as context_page_referrer,\n--            received_at,\n--            row_number() over (partition by email order by received_at nulls last) as rn\n--     from segment_events.prod_segment_js.email_lead_submitted\n--     where (context_page_search like '%click_id%'\n--              or context_page_referrer like '%click_id%')\n--       and nullif(trim(email), '') is not null\n-- )\n-- select *,\n--        nvl(context_page_referrer, context_page_search) as url\n-- from seg\n-- where rn = 1;\n--\n-- drop table if exists tmp_segment_pages;\n-- create temp table tmp_segment_pages as\n-- with email as (\n--     select\n--         user_id,\n--         email,\n--         row_number() over (partition by user_id order by date_created desc nulls last) as rn\n--     from web_db.user_email\n--     where is_primary = true\n-- ),\n-- seg as (\n--     select\n--            u.id as user_id,\n--            e.email,\n--            nullif(trim(p.context_campaign_source),'') as context_campaign_source,\n--            nullif(trim(p.context_campaign_medium),'') as context_campaign_medium,\n--            nullif(trim(p.context_campaign_term),'') as context_campaign_term,\n--            nullif(trim(p.context_campaign_content),'') as context_campaign_content,\n--            nullif(trim(p.context_campaign_name),'') as context_campaign_name,\n--            case when p.context_page_search like '%click_id%'\n--                 then p.context_page_search\n--                 else null end as context_page_search,\n--            case when p.context_page_referrer like '%click_id%'\n--                 then p.context_page_referrer\n--                 else null end as context_page_referrer,\n--            p.received_at,\n--            row_number() over (partition by p.user_id order by p.received_at nulls last) as rn\n--     from segment_events.prod_segment_js.pages p\n--     join web_db._user u on p.user_id = u.uuid\n--     join email e on u.id = e.user_id and e.rn = 1\n--     where (p.context_page_search like '%click_id%'\n--              or p.context_page_referrer like '%click_id%')\n-- )\n-- select *,\n--        nvl(context_page_referrer, context_page_search) as url\n-- from seg\n-- where rn = 1;\n--\n-- drop table if exists etl.segment_url;\n-- create table etl.segment_url as\n-- with combined as (\n--     select email, received_at, url, context_campaign_source, context_campaign_name,\n--            context_campaign_medium, context_campaign_term, context_campaign_content\n--     from tmp_segment_lead\n--     union\n--     select email, received_at, url, context_campaign_source, context_campaign_name,\n--            context_campaign_medium, context_campaign_term, context_campaign_content\n--     from tmp_segment_pages\n--     ),\n-- combined_rn as (\n--     select *,\n--            row_number() over (partition by email order by received_at asc nulls last) as rn\n--     from combined\n-- )\n-- select *\n-- from combined_rn\n-- where rn = 1;\n--\n-- --table for all the users, to remove duplicates\n-- drop table if exists etl.user_list;\n-- create table etl.user_list as\n-- with user_email as (\n--     select USER_ID, lower(EMAIL) as email, IS_VALIDATED,\n--            row_number() over (partition by user_id order by is_primary desc,\n--                                                              last_updated desc) as rn\n--     from web_db.user_email\n-- )\n-- , wait_list as (\n--     select\n--         wl.id,\n--         wl.email,\n--         wl.ACCOUNT_TYPE_ID,\n--         wl.PRODUCT_ID,\n--         wl.date_created,\n--         wl.utm_content,\n--         wl.utm_campaign,\n--         wl.utm_medium,\n--         wl.utm_source,\n--         wl.utm_term,\n--         wl.initial_url,\n--         wl.referral_url,\n--         lower(nullif(trim(split_part(CASE WHEN right(wl.referral_domain,1) = '.'\n--                                           THEN left(wl.referral_domain,length(wl.referral_domain) - 1)\n--                                           ELSE wl.referral_domain\n--                                      END,':',1)),'')) AS referral_domain_clean\n--     from web_db.wait_list_user wl\n--     union all\n--     select\n--         pwl.id,\n--         pwl.email,\n--         pwl.ACCOUNT_TYPE_ID,\n--         pwl.PRODUCT_ID,\n--         pwl.date_created,\n--         pwl.utm_content,\n--         pwl.utm_campaign,\n--         pwl.utm_medium,\n--         pwl.utm_source,\n--         pwl.utm_term,\n--         pwl.initial_url,\n--         pwl.referral_url,\n--         lower(nullif(trim(split_part(CASE WHEN right(pwl.referral_domain,1) = '.'\n--                                           THEN left(pwl.referral_domain,length(pwl.referral_domain) - 1)\n--                                           ELSE pwl.referral_domain\n--                                      END,':',1)),'')) AS referral_domain_clean\n--     from web_db.PRODUCT_WAITLIST pwl\n--     )\n--     , wait_list_ranked as (\n--         select  wl.id as wait_list_id,\n--                 lower(wl.email) as email,\n--                 wl.ACCOUNT_TYPE_ID,\n--                 wl.PRODUCT_ID,\n--                 wl.date_created as wl_date_created,\n--                 wl.utm_content,\n--                 wl.utm_campaign,\n--                 wl.utm_medium,\n--                 wl.utm_source,\n--                 wl.utm_term,\n--                 nvl(nullif(trim(wl.initial_url),''),su.url) as initial_url,\n--                 wl.referral_url,\n--                 CASE WHEN wl.referral_domain_clean IS NULL THEN 'direct'\n--                             --when all numbers or there = no period, keep as is\n--                      WHEN try_to_numeric(regexp_replace(wl.referral_domain_clean,'[.]','')) is not null OR\n--                           charindex('.',wl.referral_domain_clean) = 0 THEN wl.referral_domain_clean\n--                      ELSE\n--                         --handle two-part (.com.uk) versus one-part (.com) top level domain\n--                         CASE WHEN left(reverse(left(reverse(wl.referral_domain_clean),6)),4) IN\n--                                   ('.co.','com.') AND wl.referral_domain_clean ILIKE '%.co%'\n--                              THEN reverse(split_part(reverse(wl.referral_domain_clean),'.',3))\n--                              ELSE reverse(split_part(reverse(wl.referral_domain_clean),'.',2))\n--                         END\n--                      END AS referral_domain_clean,\n--                 --prioritizing non-credit; dt_credit_users script will prioritize credit leads later\n--                 row_number() over (partition by wl.EMAIL order by wl.PRODUCT_ID nulls first, wl.DATE_CREATED) as rn\n--         from wait_list wl\n--         left join etl.segment_url su on wl.email = su.email\n--                                     and wl.date_created::date = su.received_at::date\n--                                     and ifnull(nullif(trim(wl.utm_campaign),''),'99999') = ifnull(su.context_campaign_name,'99999')\n--                                     and ifnull(nullif(trim(wl.utm_source),''),'99999') = ifnull(su.context_campaign_source,'99999')\n--     )\n-- , cte_waitlist as (\n--     select * from wait_list_ranked where rn = 1\n-- )\n-- , has_account as (\n--     select a.USER_ID\n--     from WEB_DB.USER_ACCOUNT a\n--     join WEB_DB.DEPOSITORY b on a.ACCOUNT_ID = b.ACCOUNT_ID\n--     where INCEPTION_DATE is not null\n--     union\n--     select a.USER_ID\n--     from WEB_DB.USER_ACCOUNT a\n--     join WEB_DB.INVESTMENT b on a.ACCOUNT_ID = b.ACCOUNT_ID\n--     where INCEPTION_DATE is not null\n--     union\n--     select CREDIT_USERS.USER_ID\n--     from CREDIT_ACCOUNT_MANAGEMENT.CREDIT_USERS\n-- )\n-- , has_applied as (\n--     select USER_ID\n--     from WEB_DB.USER_PRODUCT_APPLICATION\n--     group by 1\n-- )\n-- , incomplete_user_records as (\n--     --These are records with no user profile or email attached that have\n--     --a display_name that matches to an email of another _user record.\n--     --It is likely that they are bad login attempts or did not complete\n--     --the sign-up process. They are the source of records in dt_users that\n--     --have a user_id, but no email.\n--     --Note: only looking at display_names that are emails, because those should be unique\n--     select u_incomplete.id as user_id\n--     from WEB_DB._USER u\n--     join WEB_DB.USER_EMAIL ue on u.ID = ue.USER_ID\n--     left join WEB_DB._USER u_incomplete on ue.EMAIL = lower(u_incomplete.DISPLAY_NAME)\n--     left join WEB_DB.USER_PROFILE up on u_incomplete.id = up.USER_ID\n--     left join WEB_DB.USER_EMAIL e on u_incomplete.id = e.USER_ID\n--     left join WEB_DB.USER_SIGNUP us on u_incomplete.id = us.INVITED_USER_ID\n--     where u.id != u_incomplete.id\n--     and u_incomplete.DISPLAY_NAME like '%@%'\n--     and up.USER_ID is null\n--     and e.USER_ID is null\n--     and us.INVITED_USER_ID is null\n--     union\n--     --same principle as above - but matching via a user_invitation record\n--     select u_incomplete.id as user_id\n--     from WEB_DB._USER u_incomplete\n--     join WEB_DB.USER_INVITATION ui on lower(u_incomplete.DISPLAY_NAME) = lower(ui.EMAIL)\n--     left join WEB_DB.USER_PROFILE up on u_incomplete.id = up.USER_ID\n--     left join WEB_DB.USER_EMAIL e on u_incomplete.id = e.USER_ID\n--     left join WEB_DB.USER_SIGNUP us on u_incomplete.id = us.INVITED_USER_ID\n--     where u_incomplete.DISPLAY_NAME like '%@%'\n--     and up.USER_ID is null\n--     and e.USER_ID is null\n--     and (us.INVITED_USER_ID is null or us.USER_INVITATION_ID is null)\n-- )\n-- , user_id_records as (\n--     select\n--           u.id as user_id\n--         , u.UUID\n--         , u.DATE_CREATED as user_created\n--         , ui.code as user_invitation_code\n--         , wl.wl_date_created as date_created_waitlist\n--         , us.DATE_CREATED as date_created_user_sign_up\n--         , ui.DATE_CREATED as date_created_user_invitation\n--         , lower(coalesce(ue.email,ui.email,wl.email)) AS user_email\n--         , lower(coalesce(ui.email,wl.email)) as user_email_ui_wl\n--         , ui.id AS user_invitation_id\n--         , ui.INVITING_USER_ID as INVITING_USER_ID_UI\n--         , us.ID as user_sign_up_id\n--         , us.INVITING_USER_ID as INVITING_USER_ID_US\n--         , wl.*\n--         , case when app.USER_ID is not null then true else false end as has_applied\n--         , case when acc.USER_ID is not null then true else false end as has_account\n--         , case when up.USER_ID is not null then true else false end as has_profile\n--         , u.ENABLED\n--         , u.IS_IDENTITY_VERIFIED\n--         , u.LAST_LOGIN\n--         , ue.IS_VALIDATED\n--         , row_number() over (partition by ifnull(user_email, u.id::varchar(50))\n--                                  order by has_account desc nulls last,\n--                                           has_applied desc nulls last,\n--                                           has_profile desc nulls last,\n--                                           u.ENABLED desc nulls last,\n--                                           u.LAST_LOGIN desc nulls last,\n--                                           u.IS_IDENTITY_VERIFIED desc nulls last,\n--                                           ue.IS_VALIDATED desc nulls last) as rn_user_id\n--         --row count below is used to remove repeating display names just within the no user_email group\n--         , case when user_email is not null then 1\n--                else row_number() over (partition by lower(u.DISPLAY_NAME), user_email\n--                                            order by us.DATE_CREATED nulls last,\n--                                                     u.DATE_CREATED)\n--           end as rn_display\n--         , u.DISPLAY_NAME\n--     FROM web_db._user u\n--     LEFT JOIN web_db.user_signup us ON u.id = us.invited_user_id\n--     LEFT JOIN user_email ue ON u.id = ue.user_id AND ue.rn = 1\n--     LEFT JOIN user_email ue2 ON u.id = ue2.user_id AND ue.rn = 2\n--     LEFT JOIN web_db.user_invitation ui ON us.user_invitation_id = ui.id\n--     --Sometimes there is no user_invitation_id value in user_signup, so in\n--     --order to not miss the opportunity to get a match to wait list data,\n--     --the coalesce below is used to match to it from other sources.\n--     LEFT JOIN cte_waitlist wl ON wl.email = coalesce(lower(ui.email),ue.email,ue2.email)\n--     left join has_account acc on u.id = acc.USER_ID\n--     left join has_applied app on u.id = app.USER_ID\n--     left join WEB_DB.USER_PROFILE up on u.id = up.USER_ID\n--     where u.ID not in (select USER_ID from incomplete_user_records)\n-- )\n-- , user_id_email_list as (\n--     --this is used to make sure that alternate emails are not inserted\n--     --for the same person in the non_user_id_records cte\n--     select user_email as email_user_id\n--     from user_id_records\n--     where user_email is not null\n--     union\n--     select user_email_ui_wl as email_user_id\n--     from user_id_records\n--     where user_email_ui_wl is not null\n-- )\n-- , non_user_id_records as (\n--     select\n--           null as user_id\n--         , null as uuid\n--         , null as user_created\n--         , ui.code as user_invitation_code\n--         , wl.wl_date_created as date_created_waitlist\n--         , null as date_created_user_sign_up\n--         , ui.DATE_CREATED as date_created_user_invitation\n--         , lower(coalesce(ui.email,wl.email)) AS user_email\n--         , user_email as user_email_ui_wl\n--         , ui.id AS user_invitation_id\n--         , ui.INVITING_USER_ID as INVITING_USER_ID_UI\n--         , null as user_sign_up_id\n--         , null as INVITING_USER_ID_US\n--         , wl.*\n--         , null as has_applied\n--         , null as has_account\n--         , null as has_profile\n--         , null as ENABLED\n--         , null as IS_IDENTITY_VERIFIED\n--         , null as LAST_LOGIN\n--         , null as IS_VALIDATED\n--         --going with waitlist date 1st, user_invitation 2nd because of current lead_arrival_date logic\n--         , row_number() over (partition by user_email order by wl.wl_date_created, ui.DATE_CREATED) as rn_no_user_id\n--         , 1 as rn_display\n--         , null as display_name\n--     from web_db.user_invitation ui\n--     full outer JOIN cte_waitlist wl ON wl.email = ui.email\n--     where user_email not in (select email_user_id from user_id_email_list)\n-- )\n-- select a.*\n-- from user_id_records a\n-- where a.rn_user_id = 1\n--   and a.rn_display = 1\n-- union all\n-- select b.*\n-- from non_user_id_records b\n-- where b.rn_no_user_id = 1;\n\n--table to exclude users who only have the PYC Lite product\ndrop table if exists tmp_pyc_lite_only;\ncreate temp table tmp_pyc_lite_only as\nwith pyc_lite as (\n    select distinct USER_ID\n    from WEB_DB.USER_PRODUCT_APPLICATION upa\n    join WEB_DB.PRODUCT p on upa.PRODUCT_ID = p.id\n    where p.CODE = 'PYC-LITE'\n)\n, non_pyc_lite as (\n    select distinct USER_ID\n    from WEB_DB.USER_PRODUCT_APPLICATION upa\n    join WEB_DB.PRODUCT p on upa.PRODUCT_ID = p.id\n    where p.CODE != 'PYC-LITE'\n)\nselect pl.USER_ID\nfrom pyc_lite pl\nleft join non_pyc_lite npl on pl.USER_ID = npl.USER_ID\nwhere npl.USER_ID is null;\n\n--two temp tables below are used to identify credit leads\ndrop table if exists tmp_credit_lead_email;\ncreate temp table tmp_credit_lead_email as\nselect lower(email) as email\nfrom WEB_DB.WAIT_LIST_USER\nwhere PRODUCT_ID = 8\nunion\nselect lower(email) as email\nfrom WEB_DB.PRODUCT_WAITLIST\nwhere PRODUCT_ID = 8\nunion\nselect lower(email) as email\nfrom WEB_DB.USER_INVITATION\nwhere PRODUCT_ID = 8;\n\ndrop table if exists tmp_credit_lead_user_id;\ncreate temp table tmp_credit_lead_user_id as\nselect INVITED_USER_ID as USER_ID\nfrom WEB_DB.USER_SIGNUP a\njoin WEB_DB.PRODUCT_WAITLIST b on a.PRODUCT_WAITLIST_ID = b.ID\nwhere b.PRODUCT_ID = 8\nunion\nselect INVITED_USER_ID as USER_ID\nfrom WEB_DB.USER_SIGNUP a\njoin WEB_DB.USER_INVITATION b on a.USER_INVITATION_ID = b.ID\nwhere b.PRODUCT_ID = 8\nunion\n--need queries below for people where wait list email differs from primary email\nselect ue.USER_ID\nfrom tmp_credit_lead_email e\njoin WEB_DB.USER_EMAIL ue on e.EMAIL = lower(ue.EMAIL)\nunion\nselect c.INVITED_USER_ID\nfrom WEB_DB.PRODUCT_WAITLIST a\njoin WEB_DB.USER_INVITATION b on lower(a.EMAIL) = lower(b.EMAIL)\njoin WEB_DB.USER_SIGNUP c on b.ID = c.USER_INVITATION_ID\nwhere a.PRODUCT_ID = 8;\n\n--table below used for email lead matching for cases where people have changed their emails since becoming a lead\n-- drop table if exists etl.dt_users_email;\n-- create table etl.dt_users_email as\n-- with waitlist_emails as (\n--     select lower(email) as email\n--     from WEB_DB.WAIT_LIST_USER\n--     union\n--     select lower(email)\n--     from WEB_DB.PRODUCT_WAITLIST\n-- )\n-- , user_data as (\n--     select a.EMAIL,\n--            c.INVITED_USER_ID as user_id\n--     from waitlist_emails a\n--     join WEB_DB.USER_INVITATION b on a.EMAIL = lower(b.EMAIL)\n--     join WEB_DB.USER_SIGNUP c on b.ID = c.USER_INVITATION_ID\n-- )\n-- , email as (\n--     select lower(email) as email,\n--            user_id,\n--            row_number() over (partition by user_id order by last_updated desc) as rn\n--     from web_db.user_email\n--     where is_primary = true\n-- )\n-- , list as (\n--     select w.EMAIL,\n--            e.EMAIL as primary_email,\n--            u.user_id,\n--            case when w.EMAIL = e.email then 1 else 2 end as priority_order,\n--            row_number() over (partition by w.email order by priority_order) as rn\n--     from waitlist_emails w\n--     left join user_data u on w.EMAIL = u.EMAIL\n--     left join email e on u.user_id = e.USER_ID and e.rn = 1\n--     where primary_email is not null\n-- )\n-- select email,\n--        primary_email,\n--        user_id\n-- from list\n-- where rn = 1;\n--\n-- --remove email records where the link is probably to a different person or circular\n-- delete\n-- from etl.dt_users_email\n-- where EMAIL != PRIMARY_EMAIL\n-- and EMAIL in (select PRIMARY_EMAIL from etl.DT_USERS_EMAIL);\n\n--etl.dt_users will be used as a base for both non-credit and credit versions of dt_users\nDROP TABLE IF EXISTS etl.dt_users_ush;\nCREATE TABLE etl.dt_users_ush\nAS (\n   WITH\n      users AS (\n         WITH\n            attribution_data AS (\n               SELECT CASE WHEN u.USER_INVITATION_CODE = 'mi' THEN 'iOS Signup'\n                           WHEN u.USER_INVITATION_CODE  = 'ma' THEN 'Android Signup'\n                           WHEN u.INVITING_USER_ID_UI > 1 OR u.USER_INVITATION_ID IS NULL THEN 'Referral'\n                           WHEN u.USER_INVITATION_ID IS NOT NULL THEN 'Web Signup'\n                           ELSE 'Unknown'\n                           END AS lead_source\n                    , CASE WHEN u.USER_INVITATION_CODE IN ('mi','ma') THEN u.DATE_CREATED_USER_SIGN_UP\n                           WHEN u.WAIT_LIST_ID IS NOT NULL THEN u.DATE_CREATED_WAITLIST\n                           WHEN u.USER_INVITATION_ID IS NOT NULL THEN u.DATE_CREATED_USER_INVITATION\n                           ELSE u.DATE_CREATED_USER_SIGN_UP\n                           END AS lead_arrival_date\n                    , u.user_email\n                    , u.USER_INVITATION_ID AS user_invitation_id\n                    , CASE WHEN u.WAIT_LIST_ID IS NULL OR u.USER_INVITATION_CODE IN ('mi','ma') THEN FALSE ELSE TRUE END AS is_wait_list_user\n                    , CASE WHEN u.USER_INVITATION_ID IS NULL OR u.USER_INVITATION_CODE IN ('mi','ma') THEN FALSE ELSE TRUE END AS is_invitation_sent\n                    , CASE WHEN u.USER_SIGN_UP_ID IS NULL THEN FALSE ELSE TRUE END AS is_signed_up\n                    , u.utm_source AS utm_source\n                    , case when up.SHOW_IN_DASHBOARD = true then 'Partner' else null end as utm_category\n                    , u.utm_medium AS utm_medium\n                    , u.utm_term AS utm_term\n                    , u.utm_content AS utm_content\n                    , u.utm_campaign AS utm_campaign\n                    , regexp_substr(u.initial_url,'click_?id=([^&]*)',1,1,'e') AS utm_click_id\n                    , regexp_substr(u.initial_url,'sub_?id1?=([^&]*)',1,1,'e') AS utm_click_sub_id\n                    , regexp_substr(u.initial_url,'sub_?id2=([^&]*)',1,1,'e') AS utm_click_sub_id2\n                    , regexp_substr(u.initial_url,'sub_?id3=([^&]*)',1,1,'e') AS utm_click_sub_id3\n                    , u.initial_url AS utm_initial_url\n                    , regexp_replace(u.initial_url,'(.*&gclid=([^&]*))?(.*)','$2') AS gcl_id\n                    , u.referral_domain_clean AS referral_domain\n                    , u.referral_url\n                    , CASE WHEN u.product_id = 1 AND u.account_type_id = 2 THEN 'Redwood Individual'\n                           WHEN u.product_id = 1 AND u.account_type_id = 3 THEN 'Redwood IRA'\n                           WHEN u.product_id = 2 AND u.account_type_id = 2 THEN 'Flagship Individual'\n                           WHEN u.product_id = 2 AND u.account_type_id = 3 THEN 'Flagship IRA'\n                           WHEN u.product_id IN (3,4) THEN 'Checking'\n                           WHEN u.product_id = 8 THEN 'Credit'\n                           ELSE 'Unattributed'\n                           END AS initial_product_selected\n                    , CASE WHEN u.INVITING_USER_ID_UI > 1 OR u.INVITING_USER_ID_US > 1 THEN TRUE\n                           ELSE FALSE\n                           END AS is_referral\n                    , u.user_id\n                    , CASE WHEN u.USER_INVITATION_ID IS NOT NULL THEN TRUE ELSE FALSE END AS has_entered_credentials\n                    , u.user_created AS entered_credentials_date\n                    , u.uuid AS external_user_id\n                    , NOT u.enabled AS user_disabled\n                    , utm_lander\n                    , nvl(cmp1.value, split_part(u.utm_campaign,'-',1)) AS utm_campaign_product\n                    , nvl(cmp2.value, ltrim(regexp_substr(u.utm_campaign,'-.*',1),'-')) AS utm_campaign_marketing_campaign\n                    , nvl(cnt1.value, split_part(u.utm_content,'-',1)) AS utm_content_creative_type\n                    , nvl(cnt2.value, split_part(u.utm_content,'-',2)) AS utm_content_creative_description\n                    , nvl(cnt3.value, split_part(u.utm_content,'-',3)) AS utm_content_cta\n                    , nvl(cnt4.value, split_part(u.utm_content,'-',4)) AS utm_content_placement\n                    , nvl(cnt5.value, split_part(u.utm_content,'-',5)) AS utm_content_variable\n                    , decode(regexp_replace(u.utm_content,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$|(((-)[^-]+){4})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9$12$12$12$12$12')\n                       , '-----', split_part(split_part(u.utm_content,'-',6),' ',2)\n                       ) AS utm_content_ad_id\n                    , decode(regexp_replace(u.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', trm1.value\n                       , '------', trm1.value\n                       ) AS utm_term_audience_type\n                    , decode(regexp_replace(u.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', trm2.value\n                       , '------', null\n                       ) AS utm_term_seed_audience\n                    , decode(regexp_replace(u.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', trm3.value\n                       , '------', null\n                       ) AS utm_term_lal_percentage\n                    , decode(regexp_replace(u.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', trm4.value\n                       , '------', null\n                       ) AS utm_term_messaging\n                    , decode(regexp_replace(u.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', null\n                       , '------', split_part(u.utm_term,'-',2)\n                       ) AS utm_term_ad_id\n                    , decode(regexp_replace(u.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', null\n                       , '------', split_part(u.utm_term,'-',3)\n                       ) AS utm_term_ad_platform\n                    , decode(regexp_replace(u.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', null\n                       , '------', split_part(u.utm_term,'-',4)\n                       ) AS utm_term_ad_placement\n                    , decode(regexp_replace(u.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', split_part(u.utm_term,'-',5)\n                       , '------', split_part(u.utm_term,'-',5) || rtrim(concat(' ',split_part(u.utm_term,'-',6))) || rtrim(concat(' ',split_part(u.utm_term,'-',7)))\n                       ) AS utm_term_start_date\n                    , u.INVITING_USER_ID_US as INVITING_USER_ID\n                    , CASE WHEN started_applications.user_id IS NULL THEN FALSE ELSE TRUE END AS has_started_application\n                    , CASE WHEN entered_funding.user_id IS NULL THEN FALSE ELSE TRUE END AS has_entered_funding_amount\n                    , CASE WHEN entered_fee.user_id IS NULL THEN FALSE ELSE TRUE END AS has_entered_fee\n                    , coalesce(u.is_validated,FALSE) AS has_validated_email\n\n               FROM etl.user_list u\n\n               LEFT JOIN web_db.dt_utm_fields_master utm ON utm.utm_generated_url_final = u.initial_url\n\n               LEFT JOIN rdl.utm_lookup cmp1 ON cmp1.utm = 'Campaign' AND cmp1.part = '1' AND lower(cmp1.code) = lower(split_part(u.utm_campaign,'-',1))\n               LEFT JOIN rdl.utm_lookup cmp2 ON cmp2.utm = 'Campaign' AND cmp2.part = '2' AND lower(cmp2.code) = lower(split_part(u.utm_campaign,'-',2))\n               LEFT JOIN rdl.utm_lookup cnt1 ON cnt1.utm = 'Content'  AND cnt1.part = '1' AND lower(cnt1.code) = lower(split_part(u.utm_content,'-',1))\n               LEFT JOIN rdl.utm_lookup cnt2 ON cnt2.utm = 'Content'  AND cnt2.part = '2' AND lower(cnt2.code) = lower(split_part(u.utm_content,'-',2))\n               LEFT JOIN rdl.utm_lookup cnt3 ON cnt3.utm = 'Content'  AND cnt3.part = '3' AND lower(cnt3.code) = lower(split_part(u.utm_content,'-',3))\n               LEFT JOIN rdl.utm_lookup cnt4 ON cnt4.utm = 'Content'  AND cnt4.part = '4' AND lower(cnt4.code) = lower(split_part(u.utm_content,'-',4))\n               LEFT JOIN rdl.utm_lookup cnt5 ON cnt5.utm = 'Content'  AND cnt5.part = '5' AND lower(cnt5.code) = lower(split_part(u.utm_content,'-',5))\n               LEFT JOIN rdl.utm_lookup trm1 ON trm1.utm = 'Term'     AND trm1.part = '1' AND lower(trm1.code) = lower(split_part(u.utm_term,'-',1))\n               LEFT JOIN rdl.utm_lookup trm2 ON trm2.utm = 'Term'     AND trm2.part = '2' AND lower(trm2.code) = lower(split_part(u.utm_term,'-',2))\n               LEFT JOIN rdl.utm_lookup trm3 ON trm3.utm = 'Term'     AND trm3.part = '3' AND lower(trm3.code) = lower(split_part(u.utm_term,'-',3))\n               LEFT JOIN rdl.utm_lookup trm4 ON trm4.utm = 'Term'     AND trm4.part = '4' AND lower(trm4.code) = lower(split_part(u.utm_term,'-',4))\n               LEFT JOIN rdl.utm_partnership up ON u.utm_source = up.utm_source\n               LEFT JOIN (\n                  SELECT user_id\n                  FROM web_db.user_product_application\n                  WHERE account_type_id IN (2,3)\n                  GROUP BY 1\n                  ) started_applications ON started_applications.user_id = u.user_id\n\n               LEFT JOIN (\n                  SELECT user_id\n                  FROM web_db.user_product_application\n                  WHERE account_type_id IN (2,3)\n                    AND (ifnull(funding_amount,0) != 0 or ifnull(STRIPE_FUNDING_AMOUNT, 0) != 0)\n                  GROUP BY 1\n                  ) entered_funding ON entered_funding.user_id = u.user_id\n\n               LEFT JOIN (\n                  SELECT user_id\n                  FROM web_db.user_product_application\n                  WHERE account_type_id IN (2,3)\n                    AND FEE_AMOUNT is not null\n                  GROUP BY 1\n                  ) entered_fee ON entered_fee.user_id = u.user_id\n               ),\n            aggregated_account_data AS (\n               WITH\n                  first_account AS (\n                     SELECT user_id\n                          , unique_account_id\n                          , inception_date\n                          , inception_date_time\n                          , funding_amount\n                          , opening_monthly_usd_fee_setting\n                          , opening_yearly_percent_fee_setting\n                          , a.account_type\n                          , funding_bank_account_id\n                          , initial_monthly_recurring_investment_amount\n                     FROM bi.dt_accounts a\n                     WHERE account_creation_order = 1\n                     ),\n                  second_account AS (\n                     SELECT user_id\n                          , unique_account_id\n                          , account_type\n                          , inception_date\n                          , inception_date_time\n                     FROM bi.dt_accounts a\n                     WHERE account_creation_order = 2\n                     ),\n\n                  initial_transfer_post as (\n                     SELECT user_id\n                          , min(initial_transfer_posted_date) as initial_transfer_posted_date\n                     FROM bi.dt_accounts a\n                     WHERE account_type = 'Checking'\n                     group by 1\n                  )\n\n               SELECT a.user_id\n                    , fa.account_type AS first_account_type\n                    , sa.account_type AS second_account_type\n                    , fa.funding_amount AS first_account_funding_amount\n                    , fa.inception_date AS first_account_inception_date\n                    , fa.inception_date_time AS first_account_inception_date_time\n                    , fa.opening_monthly_usd_fee_setting AS first_account_opening_monthly_usd_fee_setting\n                    , fa.opening_yearly_percent_fee_setting AS first_account_opening_yearly_percent_fee_setting\n                    , fa.funding_bank_account_id AS first_account_funding_bank_account_id\n                    , fa.initial_monthly_recurring_investment_amount AS first_account_initial_monthly_recurring_investment_account\n                    , sa.inception_date::DATE - fa.inception_date::DATE AS days_between_first_and_second_account\n                    , date_part('year',sa.inception_date) * 12 - date_part('year',fa.inception_date) * 12 +\n                      date_part('month',sa.inception_date) -\n                      date_part('month',fa.inception_date) AS months_between_first_and_second_account\n                    , itp.initial_transfer_posted_date as initial_transfer_posted_date\n                    , BOOLOR_AGG(a.account_type = 'Checking') AS has_checking_account\n                    , BOOLOR_AGG(a.account_type = 'Flagship Individual') AS has_flagship_individual\n                    , BOOLOR_AGG(a.account_type = 'Flagship IRA') AS has_flagship_ira\n                    , BOOLOR_AGG(a.account_type = 'Redwood Individual') AS has_redwood_individual\n                    , BOOLOR_AGG(a.account_type = 'Redwood IRA') AS has_redwood_ira\n                    , sum(current_balance) AS current_total_assets\n                    , count(*) AS total_accounts_opened\n                    , CASE WHEN count(*) >= 1 THEN TRUE ELSE FALSE END AS has_opened_aspiration_account\n                    , sum(current_monthly_recurring_investment_amount) AS current_monthly_recurring_investment_amount\n\n               FROM bi.dt_accounts a\n               INNER JOIN first_account fa ON a.user_id = fa.user_id\n               LEFT JOIN second_account sa ON a.user_id = sa.user_id\n               left join initial_transfer_post itp on itp.user_id = a.user_id\n               GROUP BY 1\n                      , 2\n                      , 3\n                      , 4\n                      , 5\n                      , 6\n                      , 7\n                      , 8\n                      , 9\n                      , 10\n                      , 11\n                      , 12\n                      , 13\n               ),\n            customer_information AS (\n               SELECT up.user_id\n                    , date_of_birth\n                    , datediff('months',date_of_birth,CURRENT_DATE) / 12 AS customer_age\n                    , upper(first_name) AS first_name\n                    , upper(middle_name) AS middle_name\n                    , upper(last_name) AS last_name\n                    , CASE gender_type WHEN 1 THEN 'Male' WHEN 2 THEN 'Female' ELSE 'Other' END AS gender\n                    , gross_income\n                    , liquid_net_worth\n                    , has_alternative_investments\n                    , has_bonds\n                    , has_cd\n                    , has_checking\n                    , has_etf\n                    , has_ira\n                    , has_mutual_funds\n                    , has_options\n                    , has_savings\n                    , has_stock\n                    , CASE uip.employment_status WHEN 0 THEN 'Undefined'\n                                                 WHEN 1 THEN 'Employed Full Time'\n                                                 WHEN 2 THEN 'Employed Part Time'\n                                                 WHEN 3 THEN 'Self Employed'\n                                                 WHEN 4 THEN 'Student'\n                                                 WHEN 5 THEN 'Retired'\n                                                 WHEN 6 THEN 'Not Employed'\n                                                 END AS employment\n                    , CASE marital_status WHEN 0 THEN 'Undefined'\n                                          WHEN 1 THEN 'Single'\n                                          WHEN 2 THEN 'Married'\n                                          WHEN 3 THEN 'Divorced'\n                                          WHEN 4 THEN 'Widowed'\n                                          WHEN 5 THEN 'Separated'\n                                          WHEN 6 THEN 'Domestic Partner'\n                                          END AS marital_status\n                    , has_trust\n                    , has401k\n                    , has_joint\n                    , upper(city) AS city\n                    , s.name AS state\n                    , upper(a.street1) AS street_line_1\n                    , upper(a.street2) AS street_line_2\n                    , phone_number\n                    , is_phone_validated\n                    , zip_or_postal_code AS zip_code\n               FROM web_db.user_profile up\n               LEFT JOIN web_db.user_investment_profile uip ON uip.user_id = up.user_id\n               LEFT JOIN web_db.address a ON a.id = coalesce(mailing_address_id,up.address_id)\n               LEFT JOIN web_db.state s ON s.id = a.state_id\n               ),\n            alloy_evaluation AS (\n               SELECT CIP_status\n                    , user_id\n                    , CIP_status_date\n                    , CIP_manual_review_completion_date\n                    , alloy_custom_model_score\n                    , alloy_custom_model_version\n                    , alloy_summary_application_version\n               FROM (\n                  SELECT d.\"alloy summary_outcome\" || CASE WHEN d.\"alloy summary_outcome\" = 'Manual Review'\n                                                              THEN cast(' - ' || coalesce(rd.outcome,'Pending') AS VARCHAR(50))\n                                                           ELSE ''\n                                                           END AS CIP_status\n                       , app.user_id AS user_id\n                       , e.submitted_at AS CIP_status_date\n                       , rd.timestamp AS CIP_manual_review_completion_date\n                       , d.\"custom models_model_score\" as alloy_custom_model_score\n                       , d.\"custom models_model_version\" as alloy_custom_model_version\n                       , d.\"alloy summary_application_version_id\" as alloy_summary_application_version\n                       ,CASE WHEN d.\"alloy summary_outcome\" = 'Manual Review' and rd.outcome = 'Denied'\n                             THEN 1\n                           ELSE 0\n                        END AS cip_rank\n                       , row_number() OVER (PARTITION BY app.user_id ORDER BY cip_rank desc,CIP_status_date DESC) AS row_num\n                       --, row_number() OVER (PARTITION BY app.user_id ORDER BY CIP_status_date DESC) AS row_num\n                  FROM aoa_db.alloy_evaluations e\n                  JOIN web_db.user_product_application app ON app.id = e.user_product_application_id\n                  JOIN rdl.alloy_evaluations_flattened d ON d.evaluation_id = e.id\n                  LEFT JOIN aoa_db.evaluation_reviews er ON er.alloy_evaluation_id = e.id\n                  LEFT JOIN rdl.alloy_evaluation_reviews_flattened rd ON rd.evaluation_review_id = er.id\n                  WHERE nullif(trim(d.\"alloy summary_outcome\"),'') IS NOT NULL\n                  ) AS a\n               WHERE a.row_num = 1\n               ),\n            cohorts AS (\n               SELECT uc.user_id\n                    , c.name AS cohort_name\n               FROM web_db.cohorts c\n               JOIN web_db.user_cohorts uc ON c.id = uc.cohorts_id\n               WHERE c.name IN ('check-deposit-disabled','withdrawal-disabled')\n               )\n\n         SELECT a.user_email\n              , a.has_validated_email\n              , a.user_id\n              , a.has_entered_credentials\n              , a.entered_credentials_date\n              , a.external_user_id\n              , a.lead_source\n              , a.utm_source\n              , a.utm_category\n              , a.lead_arrival_date\n              , a.utm_content\n              , nvl(a.referral_domain,'direct') AS referral_domain\n              , a.referral_url\n              , a.initial_product_selected\n              , a.is_signed_up\n              , a.utm_campaign\n              , ifnull(a.utm_click_id,'') AS utm_click_id\n              , ifnull(a.utm_click_sub_id,'') AS utm_click_sub_id\n              , ifnull(a.utm_click_sub_id2,'') AS utm_click_sub_id2\n              , ifnull(a.utm_click_sub_id3,'') AS utm_click_sub_id3\n              , a.utm_initial_url\n              , a.gcl_id\n              , a.utm_medium\n              , a.utm_term\n              , a.user_disabled\n              , utm_lander\n              , utm_campaign_product\n              , utm_campaign_marketing_campaign\n              , utm_content_creative_type\n              , utm_content_creative_description\n              , utm_content_cta\n              , utm_content_placement\n              , utm_content_variable\n              , utm_content_ad_id\n              , utm_term_audience_type\n              , utm_term_seed_audience\n              , utm_term_lal_percentage\n              , utm_term_messaging\n              , utm_term_ad_id\n              , utm_term_ad_platform\n              , utm_term_ad_placement\n              , utm_term_start_date\n              , has_started_application\n              , has_opened_aspiration_account\n              , CASE WHEN /*gross_income IS NULL or ssn IS NULL or*/ has_started_application = FALSE THEN FALSE\n                     ELSE has_entered_funding_amount\n                     END AS has_entered_funding_amount\n              , CASE WHEN /*gross_income IS NULL or ssn IS NULL or*/ has_started_application = FALSE OR has_entered_funding_amount = FALSE\n                        THEN FALSE\n                     ELSE has_entered_fee\n                     END AS has_entered_fee\n              , CASE WHEN /*ssn IS NULL or*/ has_started_application = FALSE OR first_name IS NULL THEN FALSE\n                     ELSE TRUE\n                     END AS has_entered_personal_information\n              , CASE WHEN /*gross_income IS NULL or ssn IS NULL or*/ has_started_application = FALSE OR first_name IS NULL\n                        THEN FALSE\n                     ELSE TRUE\n                     END AS has_entered_financial_information\n              , CASE WHEN\n                        /* gross_income IS NULL or ssn IS NULL or has_started_application = false or has_entered_funding_amount = false\n                        or has_entered_fee = false or*/ entered_bank.user_id IS NULL THEN FALSE\n                     ELSE TRUE\n                     END AS has_attempted_to_link_bank\n              , CASE WHEN\n                        /* gross_income IS NULL or ssn IS NULL or has_started_application = false or has_entered_funding_amount = false\n                        or has_entered_fee = false or*/ verified_bank.user_id IS NULL THEN FALSE\n                     ELSE TRUE\n                     END AS has_verified_bank\n              , CASE WHEN tc.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS has_accepted_terms_and_conditions\n              , b.zip_code\n              , b.state\n              , b.street_line_2\n              , b.marital_status\n              , b.street_line_1\n              , b.gender\n              , b.date_of_birth\n              , b.customer_age\n              -- ssn,\n              , b.employment\n              , b.phone_number\n              , b.is_phone_validated\n              , b.first_name\n              , b.city\n              , b.gross_income\n              , b.last_name\n              , b.middle_name\n              , b.has_checking\n              , b.has401k\n              , b.has_alternative_investments\n              , b.has_bonds\n              , b.has_cd\n              , b.has_etf\n              , b.has_ira\n              , b.has_joint\n              , b.has_mutual_funds\n              , b.has_options\n              , b.has_savings\n              , b.has_stock\n              , b.has_trust\n              , b.liquid_net_worth\n              , c.second_account_type\n              , c.first_account_type\n              , c.current_monthly_recurring_investment_amount\n              , c.current_total_assets\n              , c.days_between_first_and_second_account\n              , c.months_between_first_and_second_account\n              , c.first_account_funding_amount\n              , c.first_account_funding_bank_account_id\n              , c.first_account_inception_date\n              , c.first_account_inception_date_time\n              , c.first_account_opening_monthly_usd_fee_setting\n              , c.first_account_opening_yearly_percent_fee_setting\n              , coalesce(c.has_flagship_individual,FALSE) AS has_flagship_individual\n              , coalesce(c.has_flagship_ira,FALSE) AS has_flagship_ira\n              , coalesce(c.has_redwood_individual,FALSE) AS has_redwood_individual\n              , coalesce(c.has_redwood_ira,FALSE) AS has_redwood_ira\n              , coalesce(c.has_checking_account,FALSE) AS has_checking_account\n              , coalesce(c.total_accounts_opened,0) AS total_accounts_opened\n              , c.initial_transfer_posted_date\n              , CASE WHEN r_ind.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS redwood_individual_application_started\n              , CASE WHEN r_ira.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS redwood_ira_application_started\n              , CASE WHEN f_ind.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS flagship_individual_application_started\n              , CASE WHEN f_ira.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS flagship_ira_application_started\n              , CASE WHEN risk_cohorts.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS has_risk_cohorts\n              , a.inviting_user_id\n              , alloy.CIP_status AS CIP_status\n              , alloy.CIP_status_date AS CIP_status_date\n              , alloy.CIP_manual_review_completion_date AS CIP_manual_review_completion_date\n              , alloy.alloy_custom_model_score\n              , alloy.alloy_custom_model_version\n              , alloy.alloy_summary_application_version\n              , CASE WHEN cohort_deposit.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS is_mobile_check_deposit_disabled\n              , CASE WHEN cohort_withdrawal.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS is_withdrawal_disabled\n              , CASE WHEN HSA.STATUS in (4,5,6) THEN TRUE else FALSE end AS HAS_SUBMIT_APPLICATION\n          \n         FROM attribution_data a\n         LEFT JOIN customer_information b ON a.user_id = b.user_id\n         LEFT JOIN aggregated_account_data c ON a.user_id = c.user_id\n         LEFT JOIN (\n            SELECT user_id\n                 , status\n            FROM web_db.user_product_application\n            WHERE product_id = 1\n              AND account_type_id = 2\n            ) r_ind ON r_ind.user_id = a.user_id\n         LEFT JOIN (\n            SELECT user_id\n                 , status\n            FROM web_db.user_product_application\n            WHERE product_id = 1\n              AND account_type_id = 3\n            ) r_ira ON r_ira.user_id = a.user_id\n         LEFT JOIN (\n            SELECT user_id\n                 , status\n            FROM web_db.user_product_application\n            WHERE product_id = 2\n              AND account_type_id = 2\n            ) f_ind ON f_ind.user_id = a.user_id\n         LEFT JOIN (\n            SELECT user_id\n                 , status\n            FROM web_db.user_product_application\n            WHERE product_id = 2\n              AND account_type_id = 3\n            ) f_ira ON f_ira.user_id = a.user_id\n         LEFT JOIN (select row_number() over (partition by USER_ID order by DATE_CREATED desc ) as row_num, * from (\n              select DATE_CREATED, USER_ID,ACCOUNT_ID, STRIPE_FUNDING_AMOUNT, PRODUCT_ID, STATUS from WEB_DB.USER_PRODUCT_APPLICATION\n              where PRODUCT_ID in (4,5)\n              and STATUS in (4,5,6)\n            ) ) HSA ON HSA.user_id = a.user_id  and  hsa.row_num=1\n         LEFT JOIN (\n            SELECT DISTINCT user_id\n            FROM bi.dt_banks\n            WHERE is_checking_account = FALSE\n            ) entered_bank ON entered_bank.user_id = a.user_id\n         LEFT JOIN (\n            SELECT DISTINCT user_id\n            FROM bi.dt_banks\n            WHERE is_verified = TRUE\n              AND is_checking_account = FALSE\n            ) verified_bank ON verified_bank.user_id = a.user_id\n         LEFT JOIN (\n            SELECT DISTINCT user_id\n            FROM web_db.user_terms_conditions\n            ) tc ON tc.user_id = a.user_id\n\n         LEFT JOIN (\n            SELECT DISTINCT user_id\n            FROM web_db.user_cohorts\n            WHERE cohorts_id IN (22,23)\n            ) risk_cohorts ON risk_cohorts.user_id = a.user_id\n         LEFT JOIN cohorts AS cohort_deposit\n                   ON cohort_deposit.user_id = a.user_id AND cohort_deposit.cohort_name = 'check-deposit-disabled'\n         LEFT JOIN cohorts AS cohort_withdrawal\n                   ON cohort_withdrawal.user_id = a.user_id AND cohort_withdrawal.cohort_name = 'withdrawal-disabled'\n         LEFT JOIN alloy_evaluation AS alloy ON alloy.user_id = a.user_id\n         ),\n      aggregate_spending AS (\n         SELECT paid_channel_name\n              , utm_source_1\n              , utm_source_2\n              , start_date\n              , end_date\n              , spend / (1.0 * cnt) AS spend_per_acquisition\n         FROM (\n            SELECT m.channel_name AS paid_channel_name\n                 , utm_source_1\n                 , utm_source_2\n                 , start_date\n                 , end_date\n                 , m.spend\n                 , count(*) AS cnt\n            FROM users u\n            INNER JOIN web_db.dt_marketing_spend m\n                       ON (u.utm_source = m.utm_source_1 OR u.utm_source = m.utm_source_2) AND\n                          lead_arrival_date::DATE >= m.start_date AND lead_arrival_date::DATE < m.end_date AND\n                          m.spend IS NOT NULL AND u.total_accounts_opened > 0\n            GROUP BY 1\n                   , 2\n                   , 3\n                   , 4\n                   , 5\n                   , 6\n            ORDER BY 1\n                   , 2\n                   , 3\n                   , 4\n                   , 5\n                   , 6\n            ) a\n         ),\n      filled_end_dates AS (\n         SELECT channel_name\n              , utm_source_1\n              , utm_source_2\n              , start_date\n              , (\n            SELECT min(start_date)\n            FROM web_db.dt_marketing_spend a\n            WHERE a.channel_name = s.channel_name\n              AND a.start_date > s.start_date\n            ) AS end_date\n              , cpa\n              , cpl\n         FROM web_db.dt_marketing_spend s\n         WHERE cpl IS NOT NULL\n            OR cpa IS NOT NULL\n         ),\n      cpl_spends AS (\n         SELECT channel_name\n              , lead_arrival_month\n              , utm_source_1\n              , utm_source_2\n              , cpl * lead_count / (1.0 * customer_count) AS spend_per_aquisition\n         FROM (\n            SELECT channel_name\n                 , utm_source_1\n                 , utm_source_2\n                 , start_date\n                 , end_date\n                 , cpl\n                 , date_trunc('month',lead_arrival_date) :: DATE AS lead_arrival_month\n                 , count(*) AS lead_count\n                 , sum(CASE WHEN total_accounts_opened > 0 THEN 1 ELSE 0 END) AS customer_count\n            FROM filled_end_dates fed\n            INNER JOIN users u ON (fed.utm_source_1 = u.utm_source OR fed.utm_source_2 = u.utm_source) AND\n                                  lead_arrival_date::DATE >= start_date AND\n                                  (end_date IS NULL OR lead_arrival_date::DATE < end_date)\n            WHERE fed.cpl IS NOT NULL\n            GROUP BY 1\n                   , 2\n                   , 3\n                   , 4\n                   , 5\n                   , 6\n                   , 7\n            HAVING sum(CASE WHEN total_accounts_opened > 0 THEN 1 ELSE 0 END) > 0\n            ) a\n         ),\n      cpa_spends AS (\n         SELECT channel_name\n              , date_trunc('month',lead_arrival_date) :: DATE AS lead_arrival_month\n              , utm_source_1\n              , utm_source_2\n              , cpa AS spend_per_acquisition\n         FROM filled_end_dates fed\n         INNER JOIN users u ON (fed.utm_source_1 = u.utm_source OR fed.utm_source_2 = u.utm_source) AND\n                               lead_arrival_date::DATE >= start_date AND\n                               (end_date IS NULL OR lead_arrival_date::DATE < end_date)\n         WHERE cpa IS NOT NULL\n         GROUP BY 1\n                , 2\n                , 3\n                , 4\n                , 5\n         ),\n      months AS (\n         SELECT DATEADD('month',i - 1,'2014-10-01') AS month\n         FROM (\n                     select row_number() over(order by seq4()) as i\n                     from table(generator(\n                                rowcount =>3000\n                                )\n                         )\n                  )\n         WHERE i <= (DATE_PART('year',CURRENT_DATE) - DATE_PART('year','2014-10-01'::DATE)) * 12 +\n                    (DATE_PART('month',CURRENT_DATE) - DATE_PART('month','2014-10-01'::DATE)) + 1\n         ),\n      agg_spend AS (\n         SELECT paid_channel_name\n              , month\n              , utm_source_1\n              , utm_source_2\n              , spend_per_acquisition\n         FROM aggregate_spending a\n         INNER JOIN months b ON b.month >= a.start_date AND b.month < a.end_date\n         ),\n      all_spend AS (\n         SELECT *\n         FROM cpa_spends\n         UNION ALL\n         SELECT *\n         FROM cpl_spends\n         UNION ALL\n         SELECT *\n         FROM agg_spend\n         ),\n      invites_count AS (\n            SELECT u.inviting_user_id\n            , count(*) AS number_invites_sent\n            ,sum(case\n                  when a.initial_transfer_posted_date IS NOT NULL then 1\n                  else 0 end) as num_funded_referrals\n            FROM web_db.user_signup u\n               left join bi.dt_accounts a on u.invited_user_id = a.user_id\n                                             and a.account_type = 'Checking'\n            GROUP BY u.inviting_user_id\n         ),\n      cte_smart_limit AS (\n         SELECT DISTINCT user_id\n         FROM web_db.user_product_application\n         WHERE is_smart_limit = TRUE\n         )\n\n   SELECT distinct u.*\n        , utm_source_clean\n        , utm_channel_type\n        , utm_channel_grouping\n        , spend_per_acquisition AS marketing_cost_per_user\n        , most_current_nps_score\n        , most_current_nps_survey_date\n        , CASE WHEN f.chargeoff_reason IS NOT NULL OR sum.chargeoff_reason IS NOT NULL THEN TRUE\n               ELSE FALSE\n               END AS is_fraud_or_chargeoff\n        , coalesce(sum.chargeoff_reason,f.chargeoff_reason) AS fraud_or_chargeoff_type\n        , sum.total_amount_charged_off\n        , sum.hard_loss_charge_off\n        , sum.fees_charged_off\n        , invites_count.number_invites_sent\n        , invites_count.num_funded_referrals\n        , CASE WHEN csl.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS is_smart_limit\n        , min_payment_account_linked_date AS external_bank_account_connected_date\n        , case when tcle.email is not null or tclui.user_id is not null\n               then true else false end as has_credit_lead\n        , case when upa_cred.USER_ID is not null\n               then true else false end as has_credit_product_application\n        , cifd.cma_initiated_funding_date\n   FROM users u\n\n   LEFT JOIN invites_count ON invites_count.inviting_user_id = u.user_id\n   LEFT JOIN cte_smart_limit csl ON csl.user_id = u.user_id\n   LEFT JOIN all_spend s ON (u.utm_source = s.utm_source_1 OR u.utm_source = s.utm_source_2) AND\n                            CASE WHEN total_accounts_opened > 0 THEN date_trunc('month',u.lead_arrival_date) :: DATE\n                                 ELSE NULL\n                                 END = s.lead_arrival_month\n\n   LEFT JOIN (\n    SELECT\n      a.email,\n      a.pull_date :: DATE AS most_current_nps_survey_date,\n      a.nps_rating        AS most_current_nps_score\n    FROM dataops_ace_db.nps_survey_candidate a\n      INNER JOIN (\n         SELECT\n           email,\n           max(pull_date) AS max_pull_date\n         FROM dataops_ace_db.nps_survey_candidate\n         GROUP BY email\n       ) b\n      ON a.email = b.email AND a.pull_date = b.max_pull_date\n     AND zendesk_nps_survey_id IS NOT NULL\n    ) nps ON u.user_email = nps.email\n\n   LEFT JOIN web_db.dt_input_fraud_users f ON u.user_email = f.email\n\n   LEFT JOIN (\n      SELECT user_id\n           , is_charged_off\n           , chargeoff_reason\n           , total_amount_charged_off\n           , hard_loss_charge_off\n           , fees_charged_off\n      FROM bi.dt_accounts\n      WHERE account_type = 'Checking'\n      ) sum ON sum.user_id = u.user_id\n\n   LEFT JOIN web_db.dt_external_user_ids e ON e.user_id = u.user_id\n\n   LEFT JOIN web_db.dt_utm_mapping m ON m.utm_source = u.utm_source\n\n   LEFT JOIN (\n      SELECT user_id\n           , min(payment_account_linked_date) min_payment_account_linked_date\n      FROM ush.dt_banks\n      WHERE is_verified = TRUE\n      and IS_CHECKING_ACCOUNT = FALSE\n      GROUP BY user_id\n      ) payment_account_link_date ON payment_account_link_date.user_id = u.user_id\n\n   LEFT JOIN tmp_credit_lead_email tcle on lower(u.user_email) = tcle.email\n   LEFT JOIN tmp_credit_lead_user_id tclui on u.user_id = tclui.user_id\n   LEFT JOIN (select distinct user_id\n              from WEB_DB.USER_PRODUCT_APPLICATION\n              where PRODUCT_ID = 8) upa_cred on u.user_id = upa_cred.USER_ID\n   LEFT JOIN etl.cma_initiated_funding_date cifd on u.user_id = cifd.USER_ID\n\n   );\n\n--create the non-credit version of dt_users\ndrop table if exists ush.dt_users;\ncreate table ush.dt_users as\nselect u.*\nfrom etl.dt_users_ush u\n-- exclude pyc-lite *only* users\nLEFT JOIN tmp_pyc_lite_only plo ON u.USER_ID = plo.USER_ID\nWHERE plo.USER_ID is null\n--keep credit leads in other non-credit products; remove credit only leads\nand (u.has_credit_lead = false\nor u.initial_product_selected != 'Credit'\nor (u.has_credit_lead = true\n    and u.user_id in (select user_id from WEB_DB.USER_PRODUCT_APPLICATION where PRODUCT_ID not in (7,8))))\n;\n\n\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958391":{"id":2958391,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-1472,"y":-416,"width":32,"height":32,"inputConnectorIDs":[2958352],"outputSuccessConnectorIDs":[2958355],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"leads/users"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse dev;\n\ndrop table if exists tmp_has_account;\ncreate temp table tmp_has_account as\nselect a.USER_ID\nfrom WEB_DB.USER_ACCOUNT a\njoin WEB_DB.DEPOSITORY b on a.ACCOUNT_ID = b.ACCOUNT_ID\nwhere INCEPTION_DATE is not null\nunion\nselect a.USER_ID\nfrom WEB_DB.USER_ACCOUNT a\njoin WEB_DB.INVESTMENT b on a.ACCOUNT_ID = b.ACCOUNT_ID\nwhere INCEPTION_DATE is not null\nunion\nselect CREDIT_USERS.USER_ID\nfrom CREDIT_ACCOUNT_MANAGEMENT.CREDIT_USERS;\n\ndrop table if exists app;\ncreate temp table app as\n  SELECT user_id\n  FROM web_db.user_product_application\n  WHERE account_type_id IN (2,3)\n  GROUP BY 1;\n\ndrop table if exists user_profile;\ncreate temp table user_profile as\n    select USER_ID\n    from WEB_DB.USER_PROFILE\n    group by 1;\n\ndrop table if exists waitlist_emails;\ncreate temp table waitlist_emails as\n    select replace(lower(trim(email)),'​','') as email\n    from WEB_DB.WAIT_LIST_USER\n    union\n    select replace(lower(trim(email)),'​','')\n    from WEB_DB.PRODUCT_WAITLIST\n    union\n    select replace(lower(trim(email)),'​','')\n    from WEB_DB.USER_INVITATION\n    union\n    select replace(lower(trim(email)),'​','')\n    from SEGMENT_EVENTS.PROD_SEGMENT_JS.EMAIL_LEAD_SUBMITTED\n    where EMAIL is not null\n    union\n    select replace(lower(trim(email)),'​','')\n    from SEGMENT_EVENTS.PROD_SEGMENT_JS.USER_CREDENTIALS_SUBMITTED\n    where EMAIL is not null;\n\ndrop table if exists email;\ncreate temp table email as\n    select replace(lower(trim(email)),'​','') as email,\n           user_id,\n           IS_VALIDATED,\n           row_number() over (partition by user_id order by is_primary desc,\n                                                            last_updated desc) as rn\n    from web_db.user_email;\n\ndrop table if exists segment;\ncreate temp table segment as\n    select replace(lower(trim(email)),'​','') as email,\n           replace(USER_ID,'-','') as UUID\n    from SEGMENT_EVENTS.PROD_SEGMENT_JS.EMAIL_LEAD_SUBMITTED a\n    where USER_ID is not null\n    group by 1,2\n    union\n    select replace(lower(trim(email)),'​','') as email,\n           replace(USER_ID,'-','') as UUID\n    from SEGMENT_EVENTS.PROD_SEGMENT_JS.USER_CREDENTIALS_SUBMITTED a\n    where USER_ID is not null\n    group by 1,2;\n\n--builds a reference table for all email leads, matching them to\n--primary email and user_id when available\ndrop table if exists ush.EMAIL_LEAD_REFERENCE_STAGING;\ncreate table ush.EMAIL_LEAD_REFERENCE_STAGING as\n-- with app as (\n--   SELECT user_id\n--   FROM web_db.user_product_application\n--   WHERE account_type_id IN (2,3)\n--   GROUP BY 1\n-- )\n-- , user_profile as (\n--     select USER_ID\n--     from WEB_DB.USER_PROFILE\n--     group by 1\n-- )\n-- , waitlist_emails as (\n--     select replace(lower(trim(email)),'​','') as email\n--     from WEB_DB.WAIT_LIST_USER\n--     union\n--     select replace(lower(trim(email)),'​','')\n--     from WEB_DB.PRODUCT_WAITLIST\n--     union\n--     select replace(lower(trim(email)),'​','')\n--     from WEB_DB.USER_INVITATION\n--     union\n--     select replace(lower(trim(email)),'​','')\n--     from SEGMENT_EVENTS.PROD_SEGMENT_JS.EMAIL_LEAD_SUBMITTED\n--     where EMAIL is not null\n--     union\n--     select replace(lower(trim(email)),'​','')\n--     from SEGMENT_EVENTS.PROD_SEGMENT_JS.USER_CREDENTIALS_SUBMITTED\n--     where EMAIL is not null\n-- ) --select count(*) from waitlist_emails\n-- , email as (\n--     select replace(lower(trim(email)),'​','') as email,\n--            user_id,\n--            IS_VALIDATED,\n--            row_number() over (partition by user_id order by is_primary desc,\n--                                                             last_updated desc) as rn\n--     from web_db.user_email\n-- )\n-- , segment as (\n--     select replace(lower(trim(email)),'​','') as email,\n--            replace(USER_ID,'-','') as UUID\n--     from SEGMENT_EVENTS.PROD_SEGMENT_JS.EMAIL_LEAD_SUBMITTED a\n--     where USER_ID is not null\n--     group by 1,2\n--     union\n--     select replace(lower(trim(email)),'​','') as email,\n--            replace(USER_ID,'-','') as UUID\n--     from SEGMENT_EVENTS.PROD_SEGMENT_JS.USER_CREDENTIALS_SUBMITTED a\n--     where USER_ID is not null\n--     group by 1,2\n--     --note: the following tables do not have the email column\n--     --SEGMENT_EVENTS.PROD_SEGMENT_JS.BANK_ACCOUNT_LINKED\n--     --SEGMENT_EVENTS.PROD_SEGMENT_JS.PRODUCT_APPLICATION_SUBMITTED\n-- )\nwith segment_user as (\n    select s.email, u.id as user_id\n    from segment s\n    join WEB_DB._USER u on s.UUID = u.UUID\n)\n, user_data as (\n    --matches emails to user_id based purely on an email match\n    select wl.EMAIL,\n           ue2.user_id,\n           case when app.USER_ID is not null then true else false end as has_applied_1,\n           case when ua.USER_ID is not null then true else false end as has_account_1,\n           case when up.USER_ID is not null then true else false end as has_profile_1,\n           row_number() over (partition by wl.email order by has_account_1 desc nulls last,\n                                                             has_applied_1 desc nulls last,\n                                                             has_profile_1 desc nulls last,\n                                                             u.ENABLED desc nulls last,\n                                                             u.IS_IDENTITY_VERIFIED desc nulls last,\n                                                             u.LAST_LOGIN desc nulls last,\n                                                             ue2.IS_VALIDATED desc nulls last) as result_rn\n    from waitlist_emails wl\n    JOIN email ue2 ON wl.email = ue2.email\n    left join app on ue2.USER_ID = app.USER_ID\n    left join tmp_has_account ua on ue2.USER_ID = ua.USER_ID\n    left join WEB_DB._USER u on ue2.USER_ID = u.ID\n    left join user_profile up on ue2.USER_ID = up.USER_ID\n) --select * from user_data where email in ('maciei9@yahoo.com','kakelee@rocketmail.com')\n, user_data_alternate as (\n    --matches emails to user_id via user invitation/signup process\n    select wl.EMAIL,\n           c.INVITED_USER_ID as user_id,\n           case when app.USER_ID is not null then true else false end as has_applied,\n           case when ua.USER_ID is not null then true else false end as has_account,\n           case when up.USER_ID is not null then true else false end as has_profile,\n           row_number() over (partition by wl.email order by has_account desc nulls last,\n                                                             has_applied desc nulls last,\n                                                             has_profile desc nulls last,\n                                                             u.ENABLED desc nulls last,\n                                                             u.IS_IDENTITY_VERIFIED desc nulls last,\n                                                             u.LAST_LOGIN desc nulls last,\n                                                             ue.IS_VALIDATED desc nulls last,\n                                                             ui.date_created nulls last) as result_rn\n    from waitlist_emails wl\n    join WEB_DB.USER_INVITATION ui on wl.EMAIL = lower(ui.EMAIL)\n    join WEB_DB.USER_SIGNUP c on ui.ID = c.USER_INVITATION_ID\n    left join app on c.INVITED_USER_ID = app.USER_ID\n    left join tmp_has_account ua on c.INVITED_USER_ID = ua.USER_ID\n    left join WEB_DB._USER u on c.INVITED_USER_ID = u.ID\n    left join user_profile up on c.INVITED_USER_ID = up.USER_ID\n    left JOIN email ue ON c.INVITED_USER_ID = ue.user_id AND ue.rn = 1\n) --select * from user_data_alternate where email = 'ridinsolo256@gmail.com'--where user_id in (274008,285925)\n, user_data_segment as (\n    --matches via segment user_id\n    --this is a 3rd attempt to get a user_id\n    select wl.EMAIL,\n           su.user_id,\n           case when app.USER_ID is not null then true else false end as has_applied_2,\n           case when ua.USER_ID is not null then true else false end as has_account_2,\n           case when up.USER_ID is not null then true else false end as has_profile_2,\n           row_number() over (partition by wl.email order by has_account_2 desc nulls last,\n                                                             has_applied_2 desc nulls last,\n                                                             has_profile_2 desc nulls last,\n                                                             u.ENABLED desc nulls last,\n                                                             u.IS_IDENTITY_VERIFIED desc nulls last,\n                                                             u.LAST_LOGIN desc nulls last,\n                                                             ue.IS_VALIDATED desc nulls last) as result_rn\n    from waitlist_emails wl\n    JOIN segment_user su ON wl.email = su.email\n    left join app on su.USER_ID = app.USER_ID\n    left join tmp_has_account ua on su.USER_ID = ua.USER_ID\n    left join WEB_DB._USER u on su.USER_ID = u.ID\n    left join user_profile up on su.USER_ID = up.USER_ID\n    left JOIN email ue ON su.USER_ID = ue.user_id AND ue.rn = 1\n)\n, list as (\n    --brings all emails from wait list/invite data into one list\n    --even the ones that didn't sign up (that's why left joins are used)\n    --if the email didn't sign up, then we'll just use the wait list email\n    select w.EMAIL,\n           coalesce(e.EMAIL, e2.email, e3.email, w.email) as primary_email,\n           coalesce(u.user_id, ua.user_id, uds.user_id) as user_id,\n           e.email as email_1, e2.email as email_2, e3.email as email_3, w.email as email_4,\n           u.user_id as user_1, ua.user_id as user_2, uds.user_id as user_3\n    from waitlist_emails w\n    left join user_data u on w.EMAIL = u.EMAIL and u.result_rn = 1\n    left join email e on u.user_id = e.USER_ID and e.rn = 1\n    left join user_data_alternate ua on w.email = ua.email and ua.result_rn = 1\n    left join email e2 on ua.USER_ID = e2.USER_ID and e2.rn = 1\n    left join user_data_segment uds on w.email = uds.email and uds.result_rn = 1\n    left join email e3 on uds.USER_ID = e3.USER_ID and e3.rn = 1\n)\n, dupe_primary_email as (\n    --primary_email's with more than one user_id\n    select primary_email\n    from list\n    group by 1\n    having count(distinct user_id) > 1\n) --select * from dupe_primary_email\n, dupe_primary_email_choice as (\n    --decide which user_id to go with\n    select l.*,\n           case when app.USER_ID is not null then true else false end as has_applied,\n           case when ua.USER_ID is not null then true else false end as has_account,\n           case when up.USER_ID is not null then true else false end as has_profile,\n           case when e.email is not null then true else false end as has_email,\n           row_number() over (partition by l.primary_email\n                              order by has_account desc nulls last,\n                                       has_applied desc nulls last,\n                                       has_profile desc nulls last,\n                                       has_email desc nulls last,\n                                       u.ENABLED desc nulls last,\n                                       u.IS_IDENTITY_VERIFIED desc nulls last,\n                                       u.LAST_LOGIN desc nulls last) as rn\n    from dupe_primary_email d\n    join list l on d.primary_email = l.primary_email\n    left join app on l.USER_ID = app.USER_ID\n    left join tmp_has_account ua on l.USER_ID = ua.USER_ID\n    left join WEB_DB._USER u on l.USER_ID = u.ID\n    left join user_profile up on l.user_id = up.USER_ID\n    left join email e on l.user_id = e.USER_ID and e.rn = 1\n) --select * from dupe_primary_email_choice where user_id in (200227,7346679)\n--final list, taking care of dupe primary emails\nselect l.email,\n       l.primary_email,\n       coalesce(d.user_id, l.user_id) as user_id,\n       ifnull(d.rn,1) as rn\nfrom list l\nleft join dupe_primary_email_choice d on l.primary_email = d.primary_email;\n\n--this table will be used to exclude duplicate users from dt_users\ndrop table if exists ush.EMAIL_LEAD_REFERENCE_DUPLICATE_USER_ID;\ncreate table ush.EMAIL_LEAD_REFERENCE_DUPLICATE_USER_ID as\nselect distinct a.user_id as user_id_exclude, b.USER_ID as user_id_primary,\n                'share primary email'::varchar(500) as reason_for_duplicate\nfrom ush.EMAIL_LEAD_REFERENCE_STAGING a\njoin ush.EMAIL_LEAD_REFERENCE_STAGING b on a.PRIMARY_EMAIL = b.PRIMARY_EMAIL\nwhere a.rn > 1\nand b.rn = 1;\n\ndrop table if exists ush.EMAIL_LEAD_REFERENCE;\ncreate table ush.EMAIL_LEAD_REFERENCE as\nwith dupe_user_id as (\n    --duplicate user_id with more than one email\n    --what they all seem to have in common: not in web_db.user_email\n    select USER_ID\n    from ush.EMAIL_LEAD_REFERENCE_STAGING\n    where rn = 1\n    group by 1\n    having count(distinct PRIMARY_EMAIL) > 1\n)\n, dupe_user_id_choice as (\n    --decide which email to go with\n    --priority goes to the email that went through the sign up process\n    select l.*,\n           case when l.PRIMARY_EMAIL = ui.EMAIL then 1 else 2 end as sign_up_match,\n           ui.CURRENT_SIGNUPS,\n           row_number() over (partition by l.USER_ID\n                              order by sign_up_match, ui.CURRENT_SIGNUPS desc) as rn_dupe\n    from dupe_user_id d\n    join ush.EMAIL_LEAD_REFERENCE_STAGING l on d.USER_ID = l.USER_ID\n    left join WEB_DB.USER_INVITATION ui on l.PRIMARY_EMAIL = ui.EMAIL\n    left join WEB_DB.USER_SIGNUP u on ui.id = u.USER_INVITATION_ID\n    where l.rn = 1\n)\nselect a.email,\n       ifnull(b.PRIMARY_EMAIL, a.primary_email) as primary_email,\n       a.user_id,\n       c.UUID\nfrom ush.EMAIL_LEAD_REFERENCE_STAGING a\nleft join dupe_user_id_choice b on a.USER_ID = b.USER_ID and b.rn_dupe = 1\nleft join WEB_DB._USER c on a.USER_ID = c.ID\nwhere a.rn = 1\nand a.EMAIL is not null;\n\n\n--add display_name duplicates to ush.EMAIL_LEAD_REFERENCE_DUPLICATE_USER_ID\n--These are records in _user where display_name is an email address and\n--it repeats across multiple records, many of which are incomplete sign-ups.\n--Many had been coming into dt_users with no name or email. This will be used\n--to match them to complete versions of their records when possible.\ndrop table if exists tmp_display_name_duplicates;\ncreate temp table tmp_display_name_duplicates as\nwith a as (\n    select a.id as user_id,\n           a.DISPLAY_NAME,\n           a.ENABLED,\n           a.IS_SIGNUP_COMPLETE,\n           case when c.USER_ID is not null then TRUE else FALSE end as has_profile,\n           case when b.EMAIL is not null then TRUE else FALSE end as has_email,\n           a.DATE_CREATED,\n           a.LAST_LOGIN,\n           a.IS_IDENTITY_VERIFIED\n    from WEB_DB._USER a\n    left join WEB_DB.USER_EMAIL b on a.id = b.USER_ID\n    left join WEB_DB.USER_PROFILE c on a.id = c.USER_ID\n    where a.DISPLAY_NAME like '%@%'\n)\n, dupe as (\n    select DISPLAY_NAME, count(*)\n    from a\n    group by 1\n    having count(*) > 1\n)\nselect a.*,\n       row_number() over (partition by a.DISPLAY_NAME order by has_email desc nulls last,\n                                                               has_profile desc nulls last,\n                                                               IS_SIGNUP_COMPLETE desc nulls last,\n                                                               ENABLED desc nulls last,\n                                                               LAST_LOGIN desc nulls last) rn\nfrom dupe d\njoin a on d.DISPLAY_NAME = a.DISPLAY_NAME\norder by a.DISPLAY_NAME, a.user_id;\n\ninsert into ush.EMAIL_LEAD_REFERENCE_DUPLICATE_USER_ID\n(USER_ID_EXCLUDE, USER_ID_PRIMARY, REASON_FOR_DUPLICATE)\nselect distinct a.user_id, b.user_id, 'display_name in web_db._user duplicate'\nfrom tmp_display_name_duplicates a\njoin tmp_display_name_duplicates b on a.DISPLAY_NAME = b.DISPLAY_NAME\nleft join ush.EMAIL_LEAD_REFERENCE_DUPLICATE_USER_ID c on a.user_id = c.USER_ID_EXCLUDE\nwhere a.rn > 1\nand b.rn = 1\nand c.USER_ID_EXCLUDE is null;\n\n\n--stage initial recordset for user_id_reference\ndrop table if exists ush.user_id_reference_staging;\ncreate table ush.user_id_reference_staging as\n-- with app as (\n--   SELECT user_id\n--   FROM web_db.user_product_application\n--   WHERE account_type_id IN (2,3)\n--   GROUP BY 1\n-- )\n-- , user_profile as (\n--     select USER_ID\n--     from WEB_DB.USER_PROFILE\n--     group by 1\n-- )\n-- , email as (\n--     select replace(lower(trim(email)),'​','') as email,\n--            user_id,\n--            IS_VALIDATED,\n--            row_number() over (partition by user_id order by is_primary desc,\n--                                                             last_updated desc) as rn\n--     from web_db.user_email\n-- )\nwith list as (\n--reassign users in EMAIL_LEAD_REFERENCE_DUPLICATE_USER_ID to primary\n    select distinct\n           u.ID as user_id,\n           e.USER_ID_PRIMARY,\n           lower(ep1.email) as email,\n           lower(ep2.email) as email_primary,\n           u.UUID,\n           u2.UUID as UUID_PRIMARY,\n           lower(trim(u.DISPLAY_NAME)) as DISPLAY_NAME\n    from WEB_DB._USER u\n    left join ush.EMAIL_LEAD_REFERENCE_DUPLICATE_USER_ID e on u.ID = e.USER_ID_EXCLUDE\n    left join WEB_DB._USER u2 on e.USER_ID_PRIMARY = u2.ID\n    left join email ep1 on u.ID = ep1.USER_ID and ep1.rn = 1\n    left join email ep2 on e.USER_ID_PRIMARY = ep2.USER_ID and ep2.rn = 1\n)\n, list2 as (\n--use EMAIL_LEAD_REFERENCE to add email where it's missing\n    select\n        --distinct\n        l.user_id,\n        l.user_id_primary,\n        case when l.email is null then e.PRIMARY_EMAIL else l.email end as email,\n        l.email_primary,\n        l.UUID,\n        l.UUID_PRIMARY,\n        l.DISPLAY_NAME\n    from list l\n    left join (select PRIMARY_EMAIL, user_id\n               from ush.EMAIL_LEAD_REFERENCE\n               group by 1,2 ) e on l.user_id = e.USER_ID\n)\n, dupe_email as (\n    --list of emails that are duplicated\n    select email\n    from list2\n    where email is not null\n    and email_primary is null\n    group by 1\n    having count(*) > 1\n) --select * from dupe_email\n, dupe_email_choice as (\n    --decide which user_id to go with\n    select l.*,\n           case when app.USER_ID is not null then true else false end as has_applied,\n           case when ua.USER_ID is not null then true else false end as has_account,\n           case when up.USER_ID is not null then true else false end as has_profile,\n           row_number() over (partition by l.email\n                              order by has_account desc nulls last,\n                                       has_applied desc nulls last,\n                                       has_profile desc nulls last,\n                                       u.ENABLED desc nulls last,\n                                       u.IS_IDENTITY_VERIFIED desc nulls last,\n                                       u.LAST_LOGIN desc nulls last) as rn\n    from dupe_email d\n    join list2 l on d.email = l.email\n    left join app on l.USER_ID = app.USER_ID\n    left join tmp_has_account ua on l.USER_ID = ua.USER_ID\n    left join WEB_DB._USER u on l.USER_ID = u.ID\n    left join user_profile up on l.user_id = up.USER_ID\n)\n--final staging list, taking care of dupe emails\nselect l.user_id,\n       case when l.user_id != d.USER_ID then d.USER_ID else l.USER_ID_PRIMARY end as USER_ID_PRIMARY,\n       l.email,\n       case when l.user_id != d.USER_ID then d.EMAIL else l.email_primary end as email_primary,\n       l.UUID,\n       case when l.user_id != d.USER_ID then d.UUID else l.UUID_PRIMARY end as UUID_PRIMARY,\n       l.DISPLAY_NAME\nfrom list2 l\nleft join dupe_email_choice d on l.email = d.email and d.rn = 1;\n\n-- select * from ush.user_id_reference_staging where user_id in (6166319,1553569)\n\n--create user_id_reference table\ndrop table if exists ush.user_id_reference;\ncreate table ush.user_id_reference as\nwith display_name_fix as (\n--records with no email but display_name matches another record that\n--has an email. These are likely people who didn't complete the sign\n--up process, leaving an incomplete record that they later completed.\n--This will match them to the complete record.\n    select a.USER_ID,\n           ifnull(b.USER_ID_PRIMARY,b.user_id) as user_id_primary,\n           ifnull(b.EMAIL_PRIMARY,b.email) as email_primary,\n           ifnull(b.UUID_PRIMARY,b.uuid) as uuid_primary\n    from ush.user_id_reference_staging a\n    left join ush.user_id_reference_staging b on a.display_name = b.EMAIL\n    where a.EMAIL is null\n    and b.EMAIL is not null\n    ----and a.user_id_primary is null\n    ----and b.user_id_primary is null\n    and a.USER_ID != b.USER_ID\n    and a.display_name like '%@%'\n)\n, list as (\n    select\n            l.user_id,\n            case when e.USER_ID is not null then e.user_id_primary else l.user_id_primary end as USER_ID_PRIMARY,\n            l.email,\n            case when e.USER_ID is not null then e.email_primary else l.email_primary end as email_primary,\n            l.UUID,\n            case when e.USER_ID is not null then e.uuid_primary else l.uuid_primary end as UUID_PRIMARY,\n            l.DISPLAY_NAME\n    from ush.user_id_reference_staging l\n    left join display_name_fix e on l.user_id = e.USER_ID\n)\n, sign_up_fix as (\n--Records not caught by any of the above code, and the sign up process indicates\n--the record belongs to a different user_id. They haven't been matched to\n--a primary user_id yet, and their user_id is not in EMAIL_LEAD_REFERENCE.\n--Some of these are also remaining display_name only records that can use this\n--logic to be matched to the primary user.\n--Also excluding any user_id's attached to accounts.\n    select u.user_id, e.PRIMARY_EMAIL, e.USER_ID as user_id_primary,\n    e.UUID as UUID_PRIMARY\n    from list u\n    join WEB_DB.USER_SIGNUP us on u.USER_ID = us.INVITED_USER_ID\n    join WEB_DB.USER_INVITATION ui on us.USER_INVITATION_ID = ui.ID\n    join ush.EMAIL_LEAD_REFERENCE e on ui.EMAIL = e.EMAIL\n    left join ush.EMAIL_LEAD_REFERENCE e2 on u.USER_ID = e2.USER_ID\n    left join (\n                select USER_INVITATION_ID\n                from WEB_DB.USER_SIGNUP\n                group by 1\n                having count(*) > 1\n        ) multiple_invite on us.USER_INVITATION_ID = multiple_invite.USER_INVITATION_ID\n    left join tmp_has_account ha on u.USER_ID = ha.USER_ID\n    where u.email_primary is null\n    and e2.USER_ID is null\n    --can only use sign-up records that lead to non-duplicated invite email\n    and multiple_invite.USER_INVITATION_ID is null\n    and ha.USER_ID is null\n) --select * from sign_up_fix where user_id in (6166319,1553569)\n, result as (\n    select\n            l.user_id,\n            case when e.USER_ID is not null then e.user_id_primary else l.user_id_primary end as USER_ID_PRIMARY,\n            l.email,\n            case when e.USER_ID is not null then e.PRIMARY_EMAIL else l.email_primary end as email_primary,\n            l.UUID,\n            case when e.USER_ID is not null then e.uuid_primary else l.uuid_primary end as UUID_PRIMARY,\n            l.DISPLAY_NAME\n    from list l\n    left join sign_up_fix e on l.user_id = e.USER_ID\n) --select * from result where user_id in (6166319,1553569)\nselect\n    USER_ID,\n    ifnull(USER_ID_PRIMARY,USER_ID) as USER_ID_PRIMARY,\n    EMAIL,\n    ifnull(email_primary,EMAIL) as email_primary,\n    UUID,\n    ifnull(UUID_PRIMARY,UUID) as UUID_PRIMARY,\n    DISPLAY_NAME\nfrom result;\n\n\n\n--resolve user_id/email conflicts between tables\n--(1) differences based on email join\nupdate ush.EMAIL_LEAD_REFERENCE\nset USER_ID = u.USER_ID_PRIMARY,\n    UUID = u.UUID_PRIMARY\nfrom ush.USER_ID_REFERENCE u\nwhere ush.EMAIL_LEAD_REFERENCE.PRIMARY_EMAIL = u.EMAIL_PRIMARY\nand (ush.EMAIL_LEAD_REFERENCE.USER_ID != u.USER_ID_PRIMARY\n     or ush.EMAIL_LEAD_REFERENCE.USER_ID is null);\n--(2) differences based on user_id join\nupdate ush.EMAIL_LEAD_REFERENCE\nset USER_ID = u.USER_ID_PRIMARY,\n    UUID = u.UUID_PRIMARY,\n    PRIMARY_EMAIL = u.EMAIL_PRIMARY\nfrom ush.USER_ID_REFERENCE u\nwhere ush.EMAIL_LEAD_REFERENCE.USER_ID = u.USER_ID\nand u.USER_ID != u.USER_ID_PRIMARY\nand ush.EMAIL_LEAD_REFERENCE.USER_ID != u.USER_ID_PRIMARY;\n--(3) fix records that have a USER_ID_PRIMARY that itself\n--has a different USER_ID_PRIMARY\nupdate ush.USER_ID_REFERENCE\nset USER_ID_PRIMARY = e.USER_ID_PRIMARY,\n    UUID_PRIMARY = e.UUID_PRIMARY,\n    EMAIL_PRIMARY = e.EMAIL_PRIMARY\nfrom (\n        select a.USER_ID, b.USER_ID_PRIMARY,\n               b.UUID_PRIMARY, b.EMAIL_PRIMARY\n        from ush.user_id_reference a\n        join ush.user_id_reference b on a.USER_ID_PRIMARY = b.USER_ID\n        where b.USER_ID_PRIMARY != b.USER_ID\n        and a.USER_ID != b.USER_ID\n     ) e\nwhere ush.USER_ID_REFERENCE.USER_ID = e.USER_ID;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958392":{"id":2958392,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-639,"y":-144,"width":32,"height":32,"inputConnectorIDs":[2958353],"outputSuccessConnectorIDs":[2958362],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SQL Script 6"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"update PROMOTIONS.THANK_YOU_PROGRAM\nset GALILEO_FILE_NAME = 'btrans_584_20220214_typ111147',\n    status = 'payment_successful',\n    GALILEO_RESPONSE_CODE = '0000',\n    UPDATED_AT = current_timestamp\nwhere batch_id = 'b6b6512c-419d-4fb7-81e1-8d9e8455bf8b';    "}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958393":{"id":2958393,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-736,"y":-144,"width":32,"height":32,"inputConnectorIDs":[2958366],"outputSuccessConnectorIDs":[2958353],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SQL Script 4"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop table if exists tmp_ty_program;\ncreate temp table tmp_ty_program as\nwith email_click as (\n    select lower(trim(replace(USER_ID,'-',''))) as segment_user_id,\n           lower(trim(EMAIL)) as email,\n           min(SENT_AT) as marketing_email_SENT_date\n    from SEGMENT_EVENTS.PROD_SEGMENT_ITERABLE.EMAIL_DELIVERED\n    where CAMPAIGN_ID = 3591687\n    group by 1,2\n)\n, dt_user as (\n    select *,\n           row_number() over (partition by user_email order by HAS_OPENED_ASPIRATION_ACCOUNT desc nulls last,\n                                                               HAS_STARTED_APPLICATION desc nulls last,\n                                                               HAS_ENTERED_CREDENTIALS desc nulls last) as rn\n    from bi.DT_USERS\n    where user_id is not null\n)\n, user_match as (\n    select ec.segment_user_id, ec.email,\n           ec.marketing_email_SENT_date,\n           coalesce(u.USER_ID, u2.USER_ID, u3.USER_ID) as user_id\n    from email_click ec\n    left join dt_user u on ec.segment_user_id = lower(u.EXTERNAL_USER_ID) and u.rn = 1\n    left join dt_user u2 on ec.segment_user_id = lower(u2.USER_EMAIL) and u2.rn = 1\n    left join dt_user u3 on ec.email = lower(u3.USER_EMAIL) and u3.rn = 1\n)\n, user_match_grouped as (\n    select USER_ID, min(email) as email,\n           convert_timezone('UTC','America/Los_Angeles',min(marketing_email_SENT_date)::timestamp)::date as marketing_email_SENT_date_pt,\n           min(segment_user_id) as segment_user_id\n    from user_match\n    group by 1\n)\n, result as (\n    select u.user_id, u.marketing_email_SENT_date_pt, u.email,\n           a.UNIQUE_ACCOUNT_ID, a.SPEND_GALILEO_PRN, a.SAVE_GALILEO_PRN,\n           'primary' as account_holder_type, segment_user_id\n    from user_match_grouped u\n    join bi.DT_ACCOUNTS a on u.user_id = a.USER_ID\n    where a.ACCOUNT_TYPE = 'Checking'\n    and a.TERMINATION_DATE is null\n    union\n    select u.user_id, u.marketing_email_SENT_date_pt, u.email,\n           a.UNIQUE_ACCOUNT_ID, a.JOINT_ACCOUNT_SECONDARY_SPEND_GALILEO_PRN, a.JOINT_ACCOUNT_SECONDARY_SAVE_GALILEO_PRN,\n           'secondary' as account_holder_type, segment_user_id\n    from user_match_grouped u\n    join bi.DT_ACCOUNTS a on u.user_id = a.JOINT_ACCOUNT_SECONDARY_USER_ID\n    where a.ACCOUNT_TYPE = 'Checking'\n    and a.TERMINATION_DATE is null\n)\nselect 'b6b6512c-419d-4fb7-81e1-8d9e8455bf8b' as batch_id,\n       user_id,\n       UNIQUE_ACCOUNT_ID,\n       email,\n       nvl(SPEND_GALILEO_PRN, SAVE_GALILEO_PRN) as prn,\n       marketing_email_SENT_date_pt as MKTG_EMAIL_DATE_PT,\n       current_timestamp as payment_date,\n       5 as payment_amount,\n       'ready_for_export' as status,\n       lpad(row_number() over (order by prn desc nulls last)::varchar,6,'0') as GALILEO_FILE_RECORD_NUMBER,\n       current_timestamp as CREATED_AT,\n       current_timestamp as UPDATED_AT\nfrom result r\nwhere marketing_email_SENT_date_pt between '2022-02-07' and '2022-02-13';\n\ninsert into PROMOTIONS.THANK_YOU_PROGRAM\n(BATCH_ID, USER_ID, UNIQUE_ACCOUNT_ID, EMAIL, PRN, MKTG_EMAIL_DATE_PT, PAYMENT_DATE, PAYMENT_AMOUNT, STATUS,\n GALILEO_FILE_RECORD_NUMBER, CREATED_AT, UPDATED_AT)\nselect  BATCH_ID, USER_ID, UNIQUE_ACCOUNT_ID, EMAIL, PRN, MKTG_EMAIL_DATE_PT, PAYMENT_DATE, PAYMENT_AMOUNT, STATUS,\n GALILEO_FILE_RECORD_NUMBER, CREATED_AT, UPDATED_AT\nfrom tmp_ty_program; "}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958394":{"id":2958394,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-1472,"y":-96,"width":32,"height":32,"inputConnectorIDs":[2958441],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"permissions 23"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"grant select on all tables in schema ush to data_engineering_group;\ngrant select on all tables in schema ush to data_science_analytics;\ngrant select on all tables in schema etl to data_engineering_group;\n\n\n/*\n--resolve user_id/email conflicts between tables\n--(1) differences based on email join\nupdate ush.EMAIL_LEAD_REFERENCE\nset USER_ID = u.USER_ID_PRIMARY,\n    UUID = u.UUID_PRIMARY\nfrom ush.USER_ID_REFERENCE u\nwhere ush.EMAIL_LEAD_REFERENCE.PRIMARY_EMAIL = u.EMAIL_PRIMARY\nand (ush.EMAIL_LEAD_REFERENCE.USER_ID != u.USER_ID_PRIMARY\n     or ush.EMAIL_LEAD_REFERENCE.USER_ID is null);\n--(2) differences based on user_id join\nupdate ush.EMAIL_LEAD_REFERENCE\nset USER_ID = u.USER_ID_PRIMARY,\n    UUID = u.UUID_PRIMARY,\n    PRIMARY_EMAIL = u.EMAIL_PRIMARY \nfrom ush.USER_ID_REFERENCE u\nwhere ush.EMAIL_LEAD_REFERENCE.USER_ID = u.USER_ID\nand u.USER_ID != u.USER_ID_PRIMARY\nand ush.EMAIL_LEAD_REFERENCE.USER_ID != u.USER_ID_PRIMARY;\n--(3) user_id_reference records missing email_primary\nupdate ush.USER_ID_REFERENCE\nset EMAIL_PRIMARY = e.PRIMARY_EMAIL \nfrom ush.EMAIL_LEAD_REFERENCE e\nwhere ush.USER_ID_REFERENCE.USER_ID_PRIMARY = e.USER_ID\nand ush.user_id_reference.EMAIL_PRIMARY is null;\n--(4) fix records that have a USER_ID_PRIMARY that itself \n--has a different USER_ID_PRIMARY\nupdate ush.USER_ID_REFERENCE\nset USER_ID_PRIMARY = e.USER_ID_PRIMARY,\n    UUID_PRIMARY = e.UUID_PRIMARY,\n    EMAIL_PRIMARY = e.EMAIL_PRIMARY \nfrom ( \n        select a.USER_ID, b.USER_ID_PRIMARY, \n               b.UUID_PRIMARY, b.EMAIL_PRIMARY\n        from ush.user_id_reference a\n        join ush.user_id_reference b on a.USER_ID_PRIMARY = b.USER_ID\n        where b.USER_ID_PRIMARY != b.USER_ID\n        and a.USER_ID != b.USER_ID\n     ) e\nwhere ush.USER_ID_REFERENCE.USER_ID = e.USER_ID;\n*/"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958395":{"id":2958395,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-567,"y":-140,"width":32,"height":32,"inputConnectorIDs":[2958362],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SQL Script 7"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--output\n\nuse warehouse looker;\n\ndrop table if exists tmp_promo_staging;\ncreate temp table tmp_promo_staging\n(\n  output_row varchar(2000)\n);\n\nCOPY INTO tmp_promo_staging (output_row)\nFROM (SELECT $1\n      FROM '@public.datateam/dump/sharris/btrans_584_20220214_typ111147.txt.out')\nFILE_FORMAT = PUBLIC.PLAIN_TEXT\nON_ERROR = SKIP_FILE;\n\n--remove header and trailer\ndelete from tmp_promo_staging\nwhere left(output_row,1) in ('H','T');\n\n\n\ndrop table if exists tmp_output;\ncreate temp table tmp_output as\n  select\n    substring(output_row,1,1) as record_type,\n    substring(output_row,2,6) as record_number,\n    substring(output_row,8,1) as account_id_type,\n    substring(output_row,9,50) as account_identifier,\n    substring(output_row,59,20) as transaction_identifier,\n    substring(output_row,79,4) as galileo_response_code\n  from tmp_promo_staging;\n\n-- delete from rdl.scholly_promotion_output\n-- where batch_id = '${batch_id}'\n-- and record_number in (select record_number from tmp_output);\n\ninsert into PROMOTIONS.THANK_YOU_PROGRAM_OUTPUT\n(\n    batch_id,\n    galileo_output_file_name,\n    record_type,\n    record_number,\n    account_id_type,\n    account_identifier,\n    transaction_identifier,\n    galileo_response_code\n)\nselect\n  'b6b6512c-419d-4fb7-81e1-8d9e8455bf8b',\n  'btrans_584_20220214_typ111147.txt.out',\n  record_type,\n  record_number,\n  account_id_type,\n  trim(account_identifier),\n  trim(transaction_identifier),\n  galileo_response_code\nfrom tmp_output;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958396":{"id":2958396,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-176,"y":-336,"width":32,"height":32,"inputConnectorIDs":[2958412],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dt_accounts_depository_exclusion"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/*\ncreate table etl.dt_accounts_depository_exclusion\n(\n  depository_id int not null\n);  \n\ngrant all on etl.dt_accounts_depository_exclusion to data_engineering_group;\n*/\ninsert into etl.dt_accounts_depository_exclusion\nselect 1966556"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958397":{"id":2958397,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-330,"y":-336,"width":32,"height":32,"inputConnectorIDs":[2958439],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958412],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"account daily incremental"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse looker;\n\nset timezone = 'America/Los_Angeles';\n\n\ndrop table if exists tmp_charge_off;\ncreate temp table tmp_charge_off as\nselect UNIQUE_ACCOUNT_ID,\n       min(TRANSACTION_DATE::date) as charge_off_date\nfrom bi.DT_DEPOSITORY_TRANSACTIONS\nwhere transaction_type in ('Charge Off','Charge Off Recovery')\nand AMOUNT > 0\ngroup by 1;\n\nDROP TABLE IF EXISTS ush.dt_summit_daily_fee_settings_tmp;\nCREATE TABLE ush.dt_summit_daily_fee_settings_tmp\nAS (\n  WITH\n  dates AS (\n    SELECT '2014-10-01'::DATE + i - 1 AS date\n    FROM (\n            select row_number() over(order by seq4()) as i\n            from table (\n                    generator(\n                            rowcount => 3000\n                        )\n                )\n           )\n    WHERE i <= CURRENT_DATE - '2014-10-01'::DATE + 1\n    ),\n  all_dep_dates AS (\n    SELECT a.unique_account_id\n      , COALESCE(a.galileo_id, a.radius_id) AS depository_id\n      , a.termination_date\n      , b.date\n    FROM bi.dt_accounts a\n    JOIN dates b ON b.date >= a.inception_date\n    WHERE a.inception_date IS NOT NULL\n    AND a.account_type = 'Checking'\n    ),\n  depository_fee_histories AS (\n    SELECT dta.unique_account_id\n      , dfh_g.fee_date\n      , dfh_g.fee_amount\n      , dfh_g.id\n    FROM web_db.depository_fee_history dfh_g\n    JOIN bi.dt_accounts dta ON (dta.galileo_id = dfh_g.depository_id)\n    UNION ALL\n    SELECT dta.unique_account_id\n      , dfh_r.fee_date as fee_date\n      , dfh_r.fee_amount\n      , dfh_r.id\n    FROM web_db.depository_fee_history dfh_r\n    JOIN bi.dt_accounts dta ON (dta.radius_id = dfh_r.depository_id)\n    ),\n  fee_history AS (\n    SELECT dfh.unique_account_id\n      , dfh.fee_date\n      , dfh.fee_amount\n    FROM (\n      SELECT dfh.unique_account_id\n        , dfh.fee_date\n        , MAX(dfh.id) AS max_id\n      FROM depository_fee_histories dfh\n      GROUP BY dfh.unique_account_id, dfh.fee_date\n      ) a\n    JOIN depository_fee_histories dfh ON a.max_id = dfh.id\n    ),\n  initial_fees AS (\n    SELECT b.unique_account_id\n      , min_date\n      , b.fee_amount AS initial_fee\n    FROM (\n      SELECT unique_account_id\n        , MIN(fee_date) AS min_date\n      FROM fee_history\n      GROUP BY 1\n      ) a\n    JOIN fee_history b ON (a.unique_account_id = b.unique_account_id AND a.min_date = b.fee_date)\n    )\n  SELECT foo.unique_account_id\n    , foo.date\n    , CASE WHEN foo.termination_date IS NULL OR foo.termination_date > foo.date\n      THEN COALESCE(CASE WHEN foo.date < min_date THEN initial_fee ELSE b.fee_amount END, 0)\n      ELSE 0 END AS fee_amount\n  FROM all_dep_dates foo\n  LEFT JOIN (\n    SELECT a.unique_account_id\n      , a.date\n      , MAX(b.fee_date) AS max_date\n    FROM all_dep_dates a\n    LEFT JOIN fee_history b ON a.unique_account_id = b.unique_account_id AND a.date >= b.fee_date\n    GROUP BY 1, 2\n    ) a ON foo.unique_account_id = a.unique_account_id AND foo.date = a.date\n  LEFT JOIN fee_history b ON a.unique_account_id = b.unique_account_id AND a.max_date = b.fee_date\n  LEFT JOIN initial_fees md ON md.unique_account_id = foo.unique_account_id\n);\n\nDROP TABLE IF EXISTS ush.dt_investment_daily_fee_settings_tmp;\nCREATE TABLE ush.dt_investment_daily_fee_settings_tmp\nAS (\n  WITH\n  dates AS (\n    SELECT '2014-10-01'::DATE + i - 1 AS date\n    FROM (\n            select row_number() over(order by seq4()) as i\n            from table (\n                    generator(\n                            rowcount => 3000\n                        )\n                )\n           )\n    WHERE i <= CURRENT_DATE - '2014-10-01'::DATE + 1\n    ),\n  all_inv_dates AS (\n    SELECT id AS investment_id\n      , date\n    FROM web_db.investment a\n    JOIN dates b ON b.date >= a.inception_date\n    WHERE inception_date IS NOT NULL\n    ),\n  fee_history AS (\n    SELECT ifh.investment_id\n      , ifh.fee_date::DATE as fee_date\n      , ifh.fee_pct\n    FROM (\n      SELECT investment_id\n        , fee_date::DATE as investment_fee_date\n\n        , max(id) AS max_id\n      FROM web_db.investment_fee_history\n      GROUP BY 1, 2\n      ) a\n    JOIN web_db.investment_fee_history ifh ON a.max_id = ifh.id AND ifh.investment_id = a.investment_id AND ifh.fee_date :: DATE = a.investment_fee_date :: DATE\n    ),\n  initial_fees AS (\n    SELECT b.investment_id\n      , min_date\n      , b.fee_pct AS initial_fee\n    FROM (\n      SELECT investment_id\n        , MIN(fee_date) AS min_date\n      FROM fee_history\n      GROUP BY 1) a\n    JOIN fee_history b ON a.investment_id = b.investment_id AND a.min_date = b.fee_date\n    )\n  SELECT 'i' || aid.investment_id AS unique_account_id\n    , aid.date\n    , CASE WHEN acc.termination_date IS NULL OR acc.termination_date > aid.date\n      THEN coalesce(CASE WHEN aid.date < min_date THEN initial_fee ELSE b.fee_pct END, 0)\n      ELSE 0 END AS fee_pct\n  FROM all_inv_dates aid\n  LEFT JOIN (\n    SELECT a.investment_id\n      , a.date\n      , max(b.fee_date) AS max_date\n    FROM all_inv_dates a\n    LEFT JOIN fee_history b ON a.investment_id = b.investment_id AND a.date >= b.fee_date\n    GROUP BY 1, 2\n    ) a ON a.investment_id = aid.investment_id AND a.date = aid.date\n  LEFT JOIN fee_history b ON aid.investment_id = b.investment_id AND a.max_date = b.fee_date\n  LEFT JOIN initial_fees md ON md.investment_id = a.investment_id\n  LEFT JOIN web_db.investment i ON i.id = b.investment_id\n  LEFT JOIN web_db.account acc ON acc.id = i.account_id\n);\n\n\nDROP TABLE IF EXISTS ush.dt_account_daily_fee_settings_tmp;\nCREATE TABLE ush.dt_account_daily_fee_settings_tmp\nAS (\n  SELECT a.unique_account_id\n    , a.date\n    , a.fee_amount AS monthly_fee_setting\n    , b.fee_amount AS previous_day_monthly_fee_setting\n    , NULL AS yearly_percent_setting\n    , NULL AS previous_day_yearly_percent_setting\n  FROM ush.dt_summit_daily_fee_settings_tmp a\n  LEFT JOIN ush.dt_summit_daily_fee_settings_tmp b ON a.unique_account_id = b.unique_account_id AND a.date = b.date + 1\n  UNION ALL\n  SELECT a.unique_account_id\n    , a.date\n    , NULL AS monthly_fee_setting\n    , NULL AS previous_day_monthly_fee_setting\n    , a.fee_pct AS yearly_percent_setting\n    , b.fee_pct AS previous_day_yearly_percent_setting\n  FROM ush.dt_investment_daily_fee_settings_tmp a\n  LEFT JOIN ush.dt_investment_daily_fee_settings_tmp b ON a.unique_account_id = b.unique_account_id AND a.date = b.date + 1\n);\n\n\nDROP TABLE IF EXISTS ush.dt_summit_daily_fee_settings_tmp;\nDROP TABLE IF EXISTS ush.dt_investment_daily_fee_settings_tmp;\n\n--insert any brand new accounts into etl.daily balances so they will be included in the table\ninsert into etl.DAILY_BALANCES\n(UNIQUE_ACCOUNT_ID, DATE, DAILY_BALANCE, ORIGINAL_BALANCE, SPEND_DAILY_BALANCE, SAVE_DAILY_BALANCE, HAS_SET_RECURRING_DEPOSIT)\nselect a.UNIQUE_ACCOUNT_ID,\n       INCEPTION_DATE::date as date,\n       0 as daily_balance,\n       0 as original_balance,\n       0 as spend_daily_balance,\n       0 as save_daily_balance,\n       false as has_set_recurring_deposit\nfrom bi.dt_accounts a\nleft join etl.DAILY_BALANCES b on a.UNIQUE_ACCOUNT_ID = b.UNIQUE_ACCOUNT_ID\nwhere b.UNIQUE_ACCOUNT_ID is null\nand a.INCEPTION_DATE is not null\nand a.ACCOUNT_TYPE = 'Checking';\n\nDROP TABLE IF EXISTS ush.dt_investment_daily_balances_tmp;\nCREATE TABLE ush.dt_investment_daily_balances_tmp\nAS (\n  WITH\n  dates AS (\n    SELECT '2014-10-01'::DATE + i - 1 AS date\n    FROM (\n            select row_number() over(order by seq4()) as i\n            from table (\n                    generator(\n                            rowcount => 3000\n                        )\n                )\n           )\n    WHERE i <= CURRENT_DATE - '2014-10-01'::DATE + 1\n    ),\n  investment_dates AS (\n    SELECT 'i' || i.id AS unique_account_id\n      , date\n    FROM web_db.investment i\n    JOIN dates ON dates.date >= inception_date\n    WHERE inception_date IS NOT NULL\n    )\n  SELECT ad.unique_account_id\n    , ad.date\n    , COALESCE(ip.current_value, LAG(ip.current_value) IGNORE NULLS OVER (PARTITION BY ad.unique_account_id ORDER BY ad.date)) AS current_value\n  FROM investment_dates ad\n  LEFT JOIN web_db.investment_position ip ON ad.unique_account_id = 'i' || ip.investment_id AND ad.date = DATEADD('hour', 10, convert_timezone('America/Los_Angeles',ip.position_date))::date\n);\n\nDROP TABLE IF EXISTS ush.dt_investment_daily_balances_tmp_2;\n\nCREATE TABLE ush.dt_investment_daily_balances_tmp_2\nAS (\n  WITH\n  min_posted_investment_dates AS (\n    SELECT unique_account_id\n      , MIN(date) AS min_date\n    FROM ush.dt_investment_daily_balances_tmp\n    WHERE current_value > 0\n    GROUP BY 1\n    ),\n  initial_investment_balances AS (\n    SELECT db.unique_account_id\n      , db.current_value AS initial_balance\n      , min_date\n    FROM min_posted_investment_dates a\n    JOIN ush.dt_investment_daily_balances_tmp db ON a.unique_account_id = db.unique_account_id AND a.min_date = db.date\n    )\n  SELECT a.unique_account_id\n    , a.date\n    , greatest(0, CASE WHEN date < min_date THEN initial_balance ELSE current_value END) AS daily_balance\n    , current_value AS original_balance\n  FROM ush.dt_investment_daily_balances_tmp a\n  LEFT JOIN initial_investment_balances b ON a.unique_account_id = b.unique_account_id\n);\n\n\nDROP TABLE IF EXISTS ush.dt_investment_daily_balances_tmp;\n\nDROP TABLE IF EXISTS ush.dt_investment_daily_balances_tmp_3;\nCREATE TABLE ush.dt_investment_daily_balances_tmp_3\nAS (\n  SELECT unique_account_id\n    , date\n    , daily_balance\n    , original_balance\n    , null::dec(18,2) AS spend_daily_balance\n    , null::dec(18,2) AS save_daily_balance\n    , max(flag::int)\n    OVER(PARTITION BY unique_account_id)::BOOLEAN AS has_set_recurring_deposit\n    FROM (\n      SELECT a.*\n        , CASE when b.unique_account_id IS NULL THEN FALSE ELSE TRUE END AS flag\n      FROM ush.dt_investment_daily_balances_tmp_2 a\n      LEFT JOIN (\n        SELECT 'i' || investment_id AS unique_account_id\n          , date_created :: date AS sb_setting_dt\n        FROM web_db.recurring_order_txn\n        GROUP BY 1, 2\n        ) b on a.unique_account_id = b.unique_account_id AND a.date = b.sb_setting_dt\n      ) a\n);\n\n\nDROP TABLE IF EXISTS ush.dt_investment_daily_balances_tmp_2;\n\nDROP TABLE IF EXISTS ush.dt_account_daily_data_1078;\nCREATE TABLE ush.dt_account_daily_data_1078\nAS (\n  WITH\n  billpay AS (\n    SELECT cp.date_created::DATE AS check_creation_date,\n      dta.unique_account_id,\n      SUM(cp.amount) AS daily_bill_pay_amount,\n      COUNT(*) AS daily_bill_pay_count\n    FROM web_db.check_payment cp\n    JOIN bi.dt_accounts dta ON (cp.user_id = dta.user_id)\n    WHERE cp.status = 6\n    GROUP BY 1, 2\n    ),\n  planet_protection_subscription as (\n    select pp.unique_account_id,\n           pp.date\n    from etl.DAILY_BALANCES pp\n    where exists(\n          select 1\n          from web_db.subscription s\n          join bi.dt_accounts a on s.account_id = a.galileo_account_id\n          where s.plan_group = 'planet-protection'\n            and s.billing_cycle_anchor::date <> s.current_period_end::date\n            and pp.unique_account_id = a.unique_account_id\n            and pp.date between s.billing_cycle_anchor::date and s.current_period_end::date\n        )\n    ),\n  transactions AS (\n    SELECT unique_account_id\n      , post_date\n      , sum(CASE WHEN transaction_type IN ('ACH Withdrawal', 'Coastal ACH Debit', 'Money Transfer') AND amount < 0 THEN amount ELSE 0 END) AS ach_withdrawal_amount\n      , min(CASE WHEN transaction_type IN ('ACH Withdrawal', 'Coastal ACH Debit', 'Money Transfer') AND amount < 0 THEN amount ELSE 0 END) AS largest_ach_withdrawal_amount\n      , sum(CASE WHEN transaction_type IN ('ACH Withdrawal', 'Coastal ACH Debit', 'Money Transfer') AND amount < 0 THEN 1 ELSE 0 END) AS ach_withdrawal_count\n      , sum(CASE WHEN transaction_type IN ('Debit Card - No PIN', 'Purchase', 'Unique Transactions') THEN amount ELSE 0 END) AS dbt_card_no_pin_amount\n      , min(CASE WHEN transaction_type IN ('Debit Card - No PIN', 'Purchase', 'Unique Transactions') THEN amount ELSE 0 END) AS largest_dbt_card_no_pin_amount\n      , sum(CASE WHEN transaction_type IN ('Debit Card - No PIN', 'Purchase', 'Unique Transactions') THEN 1 ELSE 0 END) AS dbt_card_no_pin_count\n      , sum(CASE WHEN transaction_type IN ('Interest','Interest Payment', 'Interest Posting', 'Interest Paid') THEN amount ELSE 0 END) AS interest_amount\n      , sum(CASE WHEN transaction_type IN ('Check Withdrawal', 'Bill Pay Check Payment', 'Bill Payment - Check', 'Convenience Check') THEN amount ELSE 0 END) AS check_withdrawal_amount\n      , min(CASE WHEN transaction_type IN ('Check Withdrawal', 'Bill Pay Check Payment', 'Bill Payment - Check', 'Convenience Check') THEN amount ELSE 0 END) AS largest_check_withdrawal_amount\n      , sum(CASE WHEN transaction_type IN ('Check Withdrawal', 'Bill Pay Check Payment', 'Bill Payment - Check', 'Convenience Check') THEN 1 ELSE 0 END) AS check_withdrawal_count\n      , sum(CASE WHEN transaction_type IN('Wire Transfer - Withdrawal', 'API funds transfer') AND amount < 0 THEN amount ELSE 0 END) AS wire_withdrawal_amount\n      , min(CASE WHEN transaction_type IN ('Wire Transfer - Withdrawal', 'API funds transfer') AND amount < 0 THEN amount ELSE 0 END) AS largest_wire_withdrawal_amount\n      , sum(CASE WHEN transaction_type IN ('Wire Transfer - Withdrawal', 'API funds transfer') AND amount < 0 THEN 1 ELSE 0 END) AS wire_withdrawal_count\n      , sum(CASE WHEN transaction_type IN ('Card to Card') THEN amount ELSE 0 END) as internal_transfer_deposit\n      , sum(CASE WHEN transaction_type in ('C2C - Customer Initiated') THEN amount ELSE 0 END) as internal_transfer_withdrawal\n      , sum(CASE WHEN transaction_type IN ('ATM Deposit', 'Money Transfer') AND amount > 0 THEN amount ELSE 0 END) AS atm_deposit_amount\n      , max(CASE WHEN transaction_type IN ('ATM Deposit', 'Money Transfer') AND amount > 0 THEN amount ELSE 0 END) AS largest_atm_deposit_amount\n      , sum(CASE WHEN transaction_type IN ('ATM Deposit', 'Money Transfer') AND amount > 0 THEN 1 ELSE 0 END) AS atm_deposit_count\n      , sum(CASE transaction_type WHEN 'ATM Withdrawal' THEN amount ELSE 0 END) AS atm_withdrawal_amount\n      , min(CASE transaction_type WHEN 'ATM Withdrawal' THEN amount ELSE 0 END) AS largest_atm_withdrawal_amount\n      , sum(CASE transaction_type WHEN 'ATM Withdrawal' THEN 1 ELSE 0 END) AS atm_withdrawal_count\n      , sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Pre-auth completion') THEN amount ELSE 0 END) AS dbt_card_pin_amount\n      , min(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Pre-auth completion') THEN amount ELSE 0 END) AS largest_dbt_card_pin_amount\n      , sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Pre-auth completion') THEN 1 ELSE 0 END) AS dbt_card_pin_count\n      , sum(CASE WHEN transaction_type IN ('Wire Transfer - Deposit', 'API funds transfer offset') THEN amount ELSE 0 END) AS wire_deposit_amount\n      , max(CASE WHEN transaction_type IN ('Wire Transfer - Deposit', 'API funds transfer offset') THEN amount ELSE 0 END) AS largest_wire_deposit_amount\n      , sum(CASE WHEN transaction_type IN ('Wire Transfer - Deposit', 'API funds transfer offset') THEN 1 ELSE 0 END) AS wire_deposit_count\n      , sum(CASE WHEN transaction_type IN ('ATM Fee Refund', 'Domestic ATM Fee Rebate', 'Int''l ATM Fee Rebate', 'Academy Credit', 'Fee Rebate') THEN amount ELSE 0 END) AS atm_fee_refund_amount\n      , sum(CASE WHEN transaction_type in ('ACH Deposit', 'Coastal ACH Deposit', 'E-Check') THEN amount ELSE 0 END) AS ach_deposit_amount\n      , max(CASE WHEN transaction_type in ('ACH Deposit', 'Coastal ACH Deposit', 'E-Check') THEN amount ELSE 0 END) AS largest_ach_deposit_amount\n      , sum(CASE WHEN transaction_type in ('ACH Deposit', 'Coastal ACH Deposit', 'E-Check') THEN 1 ELSE 0 END) AS ach_deposit_count\n      , sum(CASE WHEN transaction_type IN ('Check Deposit', 'RDC Other Check Deposit', 'Other Check Deposit') THEN amount ELSE 0 END) AS check_deposit_amount\n      , max(CASE WHEN transaction_type IN ('Check Deposit', 'RDC Other Check Deposit', 'Other Check Deposit') THEN amount ELSE 0 END) AS largest_check_deposit_amount\n      , sum(CASE WHEN transaction_type IN ('Check Deposit', 'RDC Other Check Deposit', 'Other Check Deposit') THEN 1 ELSE 0 END) AS check_deposit_count\n      , sum(CASE WHEN transaction_type in ('PWIF Monthly Summit Tip Fee', 'PWIF Payment', 'Aspiration Pay What is Fair') THEN amount ELSE 0 END) AS actual_pwif_paid\n      , sum(CASE WHEN transaction_type in ('Promotional Credit') THEN amount ELSE 0 END) as promo\n      , sum(CASE WHEN transaction_type in ('Cashback Rewards') THEN amount ELSE 0 END) as cashback\n      , sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN amount ELSE 0 END) AS aim_debit_amount\n      , sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN 1 ELSE 0 END) AS aim_debit_count\n      , avg(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN aim_planet_score ELSE NULL END)::decimal(38,6) AS aim_planet_transaction_average\n      , sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN -aim_planet_score * amount ELSE NULL END)\n        /nullif(sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN -amount ELSE NULL END)::decimal(38,6),0) AS aim_planet_dollar_weighted_average\n      , avg(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN aim_people_score ELSE NULL END) AS aim_people_transaction_average\n      , sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN -aim_people_score * amount ELSE NULL END)\n        /nullif(sum(CASE WHEN transaction_type IN ('Debit Card - PIN', 'Purchase with PIN', 'Debit Card - No PIN', 'Purchase') AND is_aim_scored THEN -amount ELSE NULL END)::decimal(38,6),0) AS aim_people_dollar_weighted_average\n      , sum(CASE WHEN transaction_type IN('Reversal-Credit Account', 'Merchant Credit', 'Temp Provisional Credit', 'Cashback Rewards', 'Chargeback', 'Arbitration Chargeback', 'STAR Chargeback', 'Charge Off',\n                                         'Returned ACH Items', 'Debit Chargeback', 'Final Dispute', 'Visa Chargeback', 'Admin Adjustment',\n                                         'RDC Other Check Dep Ret', 'Debit or Credit Adjustment', 'Maestro Load', 'UNKNOWN',\n                                          'Debit Card Return', 'Deposit Verification', 'Balance Transfer', 'Paypal Deposit', 'Radius ACH transfer adj', 'Convenience Check Adjustment',\n                                         'Wire Transfer - Fee', 'CS Agent Initiated Adjustment', 'Chargeback/Credit Temporary Adjustment', 'Foreign Transaction Fee', 'Domestic Wire Out Fee',\n                                         'International Wire Out Fee', 'Domestic Wire In Fee', 'International Wire In Fee', 'Cancelled acct or failedid refund adjustment', 'Repayment of Overdraft Funds',\n                                         'Outgoing Wire Transfer Reversal', 'Outgoing Wire Transfer', 'Transfer for Program Secured DDA', 'Write off Fees', 'Closing Transfer to Card', 'MasterCard Load',\n                                         'Refund', 'Wire Transfer - Deposit - Reversal') AND amount > 0 THEN 1 ELSE 0 END)::decimal(38,6) as other_deposit_count\n      , sum(CASE WHEN transaction_type IN('Reversal-Credit Account',  'Merchant Credit', 'Temp Provisional Credit', 'Cashback Rewards', 'Chargeback', 'Arbitration Chargeback', 'STAR Chargeback', 'Charge Off',\n                                         'Returned ACH Items', 'Debit Chargeback', 'Final Dispute', 'Visa Chargeback', 'Admin Adjustment',\n                                         'RDC Other Check Dep Ret', 'Debit or Credit Adjustment', 'Maestro Load', 'UNKNOWN',\n                                          'Debit Card Return', 'Deposit Verification', 'Balance Transfer', 'Paypal Deposit', 'Radius ACH transfer adj.', 'Convenience Check Adjustment',\n                                         'Wire Transfer - Fee', 'CS Agent Initiated Adjustment', 'Chargeback/Credit Temporary Adjustment', 'Foreign Transaction Fee', 'Domestic Wire Out Fee',\n                                         'International Wire Out Fee', 'Domestic Wire In Fee', 'International Wire In Fee', 'Cancelled acct or failedid refund adjustment', 'Repayment of Overdraft Funds',\n                                         'Outgoing Wire Transfer Reversal', 'Outgoing Wire Transfer', 'Transfer for Program Secured DDA', 'Write off Fees', 'Closing Transfer to Card', 'MasterCard Load',\n                                         'Refund', 'Wire Transfer - Deposit - Reversal') AND amount > 0 THEN amount ELSE 0 END)::decimal(38,6) as other_deposit_amount\n      , sum(CASE WHEN transaction_type IN('Repayment of Overdraft Funds', 'Settlement Reversals', 'Domestic Wire In Fee', 'Domestic Wire Out Fee', 'International Wire In Fee', 'International Wire Out Fee',\n                                          'C2C - Customer Initiated', 'Charge Off Recovery', 'ATM Intl. Fee', 'Express mail fee', 'Foreign Transaction Fee','Over the Counter Cash Access Fee (International)', '2nd Presentment',\n                                         'Returned ACH Items', 'Charge Off Recovery', 'Debit 2nd Presentment', 'Final Dispute',\n                                         'Visa Chargeback', 'Admin Adjustment', 'Visa Second Presentment', 'RDC Other Check Dep Ret', 'ACH Debit Adjustment', 'Temp Provisional Credit',\n                                          'Radius ACH transfer adj.', 'Convenience Check Adjustment', 'Wire Transfer - Fee', 'CS Agent Initiated Adjustment', 'Chargeback/Credit Temporary Adjustment',\n                                         'Cancelled acct or failedid refund adjustment','Outgoing Wire Transfer Reversal', 'Outgoing Wire Transfer', 'Transfer for Program Secured DDA', 'Write off Fees',\n                                          'Arbitration Chargeback', 'Reversal-Credit Account', 'Cash Disbursements', 'Wire Transfer - Withdrawal - Reversal', 'Coastal ACH Reversal',\n                                          'Charge Off Recovery', 'Express mail fee', 'Closing Transfer from Savings', 'Force Post Settle-Could not match to an Auth', 'Reversal-Debiting Account',\n                                         'Retail Sale', 'Auth', 'Over the Counter Cash Access Fee (International)') AND amount < 0 THEN 1 ELSE 0 END)::decimal(38,6) as other_withdrawal_count\n      , sum(CASE WHEN transaction_type IN('Repayment of Overdraft Funds', 'Settlement Reversals', 'Domestic Wire In Fee', 'Domestic Wire Out Fee', 'International Wire In Fee', 'International Wire Out Fee',\n                                          'C2C - Customer Initiated', 'Charge Off Recovery', 'ATM Intl. Fee', 'Express mail fee', 'Foreign Transaction Fee','Over the Counter Cash Access Fee (International)', '2nd Presentment',\n                                         'Returned ACH Items', 'Charge Off Recovery', 'Debit 2nd Presentment', 'Final Dispute',\n                                         'Visa Chargeback', 'Admin Adjustment', 'Visa Second Presentment', 'RDC Other Check Dep Ret', 'ACH Debit Adjustment', 'Temp Provisional Credit',\n                                          'Radius ACH transfer adj.', 'Convenience Check Adjustment', 'Wire Transfer - Fee', 'CS Agent Initiated Adjustment', 'Chargeback/Credit Temporary Adjustment',\n                                         'Cancelled acct or failedid refund adjustment','Outgoing Wire Transfer Reversal', 'Outgoing Wire Transfer', 'Transfer for Program Secured DDA', 'Write off Fees',\n                                          'Arbitration Chargeback', 'Reversal-Credit Account', 'Cash Disbursements', 'Wire Transfer - Withdrawal - Reversal', 'Coastal ACH Reversal',\n                                          'Charge Off Recovery', 'Express mail fee', 'Closing Transfer from Savings', 'Force Post Settle-Could not match to an Auth', 'Reversal-Debiting Account',\n                                         'Retail Sale', 'Auth', 'Over the Counter Cash Access Fee (International)') AND amount < 0 THEN amount ELSE 0 END)::decimal(38,6) as other_withdrawal_amount\n       , sum(CASE WHEN amount < 0 and emissions_amount is not null and is_planet_protection_subscribed = true THEN 1 ELSE 0 END) AS planet_protection_subscribed_debit_count\n       , sum(CASE WHEN amount < 0 and emissions_amount is not null and is_planet_protection_subscribed = false THEN 1 ELSE 0 END) AS planet_protection_unsubscribed_debit_count\n       , sum(CASE WHEN amount < 0 and emissions_amount is not null and is_planet_protection_subscribed = true THEN amount ELSE 0 END) AS planet_protection_subscribed_debit_amount\n       , sum(CASE WHEN amount < 0 and emissions_amount is not null and is_planet_protection_subscribed = false THEN amount ELSE 0 END) AS planet_protection_unsubscribed_debit_amount\n       , sum(CASE WHEN amount < 0 and emissions_amount is not null and is_planet_protection_subscribed = true THEN emissions_amount ELSE 0 END) AS planet_protection_subscribed_debit_emissions_amount\n       , sum(CASE WHEN amount < 0 and emissions_amount is not null and is_planet_protection_subscribed = false THEN emissions_amount ELSE 0 END) AS planet_protection_unsubscribed_debit_emissions_amount\n    FROM bi.dt_depository_transactions\n    --where post_date >= (current_date - 70)\n    GROUP BY 1, 2\n    )\n     , final_txn as (\n  SELECT a.unique_account_id\n    , account_type\n    , a.date\n    , a.daily_balance\n    , a.original_balance\n    , a.spend_daily_balance\n    , a.save_daily_balance\n    , a.has_set_recurring_deposit\n    , CASE WHEN acc.initial_transfer_posted_date IS NULL OR acc.initial_transfer_posted_date > a.date THEN FALSE ELSE TRUE END AS is_funded\n    , CASE WHEN account_type = 'Checking' THEN coalesce(daily_bill_pay_amount, 0) ELSE NULL END AS daily_bill_pay_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(daily_bill_pay_count, 0) ELSE NULL END AS daily_bill_pay_count\n    , CASE WHEN termination_date IS NULL OR termination_date > a.date THEN FALSE ELSE TRUE END AS is_terminated\n    , CASE WHEN tco.charge_off_date IS NULL OR tco.charge_off_date > a.date THEN FALSE ELSE TRUE END AS is_charged_off\n    , coalesce(monthly_fee_setting, daily_balance * yearly_percent_setting / 12) AS monthly_usd_fee_setting\n    , coalesce(yearly_percent_setting, CASE WHEN daily_balance = 0 THEN 0 ELSE monthly_fee_setting * 12 / (1.0 * daily_balance) END) AS yearly_percent_fee_setting\n    , coalesce(previous_day_monthly_fee_setting, daily_balance * previous_day_yearly_percent_setting / 12) AS previous_day_monthly_usd_fee_setting\n    , coalesce(previous_day_yearly_percent_setting, CASE WHEN daily_balance = 0 THEN 0 ELSE previous_day_monthly_fee_setting * 12 / (1.0 * daily_balance) END) AS previous_day_yearly_percent_fee_setting\n    , CASE WHEN account_type = 'Checking' THEN coalesce(ach_withdrawal_amount, 0) ELSE NULL END AS ach_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(ach_withdrawal_count, 0) ELSE NULL END AS ach_withdrawal_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_ach_withdrawal_amount, 0) ELSE NULL END AS largest_ach_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(ach_deposit_amount, 0) ELSE NULL END AS ach_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(ach_deposit_count, 0) ELSE NULL END AS ach_deposit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_ach_deposit_amount, 0) ELSE NULL END AS largest_ach_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(dbt_card_no_pin_amount, 0) ELSE NULL END AS dbt_card_no_pin_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(dbt_card_no_pin_count, 0) ELSE NULL END AS dbt_card_no_pin_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_dbt_card_no_pin_amount, 0) ELSE NULL END AS largest_dbt_card_no_pin_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(dbt_card_pin_amount, 0) ELSE NULL END AS dbt_card_pin_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(dbt_card_pin_count, 0) ELSE NULL END AS dbt_card_pin_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_dbt_card_pin_amount, 0) ELSE NULL END AS largest_dbt_card_pin_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(interest_amount, 0) ELSE NULL END AS interest_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(check_withdrawal_amount, 0) ELSE NULL END AS check_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(check_withdrawal_count, 0) ELSE NULL END AS check_withdrawal_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_check_withdrawal_amount, 0) ELSE NULL END AS largest_check_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(check_deposit_amount, 0) ELSE NULL END AS check_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(check_deposit_count, 0) ELSE NULL END AS check_deposit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(actual_pwif_paid, 0) ELSE NULL END AS actual_pwif_paid\n    , CASE WHEN account_type = 'Checking' THEN coalesce(cashback, 0) ELSE NULL END AS cashback\n    , CASE WHEN account_type = 'Checking' THEN coalesce(promo, 0) ELSE NULL END AS promo\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_check_deposit_amount, 0) ELSE NULL END AS largest_check_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(wire_withdrawal_amount, 0) ELSE NULL END AS wire_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(wire_withdrawal_count, 0) ELSE NULL END AS wire_withdrawal_count\n    , CASE when account_type = 'Checking' THEN coalesce(internal_transfer_deposit, 0) ELSE NULL END AS internal_transfer_deposit\n    , CASE when account_type = 'Checking' THEN coalesce(internal_transfer_withdrawal, 0) ELSE NULL END AS internal_transfer_withdrawal\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_wire_withdrawal_amount, 0) ELSE NULL END AS largest_wire_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(wire_deposit_amount, 0) ELSE NULL END AS wire_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(wire_deposit_count, 0) ELSE NULL END AS wire_deposit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_wire_deposit_amount, 0) ELSE NULL END AS largest_wire_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(atm_deposit_amount, 0) ELSE NULL END AS atm_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(atm_deposit_count, 0) ELSE NULL END AS atm_deposit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_atm_deposit_amount, 0) ELSE NULL END AS largest_atm_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(atm_withdrawal_amount, 0) ELSE NULL END AS atm_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(atm_withdrawal_count, 0) ELSE NULL END AS atm_withdrawal_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(largest_atm_withdrawal_amount, 0) ELSE NULL END AS largest_atm_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(atm_fee_refund_amount, 0) ELSE NULL END AS atm_fee_refund_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(aim_debit_amount, 0) ELSE NULL END AS aim_debit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(aim_debit_count, 0) ELSE NULL END AS aim_debit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(aim_people_transaction_average, 0) ELSE NULL END AS aim_people_transaction_average\n    , CASE WHEN account_type = 'Checking' THEN coalesce(aim_people_dollar_weighted_average, 0) ELSE NULL END AS aim_people_dollar_weighted_average\n    , CASE WHEN account_type = 'Checking' THEN coalesce(0.5 * aim_people_transaction_average + 0.5 * aim_people_dollar_weighted_average, 0) ELSE NULL END AS daily_aim_people_score\n    , CASE WHEN account_type = 'Checking' THEN coalesce(aim_planet_transaction_average, 0) ELSE NULL END AS aim_planet_transaction_average\n    , CASE WHEN account_type = 'Checking' THEN coalesce(aim_planet_transaction_average, 0) ELSE NULL END AS aim_planet_dollar_weighted_average\n    , CASE WHEN account_type = 'Checking' THEN coalesce(0 / 5 * aim_planet_transaction_average + 0.5 * aim_planet_dollar_weighted_average, 0) ELSE NULL END AS daily_aim_planet_score\n    , CASE WHEN account_type = 'Checking' THEN coalesce(other_deposit_count, 0) ELSE NULL END AS other_deposit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(other_deposit_amount, 0) ELSE NULL END AS other_deposit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(other_withdrawal_count, 0) ELSE NULL END AS other_withdrawal_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(other_withdrawal_amount, 0) ELSE NULL END AS other_withdrawal_amount\n    , CASE WHEN account_type = 'Checking' AND pps.unique_account_id IS NOT NULL THEN TRUE ELSE FALSE END AS planet_protection_subscription_active\n    , CASE WHEN account_type = 'Checking' THEN coalesce(planet_protection_subscribed_debit_count, 0) ELSE NULL END AS planet_protection_subscribed_debit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(planet_protection_unsubscribed_debit_count, 0) ELSE NULL END AS planet_protection_unsubscribed_debit_count\n    , CASE WHEN account_type = 'Checking' THEN coalesce(planet_protection_subscribed_debit_amount, 0) ELSE NULL END AS planet_protection_subscribed_debit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(planet_protection_unsubscribed_debit_amount, 0) ELSE NULL END AS planet_protection_unsubscribed_debit_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(planet_protection_subscribed_debit_emissions_amount, 0) ELSE NULL END AS planet_protection_subscribed_debit_emissions_amount\n    , CASE WHEN account_type = 'Checking' THEN coalesce(planet_protection_unsubscribed_debit_emissions_amount, 0) ELSE NULL END AS planet_protection_unsubscribed_debit_emissions_amount\n  FROM (\n    SELECT *\n    FROM etl.DAILY_BALANCES\n    --WHERE DATE >= (current_date - 70)\n    UNION ALL\n    SELECT *\n    FROM ush.dt_investment_daily_balances_tmp_3\n    --WHERE DATE >= (current_date - 70)\n    ) a\n  JOIN bi.dt_accounts acc ON a.unique_account_id = acc.unique_account_id\n  LEFT JOIN billpay pay ON a.unique_account_id = pay.unique_account_id AND a.date = pay.check_creation_date\n  LEFT JOIN ush.dt_account_daily_fee_settings_tmp dfs ON a.unique_account_id = dfs.unique_account_id AND a.date = dfs.date\n  LEFT JOIN transactions b ON a.unique_account_id = b.unique_account_id AND a.date = b.post_date\n  LEFT JOIN planet_protection_subscription pps ON a.unique_account_id = pps.unique_account_id AND a.date = pps.date\n  LEFT JOIN tmp_charge_off tco on acc.UNIQUE_ACCOUNT_ID = tco.UNIQUE_ACCOUNT_ID\n)\n  SELECT a.*\n    , a.monthly_usd_fee_setting - a.previous_day_monthly_usd_fee_setting AS day_over_day_monthly_fee_setting_change\n    , a.yearly_percent_fee_setting - a.previous_day_yearly_percent_fee_setting AS day_over_day_yearly_fee_setting_change\n    , a.unique_account_id || '-' || to_varchar(a.date,'yyyymmdd') AS unique_id\n  FROM final_txn a\n  order by a.unique_account_id, a.date\n);\n\n\n\n\nDROP TABLE IF EXISTS ush.dt_investment_daily_balances_tmp_2;\nDROP TABLE IF EXISTS ush.dt_investment_daily_balances_tmp_3;\nDROP TABLE IF EXISTS ush.dt_account_daily_fee_settings_tmp;\nDROP TABLE IF EXISTS ush.dt_summit_daily_balances_tmp_2;\n\n--append new data to daily table\n-- drop table if exists ush.dt_account_daily_data_1;\n-- create table ush.dt_account_daily_data_1 clone bi.dt_account_daily_data;\n--\n-- delete from ush.dt_account_daily_data_1\n-- where date >= (select min(date) from ush.dt_account_daily_data_new);\n--\n-- insert into ush.dt_account_daily_data_1\n-- select *\n-- from ush.dt_account_daily_data_new;\n--\n-- drop table if exists ush.dt_account_daily_data_new;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958398":{"id":2958398,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-1472,"y":-176,"width":32,"height":32,"inputConnectorIDs":[2958429],"outputSuccessConnectorIDs":[2958441],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dev warehouse to xsmall"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DEV"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WAREHOUSE_SIZE"},"2":{"slot":2,"type":"STRING","value":"XSMALL"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958399":{"id":2958399,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-1424,"y":-496,"width":32,"height":32,"inputConnectorIDs":[2958424],"outputSuccessConnectorIDs":[2958352],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dev WH to lrg"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DEV"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WAREHOUSE_SIZE"},"2":{"slot":2,"type":"STRING","value":"LARGE"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2958352":{"id":2958352,"sourceID":2958399,"targetID":2958391},"2958353":{"id":2958353,"sourceID":2958393,"targetID":2958392},"2958354":{"id":2958354,"sourceID":2958379,"targetID":2958376},"2958355":{"id":2958355,"sourceID":2958391,"targetID":2958388},"2958356":{"id":2958356,"sourceID":2958372,"targetID":2958304},"2958357":{"id":2958357,"sourceID":2958374,"targetID":2958369},"2958358":{"id":2958358,"sourceID":2958325,"targetID":2958368},"2958359":{"id":2958359,"sourceID":2958368,"targetID":2958389},"2958360":{"id":2958360,"sourceID":2958302,"targetID":2958381},"2958361":{"id":2958361,"sourceID":2958335,"targetID":2958374},"2958362":{"id":2958362,"sourceID":2958392,"targetID":2958395},"2958363":{"id":2958363,"sourceID":2958377,"targetID":2958375},"2958364":{"id":2958364,"sourceID":2958371,"targetID":2958370},"2958366":{"id":2958366,"sourceID":2958320,"targetID":2958393},"2958367":{"id":2958367,"sourceID":2958329,"targetID":2958372},"2958400":{"id":2958400,"sourceID":2958332,"targetID":2958335},"2958413":{"id":2958413,"sourceID":2958331,"targetID":2958330},"2958432":{"id":2958432,"sourceID":2958328,"targetID":2958331},"2958433":{"id":2958433,"sourceID":2958324,"targetID":2958303},"2958434":{"id":2958434,"sourceID":2958330,"targetID":2958325},"2958435":{"id":2958435,"sourceID":2958370,"targetID":2958307},"2958436":{"id":2958436,"sourceID":2958388,"targetID":2958373},"2958437":{"id":2958437,"sourceID":2958387,"targetID":2958384},"2958438":{"id":2958438,"sourceID":2958320,"targetID":2958321},"2958439":{"id":2958439,"sourceID":2958369,"targetID":2958397},"2958440":{"id":2958440,"sourceID":2958321,"targetID":2958371},"2958441":{"id":2958441,"sourceID":2958398,"targetID":2958394},"2958442":{"id":2958442,"sourceID":2958381,"targetID":2958377},"2958443":{"id":2958443,"sourceID":2958303,"targetID":2958302},"2958444":{"id":2958444,"sourceID":2958334,"targetID":2958329},"2958445":{"id":2958445,"sourceID":2958327,"targetID":2958351},"2958446":{"id":2958446,"sourceID":2958305,"targetID":2958324},"2958447":{"id":2958447,"sourceID":2958326,"targetID":2958320},"2958448":{"id":2958448,"sourceID":2958327,"targetID":2958326},"2958449":{"id":2958449,"sourceID":2958310,"targetID":2958334},"2958450":{"id":2958450,"sourceID":2958375,"targetID":2958306}},"failureConnectors":{},"unconditionalConnectors":{"2958401":{"id":2958401,"sourceID":2958311,"targetID":2958305},"2958402":{"id":2958402,"sourceID":2958384,"targetID":2958390},"2958403":{"id":2958403,"sourceID":2958311,"targetID":2958323},"2958404":{"id":2958404,"sourceID":2958311,"targetID":2958327},"2958405":{"id":2958405,"sourceID":2958323,"targetID":2958322},"2958406":{"id":2958406,"sourceID":2958311,"targetID":2958387},"2958407":{"id":2958407,"sourceID":2958333,"targetID":2958301},"2958408":{"id":2958408,"sourceID":2958311,"targetID":2958310},"2958409":{"id":2958409,"sourceID":2958311,"targetID":2958333},"2958410":{"id":2958410,"sourceID":2958311,"targetID":2958328},"2958411":{"id":2958411,"sourceID":2958311,"targetID":2958332},"2958412":{"id":2958412,"sourceID":2958397,"targetID":2958396},"2958414":{"id":2958414,"sourceID":2958311,"targetID":2958382},"2958415":{"id":2958415,"sourceID":2958311,"targetID":2958379},"2958424":{"id":2958424,"sourceID":2958311,"targetID":2958399},"2958425":{"id":2958425,"sourceID":2958390,"targetID":2958385},"2958427":{"id":2958427,"sourceID":2958311,"targetID":2958383},"2958428":{"id":2958428,"sourceID":2958385,"targetID":2958386},"2958429":{"id":2958429,"sourceID":2958388,"targetID":2958398},"2958430":{"id":2958430,"sourceID":2958376,"targetID":2958378},"2958431":{"id":2958431,"sourceID":2958311,"targetID":2958380}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{"component_message":{"definition":{"name":"component_message","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"nothing"},"component_name":{"definition":{"name":"component_name","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"nothing"},"file_name":{"definition":{"name":"file_name","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"RER_ACH Received Entries Detail Report_2021-05-14_460020.xlsx"},"record_count":{"definition":{"name":"record_count","type":"DECIMAL","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":""},"s3_path":{"definition":{"name":"s3_path","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"s3://aspiration-datateam/dump/sharris/"},"v_started_at":{"definition":{"name":"v_started_at","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":""}},"grids":{}},"info":{"name":"serena - test","description":"","type":"ORCHESTRATION","tag":"9723dc19-d352-42ea-9aeb-46cc1856d71f"}}