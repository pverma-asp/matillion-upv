{"job":{"components":{"2958576":{"id":2958576,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-176,"y":64,"width":32,"height":32,"inputConnectorIDs":[2958558],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"load_WH to xsmall"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"LOAD_WH"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WAREHOUSE_SIZE"},"2":{"slot":2,"type":"STRING","value":"XSMALL"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"AUTO_SUSPEND"},"2":{"slot":2,"type":"STRING","value":"10"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958577":{"id":2958577,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":235671163,"x":-176,"y":-48,"width":32,"height":32,"inputConnectorIDs":[2958551,2958552],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958558],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958580":{"id":2958580,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-128,"y":-208,"width":32,"height":32,"inputConnectorIDs":[2958578],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958551],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dt_account_monthly"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse dev;\n\nSET TIMEZONE = 'America/Los_Angeles';\n\ndrop table if exists ush.dt_account_monthly_data_tmp;\n\nCREATE TABLE ush.dt_account_monthly_data_tmp\nAS (\n    SELECT unique_account_id\n      , date_trunc('month', date)::DATE AS month\n      , avg(daily_balance) AS average_balance\n      , min(daily_balance) AS lowest_monthly_balance\n      , max(daily_balance) AS peak_monthly_balance\n      , avg(original_balance) AS average_balance_actual\n      , min(original_balance) AS lowest_monthly_balance_actual\n      , max(original_balance) AS peak_monthly_balance_actual\n      , avg(spend_daily_balance) AS average_spend_balance_actual\n      , min(spend_daily_balance) AS lowest_monthly_spend_balance_actual\n      , max(spend_daily_balance) AS peak_monthly_spend_balance_actual\n      , avg(save_daily_balance) AS average_save_balance_actual\n      , min(save_daily_balance) AS lowest_monthly_save_balance_actual\n      , max(save_daily_balance) AS peak_monthly_save_balance_actual\n      , sum(dbt_card_no_pin_amount) AS monthly_debit_card_no_pin_amount\n      , sum(dbt_card_pin_amount) AS monthly_debit_card_pin_amount\n      , sum(aim_debit_count)::decimal(38,6) AS monthly_aim_scored_transactions\n      , sum(aim_debit_amount)::decimal(38,6) AS monthly_aim_scored_transactions_amount\n      , sum(dbt_card_no_pin_count) AS monthly_debit_card_no_pin_transactions\n      , sum(dbt_card_pin_count) AS monthly_debit_card_pin_transactions\n      , sum(daily_bill_pay_amount) AS monthly_bill_pay_amount\n      , sum(daily_bill_pay_count) AS monthly_bill_pay_count\n      , sum(ach_withdrawal_amount) AS ach_withdrawal_amount\n      , sum(ach_deposit_amount) AS ach_deposit_amount\n      , sum(atm_deposit_amount) AS atm_deposit_amount\n      , sum(atm_withdrawal_amount) AS atm_withdrawal_amount\n      , sum(wire_withdrawal_amount) AS wire_withdrawal_amount\n      , sum(wire_deposit_amount) AS wire_deposit_amount\n      , sum(check_withdrawal_amount) AS check_withdrawal_amount\n      , sum(check_deposit_amount) AS check_deposit_amount\n      , sum(actual_pwif_paid) as actual_pwif_paid\n      , sum(promo) as promo\n      , sum(cashback) as cashback\n      , sum(a.atm_fee_refund_amount) AS atm_fee_refund_amount\n      , sum(interest_amount) AS interest_amount\n      , sum(wire_withdrawal_count) AS wire_withdrawal_count\n      , sum(internal_transfer_deposit) as internal_transfer_deposit\n      , sum(internal_transfer_withdrawal) as internal_transfer_withdrawal\n      , sum(wire_deposit_count) AS wire_deposit_count\n      , sum(ach_deposit_count) AS ach_deposit_count\n      , sum(ach_withdrawal_count) AS ach_withdrawal_count\n      , sum(atm_deposit_count) AS atm_deposit_count\n      , sum(atm_withdrawal_count) AS atm_withdrawal_count\n      , sum(check_withdrawal_count) AS check_withdrawal_count\n      , sum(check_deposit_count) AS check_deposit_count\n      , max(largest_ach_deposit_amount) AS largest_ach_deposit_amount\n      , min(largest_ach_withdrawal_amount) AS largest_ach_withdrawal_amount\n      , min(largest_dbt_card_no_pin_amount) AS largest_dbt_card_no_pin_amount\n      , min(largest_dbt_card_pin_amount) AS largest_dbt_card_pin_amount\n      , max(largest_check_deposit_amount) AS largest_check_deposit_amount\n      , min(largest_check_withdrawal_amount) AS largest_check_withdrawal_amount\n      , max(largest_wire_deposit_amount) AS largest_wire_deposit_amount\n      , min(largest_wire_withdrawal_amount) AS largest_wire_withdrawal_amount\n      , max(largest_atm_deposit_amount) AS largest_atm_deposit_amount\n      , min(largest_atm_withdrawal_amount) AS largest_atm_withdrawal_amount\n      , CASE WHEN sum(aim_debit_count)= 0 THEN NULL\n        ELSE 0.5 * sum(aim_people_transaction_average  * aim_debit_count )/sum(aim_debit_count ) + 0.5 * sum(aim_people_dollar_weighted_average::decimal(38,6)   * aim_debit_amount::decimal(38,6) )/sum(aim_debit_amount::decimal(38,6)) END AS monthly_aim_people_score\n      , CASE WHEN sum(aim_debit_count) = 0 THEN NULL\n        ELSE (0.5 * sum(aim_planet_transaction_average * aim_debit_count)/sum(aim_debit_count) + 0.5 * sum(aim_planet_dollar_weighted_average::decimal(38,6)  * aim_debit_amount::decimal(38,6) )/sum(aim_debit_amount::decimal(38,6) )) END AS monthly_aim_planet_score\n      , sum(other_deposit_count) as other_deposit_count\n      , sum(other_deposit_amount) as other_deposit_amount\n      , sum(other_withdrawal_count) as other_withdrawal_count\n      , sum(other_withdrawal_amount) as other_withdrawal_amount\n      , case when sum(planet_protection_subscription_active::smallint) > 0 then TRUE else FALSE end as planet_protection_subscription_active\n      , sum(planet_protection_subscribed_debit_count) as planet_protection_subscribed_debit_count\n      , sum(planet_protection_unsubscribed_debit_count) as planet_protection_unsubscribed_debit_count\n      , sum(planet_protection_subscribed_debit_amount) as planet_protection_subscribed_debit_amount\n      , sum(planet_protection_unsubscribed_debit_amount) as planet_protection_unsubscribed_debit_amount\n      , sum(planet_protection_subscribed_debit_emissions_amount) as planet_protection_subscribed_debit_emissions_amount\n      , sum(planet_protection_unsubscribed_debit_emissions_amount) as planet_protection_unsubscribed_debit_emissions_amount\n    FROM bi.dt_account_daily_data a\n    GROUP BY 1, 2\n    );\n\ndrop table if exists ush.last_dates;\n\ncreate table ush.last_dates as (\n    SELECT unique_account_id\n      , date_trunc('month', date)::DATE AS month\n      , max(date) AS last_day_of_month\n    FROM bi.dt_account_daily_data\n    GROUP BY 1, 2\n);\n\ndrop table if exists  ush.end_of_month_data;\n\ncreate table ush.end_of_month_data as (\n    SELECT b.unique_account_id\n      , a.month\n      , b.yearly_percent_fee_setting\n      , b.monthly_usd_fee_setting\n      , daily_balance AS end_of_month_balance\n      , original_balance AS end_of_month_balance_actual\n      , spend_daily_balance AS end_of_month_spend_balance_actual\n      , save_daily_balance AS end_of_month_save_balance_actual\n      , is_terminated\n      , is_funded\n      , is_charged_off\n    FROM ush.last_dates a\n    JOIN bi.dt_account_daily_data b ON a.unique_account_id = b.unique_account_id AND a.last_day_of_month = b.date\n);\n\ndrop table if exists ush.dt_account_monthly_data_tmp1;\ncreate table ush.dt_account_monthly_data_tmp1 as (\n SELECT a.unique_account_id\n    , a.month\n    , a.peak_monthly_balance\n    , a.average_balance\n    , a.lowest_monthly_balance\n    , a.peak_monthly_balance_actual\n    , a.average_balance_actual\n    , a.lowest_monthly_balance_actual\n    , a.average_spend_balance_actual\n    , a.lowest_monthly_spend_balance_actual\n    , a.peak_monthly_spend_balance_actual\n    , a.average_save_balance_actual\n    , a.lowest_monthly_save_balance_actual\n    , a.peak_monthly_save_balance_actual\n    , a.monthly_aim_scored_transactions\n    , a.monthly_debit_card_pin_amount\n    , a.monthly_debit_card_no_pin_amount\n    , a.monthly_debit_card_pin_transactions\n    , a.monthly_debit_card_no_pin_transactions\n    , a.monthly_bill_pay_amount\n    , a.monthly_bill_pay_count\n    , b.end_of_month_balance\n    , b.end_of_month_balance_actual\n    , b.end_of_month_spend_balance_actual\n    , b.end_of_month_save_balance_actual\n    , b.yearly_percent_fee_setting\n    , CASE WHEN account_type = 'Checking' THEN b.monthly_usd_fee_setting ELSE b.yearly_percent_fee_setting * average_balance / 12 END AS monthly_usd_fee_setting\n    , b.is_terminated\n    , b.is_funded\n    , b.is_charged_off\n    , a.ach_deposit_amount\n    , a.ach_withdrawal_amount\n    , a.check_deposit_amount\n    , a.check_withdrawal_amount\n    , a.wire_deposit_amount\n    , a.wire_withdrawal_amount\n    , a.atm_deposit_amount\n    , a.atm_withdrawal_amount\n    , a.atm_fee_refund_amount\n    , a.interest_amount\n    , a.monthly_aim_people_score\n    , a.monthly_aim_planet_score\n    , a.wire_withdrawal_count\n    , a.wire_deposit_count\n    , a.internal_transfer_deposit\n    , a.internal_transfer_withdrawal\n    , a.ach_deposit_count\n    , a.ach_withdrawal_count\n    , a.atm_deposit_count\n    , a.atm_withdrawal_count\n    , a.check_withdrawal_count\n    , a.check_deposit_count\n    , a.actual_pwif_paid\n    , a.promo\n    , a.cashback\n    , a.largest_ach_deposit_amount\n    , a.largest_dbt_card_no_pin_amount\n    , a.largest_dbt_card_pin_amount\n    , a.largest_check_deposit_amount\n    , a.largest_check_withdrawal_amount\n    , a.largest_wire_deposit_amount\n    , a.largest_wire_withdrawal_amount\n    , a.largest_atm_deposit_amount\n    , a.largest_atm_withdrawal_amount\n    , a.other_deposit_count\n    , a.other_deposit_amount\n    , a.other_withdrawal_count\n    , a.other_withdrawal_amount\n    , a.planet_protection_subscription_active\n    , a.planet_protection_subscribed_debit_count\n    , a.planet_protection_unsubscribed_debit_count\n    , a.planet_protection_subscribed_debit_amount\n    , a.planet_protection_unsubscribed_debit_amount\n    , a.planet_protection_subscribed_debit_emissions_amount\n    , a.planet_protection_unsubscribed_debit_emissions_amount\n  FROM ush.dt_account_monthly_data_tmp a\n  JOIN ush.end_of_month_data b ON a.unique_account_id = b.unique_account_id AND a.month = b.month\n  JOIN ush.dt_accounts acc ON a.unique_account_id = acc.unique_account_id );\n\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp_2;\n\nCREATE TABLE ush.dt_account_monthly_data_tmp_2\nAS (\n  SELECT unique_account_id\n    , a.month\n    , a.monthly_debit_card_pin_amount\n    , a.monthly_debit_card_no_pin_amount\n    , a.monthly_debit_card_pin_transactions\n    , a.monthly_debit_card_no_pin_transactions\n    , a.monthly_aim_scored_transactions\n    , a.lowest_monthly_balance\n    , a.average_balance\n    , a.peak_monthly_balance\n    , a.end_of_month_balance\n    , a.lowest_monthly_balance_actual\n    , a.average_balance_actual\n    , a.peak_monthly_balance_actual\n    , a.end_of_month_balance_actual\n    , a.lowest_monthly_spend_balance_actual\n    , a.average_spend_balance_actual\n    , a.peak_monthly_spend_balance_actual\n    , a.end_of_month_spend_balance_actual\n    , a.lowest_monthly_save_balance_actual\n    , a.average_save_balance_actual\n    , a.peak_monthly_save_balance_actual\n    , a.end_of_month_save_balance_actual\n    , a.ach_withdrawal_amount\n    , a.ach_deposit_amount\n    , a.check_withdrawal_amount\n    , a.check_deposit_amount\n    , a.wire_withdrawal_amount\n    , a.wire_deposit_amount\n    , a.atm_withdrawal_amount\n    , a.atm_deposit_amount\n    , a.atm_fee_refund_amount\n    , a.interest_amount\n    , a.monthly_usd_fee_setting\n    , a.yearly_percent_fee_setting\n    , a.monthly_aim_people_score\n    , a.monthly_aim_planet_score\n    , is_terminated\n    , is_funded\n    , is_charged_off\n    , previous_monthly_ach_deposit_amount\n    , previous_monthly_ach_withdrawal_amount\n    , previous_monthly_debit_card_pin_amount\n    , previous_monthly_debit_card_no_pin_amount\n    , a.wire_withdrawal_count\n    , a.wire_deposit_count\n    , a.internal_transfer_deposit\n    , a.internal_transfer_withdrawal\n    , a.ach_deposit_count\n    , a.ach_withdrawal_count\n    , a.atm_deposit_count\n    , a.atm_withdrawal_count\n    , a.check_withdrawal_count\n    , a.check_deposit_count\n    , a.actual_pwif_paid\n    , a.promo\n    , a.cashback\n    , a.largest_ach_deposit_amount\n    , a.largest_dbt_card_no_pin_amount\n    , a.largest_dbt_card_pin_amount\n    , a.largest_check_deposit_amount\n    , a.largest_check_withdrawal_amount\n    , a.largest_wire_deposit_amount\n    , a.largest_wire_withdrawal_amount\n    , a.largest_atm_deposit_amount\n    , a.largest_atm_withdrawal_amount\n    , a.monthly_bill_pay_amount\n    , a.monthly_bill_pay_count\n    , a.other_deposit_count\n    , a.other_deposit_amount\n    , a.other_withdrawal_count\n    , a.other_withdrawal_amount\n    , a.planet_protection_subscription_active\n    , a.planet_protection_subscribed_debit_count\n    , a.planet_protection_unsubscribed_debit_count\n    , a.planet_protection_subscribed_debit_amount\n    , a.planet_protection_unsubscribed_debit_amount\n    , a.planet_protection_subscribed_debit_emissions_amount\n    , a.planet_protection_unsubscribed_debit_emissions_amount\n  FROM (\n    SELECT a.*\n      , b.ach_withdrawal_amount AS previous_monthly_ach_withdrawal_amount\n      , b.ach_deposit_amount AS previous_monthly_ach_deposit_amount\n      , b.monthly_debit_card_pin_amount AS previous_monthly_debit_card_pin_amount\n      , b.monthly_debit_card_no_pin_amount AS previous_monthly_debit_card_no_pin_amount\n    FROM ush.dt_account_monthly_data_tmp1 a\n    LEFT JOIN ush.dt_account_monthly_data_tmp b ON a.unique_account_id = b.unique_account_id AND a.month = DATEADD('month', 1, b.month)\n    ) a\n);\n\n\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp;\n\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp_3_1;\nCREATE TABLE ush.dt_account_monthly_data_tmp_3_1\nAS (\n  WITH\n  position_counts AS (\n    SELECT date_trunc('quarter', position_date) :: DATE AS quarter\n      , count(*) AS quarter_count\n    FROM (\n      SELECT DATEADD('hour', 10, convert_timezone('America/Los_Angeles',position_date))::date AS position_date\n      FROM web_db.investment_position\n      GROUP BY 1\n      ) possible_position_dates\n    GROUP BY 1\n    ),\n  average_monthly_positions AS (\n    SELECT a.investment_id\n      , user_id\n      , ua.account_id\n      , i.fund_id\n      , a.month\n      , a.ttl / b.quarter_count AS avg_monthly_position\n    FROM (\n      SELECT investment_id\n        , date_trunc('quarter', DATEADD('hour', 10, convert_timezone('America/Los_Angeles',position_date))) :: DATE AS quarter\n        , date_trunc('month', DATEADD('hour', 10, convert_timezone('America/Los_Angeles',position_date))) :: DATE AS month\n        , sum(current_value) AS ttl\n      FROM web_db.investment_position\n      GROUP BY 1, 2, 3\n      ) a\n    JOIN position_counts b ON b.quarter = a.quarter\n    JOIN web_db.investment i ON a.investment_id = i.id\n    JOIN web_db.user_account ua ON i.account_id = ua.account_id\n    ),\n  payment_fractions AS (\n    SELECT a.investment_id\n      , a.user_id\n      , a.account_id\n      , a.fund_id\n      , a.month\n      , a.avg_monthly_position\n      , a.avg_monthly_position/ttl AS payment_fraction\n    FROM average_monthly_positions a\n    JOIN (\n      SELECT user_id\n        , fund_id\n        , date_trunc('quarter', month)::DATE AS quarter\n        , sum(avg_monthly_position) AS ttl\n      FROM average_monthly_positions\n      GROUP BY 1, 2, 3\n      HAVING sum(avg_monthly_position) > 0\n      ) b ON date_trunc('quarter', a.month) = b.quarter AND a.user_id = b.user_id AND a.fund_id = b.fund_id\n    ),\n  actual_investment_payments AS (\n    SELECT user_id\n      , CASE WHEN p.description = 'REDWX Fee Pmt' THEN 2 WHEN p.description = 'ASPFX Fee Pmt' THEN 1 END AS fund_id\n      , date_trunc('month', txn_date - INTERVAL '80 days')::DATE AS quarter\n      , sum(amount) AS amount\n    FROM web_db.payment p\n    JOIN web_db.user_payment_account upa ON p.user_payment_account_id = upa.id\n    WHERE p.description IN ('REDWX Fee Pmt', 'ASPFX Fee Pmt')\n    GROUP BY 1, 2, 3\n    ),\n  disaggregated_investment_payments AS (\n    SELECT b.investment_id\n      , b.month\n      , b.payment_fraction * a.amount AS monthly_payment\n    FROM actual_investment_payments a\n    JOIN payment_fractions b ON a.user_id = b.user_id AND a.fund_id = b.fund_id AND a.quarter = date_trunc('quarter', b.month)\n    ),\n  all_investment_payments AS (\n    SELECT *\n    FROM disaggregated_investment_payments\n    ),\n  depository_payments AS (\n    SELECT d.id AS depository_id\n      , DATE_TRUNC('month', txn_date :: DATE - 12)::DATE AS month\n      , amount\n    FROM web_db.payment p\n    JOIN web_db.user_payment_account upa ON upa.id = p.user_payment_account_id\n    JOIN web_db.user_account ua ON ua.user_id = upa.user_id\n    JOIN web_db.depository d ON ua.account_id = d.account_id\n    WHERE p.description = 'Fee Pmt'\n      AND txn_date::date NOT IN ('2016-12-31', '2017-02-06', '2017-10-05', '2017-10-06')\n      AND d.inception_date IS NOT NULL\n    ),\n  all_depository_payments AS (\n    SELECT dta.unique_account_id\n      , dp.month\n      , dp.amount\n    FROM depository_payments dp\n    JOIN ush.dt_accounts dta ON (dta.radius_id = dp.depository_id)\n    UNION ALL\n    SELECT dta.unique_account_id\n      , dp.month\n      , dp.amount\n    FROM depository_payments dp\n    JOIN ush.dt_accounts dta ON (dta.galileo_id = dp.depository_id)\n    ),\n  all_payment_data AS (\n    SELECT unique_account_id\n      , month\n      , amount AS fee_paid\n    FROM all_depository_payments\n    UNION ALL\n    SELECT 'i' || investment_id AS unique_account_id\n      , month\n      , monthly_payment AS fee_paid\n    FROM all_investment_payments\n    )\n  SELECT unique_account_id\n    , month\n    , sum(fee_paid) AS fee_paid\n  FROM all_payment_data\n  GROUP BY unique_account_id, month\n);\n\n\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp_3;\nCREATE TABLE ush.dt_account_monthly_data_tmp_3\nAS (\n  SELECT a.*\n    , coalesce(fee_paid, 0) AS billed_pwif_this_month\n    , a.monthly_usd_fee_setting - b.monthly_usd_fee_setting AS month_over_month_monthly_fee_setting_change\n    , a.yearly_percent_fee_setting - b.yearly_percent_fee_setting AS month_over_month_yearly_fee_setting_change\n    , CASE WHEN acc.account_type = 'Checking' AND a.average_balance >= 2500 THEN -0.01/12 * a.average_balance\n        WHEN account_type = 'Checking' AND a.average_balance < 2500 THEN -0.0025 / 12 * a.average_balance\n        ELSE 0 END AS interest_paid_out\n    , CASE WHEN acc.account_type = 'Checking' THEN a.average_balance * 0.016/12\n        ELSE 0 END AS interest_income\n    , CASE WHEN account_type = 'Checking' THEN 2.5\n        ELSE 0 END AS card_issue_fee\n  FROM ush.dt_account_monthly_data_tmp_2 a\n  LEFT JOIN ush.dt_account_monthly_data_tmp_2 b ON a.unique_account_id = b.unique_account_id AND a.month = DATEADD('month', 1, b.month)\n  JOIN ush.dt_accounts acc ON a.unique_account_id = acc.unique_account_id\n  LEFT JOIN ush.dt_account_monthly_data_tmp_3_1 c ON a.unique_account_id = c.unique_account_id AND a.month = c.month\n);\n\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp_2;\nDROP TABLE IF EXISTS ush.dt_account_monthly_data;\n\nCREATE TABLE ush.dt_account_monthly_data\nAS (\n  SELECT a.*\n    , sum(b.billed_pwif_this_month) AS pwif_paid_to_date\n    , sum(b.interest_paid_out)      AS interest_paid_to_date\n    , sum(b.interest_income)        AS interest_income_to_dat\n    , a.unique_account_id || '-' || to_varchar(a.month,'yyyymmdd') AS unique_id\n    --, ROW_NUMBER() OVER(order by a.unique_account_id) AS unique_id\n  FROM ush.dt_account_monthly_data_tmp_3 a\n  JOIN ush.dt_account_monthly_data_tmp_3 b ON a.unique_account_id = b.unique_account_id AND a.month >= b.month\n  GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n           31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n           59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85\n);\n\n\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp_3;\n\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp_4;\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp_3_1;\ndrop table if exists ush.DT_ACCOUNT_MONTHLY_DATA_TMP1;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958581":{"id":2958581,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":235671163,"x":-608,"y":-48,"width":32,"height":32,"inputConnectorIDs":[2958554,2958637],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958553],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958582":{"id":2958582,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-299,"y":-246,"width":32,"height":32,"inputConnectorIDs":[2958559],"outputSuccessConnectorIDs":[2958556,2958578],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of load WH to Large"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"LOAD_WH"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WAREHOUSE_SIZE"},"2":{"slot":2,"type":"STRING","value":"LARGE"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958583":{"id":2958583,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-304,"y":-160,"width":32,"height":32,"inputConnectorIDs":[2958556],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958552],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dt_account_period_data"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse load_wh;\n\nSET TIMEZONE = 'America/Los_Angeles';\n\nDROP TABLE IF EXISTS ush.dt_account_period_data_tmp;\nCREATE TABLE ush.dt_account_period_data_tmp\nAS\n(\n      SELECT\n        a.unique_account_id,\n\t\t\t\tfloor((date - inception_date::date) / 30.0) AS thirty_day_periods_since_inception,\n        (floor((date - inception_date::date) / 30.0) * 30)::decimal || '-' || ((floor((date - inception_date::date) / 30.0) + 1) * 30 - 1)::decimal || ' Days' AS day_buckets_since_inception,\n        avg(daily_balance)                    AS average_balance,\n        min(daily_balance)                    AS lowest_balance,\n        max(daily_balance)                    AS peak_balance,\n        avg(original_balance)                 AS average_balance_actual,\n        min(original_balance)                 AS lowest_balance_actual,\n        max(original_balance)                 AS peak_balance_actual,\n        avg(spend_daily_balance)              AS average_spend_balance_actual,\n        min(spend_daily_balance)              AS lowest_spend_balance_actual,\n        max(spend_daily_balance)              AS peak_spend_balance_actual,\n        avg(save_daily_balance)               AS average_save_balance_actual,\n        min(save_daily_balance)               AS lowest_save_balance_actual,\n        max(save_daily_balance)               AS peak_save_balance_actual,\n        sum(dbt_card_no_pin_amount)           AS debit_card_no_pin_amount,\n        sum(dbt_card_pin_amount)              AS debit_card_pin_amount,\n        sum(aim_debit_count)                  AS aim_scored_transactions,\n        sum(aim_debit_amount)                 AS aim_scored_transactions_amount,\n        sum(dbt_card_no_pin_count)            AS debit_card_no_pin_transactions,\n        sum(dbt_card_pin_count)               AS debit_card_pin_transactions,\n        sum(daily_bill_pay_amount)            AS bill_pay_amount,\n        sum(ach_withdrawal_amount)            AS ach_withdrawal_amount,\n        sum(ach_deposit_amount)               AS ach_deposit_amount,\n        sum(atm_deposit_amount)               AS atm_deposit_amount,\n        sum(atm_withdrawal_amount)            AS atm_withdrawal_amount,\n        sum(wire_withdrawal_amount)           AS wire_withdrawal_amount,\n        sum(wire_deposit_amount)              AS wire_deposit_amount,\n        sum(internal_transfer_deposit)        AS internal_transfer_deposit,\n        sum(internal_transfer_withdrawal)     AS internal_transfer_withdrawal,\n        sum(check_withdrawal_amount)          AS check_withdrawal_amount,\n        sum(check_deposit_amount)             AS check_deposit_amount,\n        sum(actual_pwif_paid)                 AS actual_pwif_paid,\n        sum(promo)                            AS promo,\n        sum(cashback)                         AS cashback,\n        sum(a.atm_fee_refund_amount)          AS atm_fee_refund_amount,\n        sum(interest_amount)                  AS interest_amount,\n        sum(wire_withdrawal_count)            AS wire_withdrawal_count,\n        sum(wire_deposit_count)               AS wire_deposit_count,\n        sum(ach_deposit_count)                AS ach_deposit_count,\n        sum(ach_withdrawal_count)             AS ach_withdrawal_count,\n        sum(atm_deposit_count)                AS atm_deposit_count,\n        sum(atm_withdrawal_count)             AS atm_withdrawal_count,\n        sum(check_withdrawal_count)           AS check_withdrawal_count,\n        sum(check_deposit_count)              AS check_deposit_count,\n        max(largest_ach_deposit_amount)       AS largest_ach_deposit_amount,\n        min(largest_ach_withdrawal_amount)    AS largest_ach_withdrawal_amount,\n        min(largest_dbt_card_no_pin_amount)   AS largest_dbt_card_no_pin_amount,\n        min(largest_dbt_card_pin_amount)      AS largest_dbt_card_pin_amount,\n        max(largest_check_deposit_amount)     AS largest_check_deposit_amount,\n        min(largest_check_withdrawal_amount)  AS largest_check_withdrawal_amount,\n        max(largest_wire_deposit_amount)      AS largest_wire_deposit_amount,\n        min(largest_wire_withdrawal_amount)   AS largest_wire_withdrawal_amount,\n        max(largest_atm_deposit_amount)       AS largest_atm_deposit_amount,\n        min(largest_atm_withdrawal_amount)    AS largest_atm_withdrawal_amount,\n        sum(other_deposit_count)              AS other_deposit_count,\n        sum(other_deposit_amount)             AS other_deposit_amount,\n        sum(other_withdrawal_count)           AS other_withdrawal_count,\n        sum(other_withdrawal_amount)          AS other_withdrawal_amount\n      FROM bi.dt_account_daily_data a inner JOIN ush.dt_accounts b\n          on a.unique_account_id = b.unique_account_id\n      GROUP BY 1, 2, 3\n  );\n\ndrop table if exists ush.last_dates;\ncreate table ush.last_dates as (\n      SELECT\n        a.unique_account_id,\n        floor((date - inception_date::date) / 30.0) as thirty_day_periods_since_inception,\n        (floor((date - inception_date::date) / 30.0) * 30)::decimal || '-' || ((floor((date - inception_date::date) / 30.0) + 1) * 30 - 1)::decimal || ' Days' as day_buckets_since_inception,\n        max(date)                             AS last_day_of_period\n      FROM bi.dt_account_daily_data a inner JOIN ush.dt_accounts b\n          on a.unique_account_id = b.unique_account_id\n      GROUP BY 1, 2);\n\ndrop table if exists ush.end_of_period_data;\ncreate table ush.end_of_period_data AS (\n      SELECT\n        b.unique_account_id,\n        a.thirty_day_periods_since_inception,\n        a.day_buckets_since_inception,\n        b.yearly_percent_fee_setting,\n        b.monthly_usd_fee_setting,\n        daily_balance AS end_of_period_balance,\n        original_balance AS end_of_period_balance_actual,\n        spend_daily_balance AS end_of_period_spend_balance_actual,\n        save_daily_balance AS end_of_period_save_balance_actual,\n        is_terminated,\n        is_funded\n      FROM ush.last_dates a INNER JOIN bi.dt_account_daily_data b\n          ON a.unique_account_id = b.unique_account_id AND a.last_day_of_period = b.date);\n\ndrop table if exists ush.dt_account_period_data;\n\ncreate table ush.dt_account_period_data as (\nSELECT\n    a.unique_account_id,\n    a.thirty_day_periods_since_inception,\n    a.day_buckets_since_inception,\n    a.peak_balance,\n    a.average_balance,\n    a.lowest_balance,\n    a.peak_balance_actual,\n    a.average_balance_actual,\n    a.lowest_balance_actual,\n    a.peak_spend_balance_actual,\n    a.average_spend_balance_actual,\n    a.lowest_spend_balance_actual,\n    b.end_of_period_spend_balance_actual,\n    a.peak_save_balance_actual ,\n    a.average_save_balance_actual,\n    a.lowest_save_balance_actual,\n    b.end_of_period_save_balance_actual,\n    a.aim_scored_transactions,\n    a.debit_card_pin_amount,\n    a.debit_card_no_pin_amount,\n    a.debit_card_pin_transactions,\n    a.debit_card_no_pin_transactions,\n    a.bill_pay_amount,\n    b.end_of_period_balance,\n    b.end_of_period_balance_actual,\n    b.yearly_percent_fee_setting,\n    CASE WHEN account_type = 'Checking'\n      THEN b.monthly_usd_fee_setting\n    ELSE b.yearly_percent_fee_setting * average_balance / 12 END AS monthly_usd_fee_setting,\n    b.is_terminated,\n    b.is_funded,\n    a.ach_deposit_amount,\n    a.ach_withdrawal_amount,\n    a.check_deposit_amount,\n    a.actual_pwif_paid,\n    a.promo,\n    a.cashback,\n    a.check_withdrawal_amount,\n    a.wire_deposit_amount,\n    a.wire_withdrawal_amount,\n    a.atm_deposit_amount,\n    a.atm_withdrawal_amount,\n    a.atm_fee_refund_amount,\n    a.interest_amount,\n    a.wire_withdrawal_count,\n    a.wire_deposit_count,\n    a.internal_transfer_deposit,\n    a.internal_transfer_withdrawal,\n    a.ach_deposit_count,\n    a.ach_withdrawal_count,\n    a.atm_deposit_count,\n    a.atm_withdrawal_count,\n    a.check_withdrawal_count,\n    a.check_deposit_count,\n    a.largest_ach_deposit_amount,\n    a.largest_ach_withdrawal_amount,\n    a.largest_dbt_card_no_pin_amount,\n    a.largest_dbt_card_pin_amount,\n    a.largest_check_deposit_amount,\n    a.largest_check_withdrawal_amount,\n    a.largest_wire_deposit_amount,\n    a.largest_wire_withdrawal_amount,\n    a.largest_atm_deposit_amount,\n    a.largest_atm_withdrawal_amount,\n    a.other_deposit_count,\n    a.other_deposit_amount,\n    a.other_withdrawal_count,\n    a.other_withdrawal_amount,\n    ROW_NUMBER() OVER(order by a.unique_account_id) AS unique_id\n  FROM ush.dt_account_period_data_tmp a INNER JOIN ush.end_of_period_data b\n      ON a.unique_account_id = b.unique_account_id AND\n         a.thirty_day_periods_since_inception = b.thirty_day_periods_since_inception\n    INNER JOIN ush.dt_accounts acc\n      ON a.unique_account_id = acc.unique_account_id\n);\n\n/*\nDROP TABLE IF EXISTS ush.dt_account_period_data;\n\nCREATE TABLE ush.dt_account_period_data\nAS\n(\n  select\n    *,\n\n    ROW_NUMBER() OVER(order by unique_account_id) AS unique_id\n  FROM ush.dt_account_period_data_tmp1)\n;\n*/\n\ndrop table if exists ush.DT_ACCOUNT_PERIOD_DATA_TMP;\ndrop table if exists ush.DT_ACCOUNT_PERIOD_DATA_TMP1;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958584":{"id":2958584,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-704,"y":-192,"width":32,"height":32,"inputConnectorIDs":[2958557],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958554],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dt_user_monthly_data"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--DATA-1218\n\n\nuse warehouse dev;\n\nSET TIMEZONE = 'America/Los_Angeles';\n\nDROP TABLE IF EXISTS ush.dt_user_monthly_data;\n\nCREATE TABLE ush.dt_user_monthly_data \n--cluster by (user_id)\nAS\n(\n    WITH end_of_month_data AS (SELECT\n                                 b.user_id,\n                                 a.month,\n                                 b.daily_total_assets         AS end_of_month_assets,\n                                 b.daily_total_assets_actual  AS end_of_month_assets_actual,\n                                 b.daily_summit_assets_actual AS end_of_month_summit_assets_actual,\n                                 b.daily_summit_spend_assets_actual AS end_of_month_summit_spend_assets_actual,\n                                 b.daily_summit_save_assets_actual  AS end_of_month_summit_save_assets_actual,                               \n                                 b.monthly_usd_fee_setting    AS total_monthly_usd_fee_setting,\n                                 b.yearly_percent_fee_setting AS total_yearly_percent_fee_setting,\n                                 b.opened_accounts            AS opened_accounts\n                               FROM (\n                                      SELECT\n                                        date_trunc('month', convert_timezone('America/Los_Angeles',date)) :: DATE AS month,\n                                        max(date)                         AS max_date\n                                      FROM bi.dt_user_daily_data\n                                      GROUP BY 1\n                                    ) a INNER JOIN bi.dt_user_daily_data b\n                                   ON a.max_date = b.date)\n      , avg_data AS (\n        SELECT\n          a.user_id,\n          date_trunc('month', convert_timezone('America/Los_Angeles',date)) :: DATE AS month,\n          avg(daily_total_assets)           AS average_daily_assets,\n          min(daily_total_assets)           AS min_daily_assets,\n          max(daily_total_assets)           AS peak_assets,\n          max(daily_summit_assets)          as peak_summit_assets,\n          avg(daily_total_assets_actual)           AS average_daily_assets_actual,\n          min(daily_total_assets_actual)           AS min_daily_assets_actual,\n          max(daily_total_assets_actual)           AS peak_assets_actual,\n          avg(daily_summit_assets_actual)          AS average_summit_assets_actual,\n          min(daily_summit_assets_actual)          AS min_summit_assets_actual,\n          max(daily_summit_assets_actual)          AS peak_summit_assets_actual,\n          avg(daily_summit_spend_assets_actual)    AS average_summit_spend_assets_actual,\n          min(daily_summit_spend_assets_actual)    AS min_summit_spend_assets_actual,\n          max(daily_summit_spend_assets_actual)    AS peak_summit_spend_assets_actual,\n          avg(daily_summit_save_assets_actual)     AS average_summit_save_assets_actual,\n          min(daily_summit_save_assets_actual)     AS min_summit_save_assets_actual,\n          max(daily_summit_save_assets_actual)     AS peak_summit_save_assets_actual,\n          max(daily_investment_assets_actual)      AS peak_investment_assets_actual,          \n          max(case when daily_investment_assets > 0\n            then daily_investment_assets\n              else null end)                as peak_investment_assets,\n          sum(case when has_ios_login or has_android_login or has_web_login\n            then 1\n              else 0 end)                   as unique_daily_logins,\n          sum(case when has_ios_login\n            then 1\n              else 0 end)                   as unique_ios_daily_logins,\n          sum(case when has_android_login\n            then 1\n              else 0 end)                   as unique_android_daily_logins,\n          sum(case when has_web_login\n            then 1\n              else 0 end)                   as unique_web_daily_logins,\n          sum(num_funded_daily_referrals)   as num_funded_monthly_referrals,\n          max(nps_score) as nps_score\n        FROM bi.dt_user_daily_data a\n        GROUP BY 1, 2\n    )\n\n    SELECT\n      a.user_id,\n      a.month,\n      a.total_yearly_percent_fee_setting,\n      a.total_monthly_usd_fee_setting,\n      coalesce(c.total_fee_billed, 0) as total_fee_billed,\n      a.end_of_month_assets,\n      a.end_of_month_assets_actual,\n      a.end_of_month_summit_assets_actual,\n      a.end_of_month_summit_spend_assets_actual,\n      a.end_of_month_summit_save_assets_actual,    \n      a.opened_accounts,\n      b.average_daily_assets,\n      b.min_daily_assets,\n      b.peak_assets,\n      b.peak_summit_assets,\n      b.peak_investment_assets,\n      b.average_daily_assets_actual,\n      b.min_daily_assets_actual,\n      b.peak_assets_actual,\n      b.average_summit_assets_actual,\n      b.min_summit_assets_actual,\n      b.peak_summit_assets_actual,\n      b.average_summit_spend_assets_actual,\n      b.min_summit_spend_assets_actual,\n      b.peak_summit_spend_assets_actual,\n      b.average_summit_save_assets_actual,\n      b.min_summit_save_assets_actual,\n      b.peak_summit_save_assets_actual,\n      b.peak_investment_assets_actual,    \n      b.unique_daily_logins,\n      b.unique_ios_daily_logins,\n      b.unique_android_daily_logins,\n      b.unique_web_daily_logins,\n      b.num_funded_monthly_referrals,\n      b.nps_score,\n\n      ROW_NUMBER() OVER(order by null) AS unique_id\n    FROM end_of_month_data a INNER JOIN avg_data b\n        ON a.user_id = b.user_id AND a.month = b.month\n      left JOIN (\n                  select\n                    user_id,\n                    month,\n                    sum(billed_pwif_this_month) as total_fee_billed\n                  FROM bi.dt_account_monthly_data a inner JOIN bi.dt_accounts b\n                      on a.unique_account_id = b.unique_account_id\n                  group by 1, 2) c\n        on a.user_id = c.user_id and a.month = c.month\n  )\n;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958585":{"id":2958585,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-512,"y":-160,"width":32,"height":32,"inputConnectorIDs":[2958579],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958637],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dt_user_daily_data"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse dev;\n\nSET TIMEZONE = 'America/Los_Angeles';\n--audit trail data for logins\ndrop table if exists tmp_audit_trail;\ncreate temp table tmp_audit_trail\n--cluster by (user_id) \nas\nselect user_id,\n       date_created::date as date_created,\n       client_id,\n       ip_address,\n       mobile_platform\nfrom web_db.user_audit_trail\nwhere audit_trail ilike 'Logged In';\n\nDROP TABLE IF EXISTS ush.dt_user_daily_data;\nCREATE TABLE ush.dt_user_daily_data\n--cluster by (user_id)\nAS\n(\n  with ios_logins AS (\n      SELECT\n        date_created :: date as date,\n        user_id,\n        count(*) as count\n      FROM tmp_audit_trail\n      WHERE ((client_id = '3827973437184' and ip_address not like '206.108.41.10%')\n               OR mobile_platform = 'ios')\n      GROUP BY 1, 2\n  ),\n      android_logins AS (\n        SELECT\n          date_created :: date as date,\n          user_id,\n          count(*) as count\n        FROM tmp_audit_trail\n        WHERE ((client_id = '171738288438772' and ip_address not like '206.108.41.10%')\n                 OR mobile_platform in ('android','Android'))\n        GROUP BY 1, 2\n    ),\n      web_logins AS (\n        SELECT\n          date_created :: date as date,\n          user_id,\n          count(*) as count\n        FROM tmp_audit_trail\n        WHERE (((client_id NOT IN ('171738288438772', '3827973437184') OR client_id IS NULL)\n                   and ip_address not like '206.108.41.10%')\n                 and (mobile_platform not in ('ios','android','Android') or mobile_platform is null))\n        GROUP BY 1, 2\n    ),\n      ace_tickets_10_min AS (\n        SELECT\n          user_id,\n          most_recent_prior_login::date as date,\n          count(*) as ticket_count\n        FROM bi.dt_ace_tickets\n        WHERE datediff(min,most_recent_prior_login::timestamp,created_at::timestamp) <= 10\n        GROUP BY 1, 2\n    ),\n\n\tfunded_refer as (\n\t\tselect u.inviting_user_id,\n\t\t\t\tu.date_created::date as inviting_date,\n\t\t\t\tu.invited_user_id\n\t\tFROM web_db.user_signup u\n               left join bi.dt_accounts a on u.invited_user_id = a.user_id\n\t\t\t   \t\t\t\t\t\t\t\t and a.account_type = 'Checking'\n\t\twhere a.initial_transfer_posted_date is not null\n\t)\n\n\tSELECT b.user_id,\n\t\ta.date,\n\n\t\tcase\n\t\t\twhen wl.user_id is null then false\n\t\t\telse true\n\t\tend as has_web_login,\n\n\t\tcase\n\t\t\twhen il.user_id is null then false\n\t\t\telse true\n\t\tend as has_ios_login,\n\n\t\tcase\n\t\t\twhen al.user_id is null then false\n\t\t\telse true\n\t\tend as has_android_login,\n\n\t        nvl(wl.count,0) as count_web_login,\n\t        nvl(il.count,0) as count_ios_login,\n\t        nvl(al.count,0) as count_android_login,\n\t        nvl(ace.ticket_count,0) as count_ace_ticket_10_min,\n\n    nsc.nps_rating as nps_score,\n\n\t\tsum(daily_balance)           AS daily_total_assets,\n\n\t\tsum(case\n\t\t\t\twhen b.account_type = 'Checking' then daily_balance\n\t\t\t\telse null\n\t\t\tend) as daily_summit_assets,\n\n\t\tsum(case\n\t\t\t\twhen b.account_type <> 'Checking' then daily_balance\n\t\t\t\telse null\n\t\t\tend) as daily_investment_assets,\n\n     \t\tsum(original_balance)           AS daily_total_assets_actual,\n\n     \t\tsum(case\n     \t\t\t\twhen b.account_type = 'Checking' then original_balance\n     \t\t\t\telse null\n     \t\t\tend) as daily_summit_assets_actual,\n\n     \t\tsum(case\n     \t\t\t\twhen b.account_type = 'Checking' then a.spend_daily_balance\n     \t\t\t\telse null\n     \t\t\tend) as daily_summit_spend_assets_actual,\n\n     \t\tsum(case\n     \t\t\t\twhen b.account_type = 'Checking' then a.save_daily_balance\n     \t\t\t\telse null\n     \t\t\tend) as daily_summit_save_assets_actual,\n\n     \t\tsum(case\n     \t\t\t\twhen b.account_type <> 'Checking' then original_balance\n     \t\t\t\telse null\n     \t\t\tend) as daily_investment_assets_actual,\n\n\n\t\tsum(monthly_usd_fee_setting) AS monthly_usd_fee_setting,\n\n\t\tCASE\n\t\t\tWHEN sum(daily_balance) > 0 THEN sum(monthly_usd_fee_setting) * 12 / sum(daily_balance)\n\t\t\tELSE 0\n\t\tEND AS yearly_percent_fee_setting,\n\n\t\tcount(*)                     AS opened_accounts,\n\n\t\tsum(case\n\t\t\twhen fr.invited_user_id is not null then 1\n\t\t\telse 0 end ) \t\t\tAS num_funded_daily_referrals\n\n\tFROM bi.dt_account_daily_data a\n\tINNER JOIN bi.dt_accounts b ON a.unique_account_id = b.unique_account_id\n\tleft JOIN web_logins wl on b.user_id = wl.user_id and a.date = wl.date\n\tleft JOIN ios_logins il on b.user_id = il.user_id and a.date = il.date\n\tleft JOIN android_logins al on b.user_id = al.user_id and a.date = al.date\n\tleft JOIN ace_tickets_10_min ace on b.user_id = ace.user_id and a.date = ace.date\n\tleft join funded_refer fr on b.user_id = fr.inviting_user_id\n\t\t\t\t\t\t\t\tand a.date = fr.inviting_date\n\t\t\t\t\t\t\t\tand b.account_type = 'Checking'\n  left join (\n    SELECT\n      da.user_id,\n      nsc.pull_date,\n      nps_rating\n    FROM dataops_ace_db.nps_survey_candidate nsc\n    JOIN bi.dt_accounts da ON nsc.unique_account_id=da.unique_account_id\n    WHERE 1=1\n      AND nsc.zendesk_nps_survey_id is not null\n      AND nps_rating is not null\n    ) nsc ON b.user_id=nsc.user_id AND nsc.pull_date=a.date\n\tGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n)\n;\n\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958586":{"id":2958586,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-608,"y":64,"width":32,"height":32,"inputConnectorIDs":[2958553],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dev WH to xsmall"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DEV"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WAREHOUSE_SIZE"},"2":{"slot":2,"type":"STRING","value":"XSMALL"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"AUTO_SUSPEND"},"2":{"slot":2,"type":"STRING","value":"10"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958587":{"id":2958587,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-512,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2958555],"outputSuccessConnectorIDs":[2958557,2958579],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dev WH to Large"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DEV"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WAREHOUSE_SIZE"},"2":{"slot":2,"type":"STRING","value":"LARGE"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958590":{"id":2958590,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-400,"y":-288,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958555,2958559],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2958556":{"id":2958556,"sourceID":2958582,"targetID":2958583},"2958557":{"id":2958557,"sourceID":2958587,"targetID":2958584},"2958578":{"id":2958578,"sourceID":2958582,"targetID":2958580},"2958579":{"id":2958579,"sourceID":2958587,"targetID":2958585}},"failureConnectors":{},"unconditionalConnectors":{"2958551":{"id":2958551,"sourceID":2958580,"targetID":2958577},"2958552":{"id":2958552,"sourceID":2958583,"targetID":2958577},"2958553":{"id":2958553,"sourceID":2958581,"targetID":2958586},"2958554":{"id":2958554,"sourceID":2958584,"targetID":2958581},"2958555":{"id":2958555,"sourceID":2958590,"targetID":2958587},"2958558":{"id":2958558,"sourceID":2958577,"targetID":2958576},"2958559":{"id":2958559,"sourceID":2958590,"targetID":2958582},"2958637":{"id":2958637,"sourceID":2958585,"targetID":2958581}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{}},"info":{"name":"dt_testing","description":null,"type":"ORCHESTRATION","tag":"610d27e7-d166-4d05-9f1b-80bd01d883fd"}}