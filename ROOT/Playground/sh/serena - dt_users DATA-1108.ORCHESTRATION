{"job":{"components":{"2958562":{"id":2958562,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-432,"y":-48,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958588],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958589":{"id":2958589,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-304,"y":-48,"width":32,"height":32,"inputConnectorIDs":[2958588],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dt_users"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SET TIMEZONE = 'America/Los_Angeles';\nUSE WAREHOUSE ETL;\n\n--3 temp tables below are used to extract segment url data\ndrop table if exists tmp_segment_lead;\ncreate temp table tmp_segment_lead as\nwith seg as (\n    select\n           --nullif(trim(user_id), '') as user_id,\n           email,\n           nullif(trim(context_campaign_source),'') as context_campaign_source,\n           nullif(trim(context_campaign_medium),'') as context_campaign_medium,\n           nullif(trim(context_campaign_term),'') as context_campaign_term,\n           nullif(trim(context_campaign_content),'') as context_campaign_content,\n           nullif(trim(context_campaign_name),'') as context_campaign_name,\n           case when context_page_search like '%click_id%'\n                then context_page_search\n                else null end as context_page_search,\n           case when context_page_referrer like '%click_id%'\n                then context_page_referrer\n                else null end as context_page_referrer,\n           received_at,\n           row_number() over (partition by email order by received_at nulls last) as rn\n    from segment_events.prod_segment_js.email_lead_submitted\n    where (context_page_search like '%click_id%'\n             or context_page_referrer like '%click_id%')\n      and nullif(trim(email), '') is not null\n)\nselect *,\n       nvl(context_page_referrer, context_page_search) as url\nfrom seg\nwhere rn = 1;\n\ndrop table if exists tmp_segment_pages;\ncreate temp table tmp_segment_pages as\nwith email as (\n    select\n        user_id,\n        email,\n        row_number() over (partition by user_id order by date_created desc nulls last) as rn\n    from web_db.user_email\n    where is_primary = true\n),\nseg as (\n    select\n           u.id as user_id,\n           e.email,\n           nullif(trim(p.context_campaign_source),'') as context_campaign_source,\n           nullif(trim(p.context_campaign_medium),'') as context_campaign_medium,\n           nullif(trim(p.context_campaign_term),'') as context_campaign_term,\n           nullif(trim(p.context_campaign_content),'') as context_campaign_content,\n           nullif(trim(p.context_campaign_name),'') as context_campaign_name,\n           case when p.context_page_search like '%click_id%'\n                then p.context_page_search\n                else null end as context_page_search,\n           case when p.context_page_referrer like '%click_id%'\n                then p.context_page_referrer\n                else null end as context_page_referrer,\n           p.received_at,\n           row_number() over (partition by p.user_id order by p.received_at nulls last) as rn\n    from segment_events.prod_segment_js.pages p\n    join web_db._user u on p.user_id = u.uuid\n    join email e on u.id = e.user_id and e.rn = 1\n    where (p.context_page_search like '%click_id%'\n             or p.context_page_referrer like '%click_id%')\n)\nselect *,\n       nvl(context_page_referrer, context_page_search) as url\nfrom seg\nwhere rn = 1;\n\ndrop table if exists etl.segment_url;\ncreate table etl.segment_url as\nwith combined as (\n    select email, received_at, url, context_campaign_source, context_campaign_name,\n           context_campaign_medium, context_campaign_term, context_campaign_content\n    from tmp_segment_lead\n    union\n    select email, received_at, url, context_campaign_source, context_campaign_name,\n           context_campaign_medium, context_campaign_term, context_campaign_content\n    from tmp_segment_pages\n    ),\ncombined_rn as (\n    select *,\n           row_number() over (partition by email order by received_at asc nulls last) as rn\n    from combined\n)\nselect *\nfrom combined_rn\nwhere rn = 1;\n\n--table to exclude users who only have the PYC Lite product\ndrop table if exists tmp_pyc_lite_only;\ncreate temp table tmp_pyc_lite_only as\nwith pyc_lite as (\n    select distinct USER_ID\n    from WEB_DB.USER_PRODUCT_APPLICATION upa\n    join WEB_DB.PRODUCT p on upa.PRODUCT_ID = p.id\n    where p.CODE = 'PYC-LITE'\n)\n, non_pyc_lite as (\n    select distinct USER_ID\n    from WEB_DB.USER_PRODUCT_APPLICATION upa\n    join WEB_DB.PRODUCT p on upa.PRODUCT_ID = p.id\n    where p.CODE != 'PYC-LITE'\n)\nselect pl.USER_ID\nfrom pyc_lite pl\nleft join non_pyc_lite npl on pl.USER_ID = npl.USER_ID\nwhere npl.USER_ID is null;\n\n--two temp tables below are used to identify credit leads\ndrop table if exists tmp_credit_lead_email;\ncreate temp table tmp_credit_lead_email as\nselect email\nfrom WEB_DB.WAIT_LIST_USER\nwhere PRODUCT_ID = 8\nunion\nselect email\nfrom WEB_DB.PRODUCT_WAITLIST\nwhere PRODUCT_ID = 8\nunion\nselect email\nfrom WEB_DB.USER_INVITATION\nwhere PRODUCT_ID = 8;\n\ndrop table if exists tmp_credit_lead_user_id;\ncreate temp table tmp_credit_lead_user_id as\nselect distinct INVITED_USER_ID as USER_ID\nfrom WEB_DB.USER_SIGNUP a\njoin WEB_DB.PRODUCT_WAITLIST b on a.PRODUCT_WAITLIST_ID = b.ID\nwhere b.PRODUCT_ID = 8;\n\n--etl.dt_users will be used as a base for both non-credit and credit versions of dt_users\nDROP TABLE IF EXISTS etl.dt_users;\nCREATE TABLE etl.dt_users\nAS (\n   WITH\n      users AS (\n         WITH\n            attribution_data AS (\n               WITH\n                  cte_ref_domain AS (\n                     SELECT id\n                          --remove trailing period, :####, and empty strings\n                          , lower(nullif(trim(split_part(CASE WHEN right(referral_domain,1) = '.'\n                                                                 THEN left(referral_domain,len(referral_domain) - 1)\n                                                              ELSE referral_domain\n                                                              END,':',1)),'')) AS referral_domain_clean\n                     FROM web_db.wait_list_user\n                     ),\n                  cte_ref_domain_scrubbed AS (\n                     SELECT id\n                          , CASE WHEN referral_domain_clean IS NULL THEN 'direct'\n                        --when all numbers or there = no period, keep as is\n                                 WHEN try_to_numeric(regexp_replace(referral_domain_clean,'[.]','')) is not null OR\n                                      charindex('.',referral_domain_clean) = 0 THEN referral_domain_clean\n                                 ELSE\n                                    --handle two-part (.com.uk) versus one-part (.com) top level domain\n                                    CASE WHEN left(reverse(left(reverse(referral_domain_clean),6)),4) IN\n                                              ('.co.','com.') AND referral_domain_clean ILIKE '%.co%'\n                                            THEN reverse(split_part(reverse(referral_domain_clean),'.',3))\n                                         ELSE reverse(split_part(reverse(referral_domain_clean),'.',2))\n                                         END\n                                 END AS referral_domain_clean\n                     FROM cte_ref_domain\n                     ),\n                   cte_waitlist AS (\n                        select\n                            wl.id,\n                            wl.email,\n                            wl.date_created,\n                            wl.utm_content,\n                            wl.utm_campaign,\n                            wl.utm_medium,\n                            wl.utm_source,\n                            wl.utm_term,\n                            wl.product_id,\n                            nvl(nullif(trim(wl.initial_url),''),su.url) as initial_url,\n                            wl.referral_url,\n                            wl.account_type_id\n                        from web_db.wait_list_user wl\n                        left join etl.segment_url su on wl.email = su.email\n                                                    and wl.date_created::date = su.received_at::date\n                                                    and ifnull(nullif(trim(wl.utm_campaign),''),'99999') = ifnull(su.context_campaign_name,'99999')\n                                                    and ifnull(nullif(trim(wl.utm_source),''),'99999') = ifnull(su.context_campaign_source,'99999')\n                   )\n               SELECT CASE WHEN ui.code = 'mi' THEN 'iOS Signup'\n                           WHEN ui.code = 'ma' THEN 'Android Signup'\n                           WHEN ui.inviting_user_id > 1 OR ui.id IS NULL THEN 'Referral'\n                           WHEN ui.id IS NOT NULL THEN 'Web Signup'\n                           ELSE 'Unknown'\n                           END AS lead_source\n                    , CASE WHEN ui.code IN ('mi','ma') THEN us.date_created\n                           WHEN wl.id IS NOT NULL THEN wl.date_created\n                           WHEN ui.id IS NOT NULL THEN ui.date_created\n                           ELSE us.date_created\n                           END AS lead_arrival_date\n                    , coalesce(ue.email,ui.email,wl.email) AS user_email\n                    , ui.id AS user_invitation_id\n                    , CASE WHEN wl.id IS NULL OR ui.code IN ('mi','ma') THEN FALSE ELSE TRUE END AS is_wait_list_user\n                    , CASE WHEN ui.id IS NULL OR ui.code IN ('mi','ma') THEN FALSE ELSE TRUE END AS is_invitation_sent\n                    , CASE WHEN us.id IS NULL THEN FALSE ELSE TRUE END AS is_signed_up\n                    , wl.utm_source AS utm_source\n                    , case when up.SHOW_IN_DASHBOARD = true then 'Partner' else null end as utm_category                                                      \n                    , wl.utm_medium AS utm_medium\n                    , wl.utm_term AS utm_term\n                    , wl.utm_content AS utm_content\n                    , wl.utm_campaign AS utm_campaign\n                    , regexp_substr(wl.initial_url,'click_?id=([^&]*)',1,1,'e') AS utm_click_id\n                    , regexp_substr(wl.initial_url,'sub_?id1?=([^&]*)',1,1,'e') AS utm_click_sub_id\n                    , regexp_substr(wl.initial_url,'sub_?id2=([^&]*)',1,1,'e') AS utm_click_sub_id2\n                    , regexp_substr(wl.initial_url,'sub_?id3=([^&]*)',1,1,'e') AS utm_click_sub_id3\n                    , wl.initial_url AS utm_initial_url\n                    , regexp_replace(wl.initial_url,'(.*&gclid=([^&]*))?(.*)','$2') AS gcl_id\n                    , rds.referral_domain_clean AS referral_domain\n                    , wl.referral_url\n                    , CASE WHEN wl.product_id = 1 AND wl.account_type_id = 2 THEN 'Redwood Individual'\n                           WHEN wl.product_id = 1 AND wl.account_type_id = 3 THEN 'Redwood IRA'\n                           WHEN wl.product_id = 2 AND wl.account_type_id = 2 THEN 'Flagship Individual'\n                           WHEN wl.product_id = 2 AND wl.account_type_id = 3 THEN 'Flagship IRA'\n                           WHEN wl.product_id IN (3,4) THEN 'Checking'\n                           WHEN wl.product_id = 8 THEN 'Credit'                \n                           ELSE 'Unattributed'\n                           END AS initial_product_selected\n                    , CASE WHEN ui.inviting_user_id > 1 OR us.inviting_user_id > 1 THEN TRUE\n                           ELSE FALSE\n                           END AS is_referral\n                    , u.id AS user_id\n                    , CASE WHEN u.id IS NOT NULL THEN TRUE ELSE FALSE END AS has_entered_credentials\n                    , u.date_created AS entered_credentials_date\n                    , u.uuid AS external_user_id\n                    , NOT u.enabled AS user_disabled\n                    , utm_lander\n                    , nvl(cmp1.value, split_part(wl.utm_campaign,'-',1)) AS utm_campaign_product\n                    , nvl(cmp2.value, ltrim(regexp_substr(wl.utm_campaign,'-.*',1),'-')) AS utm_campaign_marketing_campaign\n                    , nvl(cnt1.value, split_part(wl.utm_content,'-',1)) AS utm_content_creative_type\n                    , nvl(cnt2.value, split_part(wl.utm_content,'-',2)) AS utm_content_creative_description\n                    , nvl(cnt3.value, split_part(wl.utm_content,'-',3)) AS utm_content_cta\n                    , nvl(cnt4.value, split_part(wl.utm_content,'-',4)) AS utm_content_placement\n                    , nvl(cnt5.value, split_part(wl.utm_content,'-',5)) AS utm_content_variable\n                    , decode(regexp_replace(wl.utm_content,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$|(((-)[^-]+){4})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9$12$12$12$12$12')\n                       , '-----', split_part(split_part(wl.utm_content,'-',6),' ',2)\n                       ) AS utm_content_ad_id\n                    , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', trm1.value\n                       , '------', trm1.value\n                       ) AS utm_term_audience_type\n                    , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', trm2.value\n                       , '------', null\n                       ) AS utm_term_seed_audience\n                    , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', trm3.value\n                       , '------', null\n                       ) AS utm_term_lal_percentage\n                    , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', trm4.value\n                       , '------', null\n                       ) AS utm_term_messaging\n                    , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', null\n                       , '------', split_part(wl.utm_term,'-',2)\n                       ) AS utm_term_ad_id\n                    , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', null\n                       , '------', split_part(wl.utm_term,'-',3)\n                       ) AS utm_term_ad_platform\n                    , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', null\n                       , '------', split_part(wl.utm_term,'-',4)\n                       ) AS utm_term_ad_placement\n                    , decode(regexp_replace(wl.utm_term,'(^([^-]-[^-]+)((((-)[^-]+){3})$|(((-)[^-]+){5})$))|(^.*$)','$6$6$6$6$9$9$9$9$9$9')\n                       , '----', split_part(wl.utm_term,'-',5)\n                       , '------', split_part(wl.utm_term,'-',5) || rtrim(concat(' ',split_part(wl.utm_term,'-',6))) || rtrim(concat(' ',split_part(wl.utm_term,'-',7)))\n                       ) AS utm_term_start_date\n                    , us.inviting_user_id\n                    , CASE WHEN started_applications.user_id IS NULL THEN FALSE ELSE TRUE END AS has_started_application\n                    , CASE WHEN entered_funding.user_id IS NULL THEN FALSE ELSE TRUE END AS has_entered_funding_amount\n                    , CASE WHEN entered_fee.user_id IS NULL THEN FALSE ELSE TRUE END AS has_entered_fee\n                    , coalesce(ue.is_validated,FALSE) AS has_validated_email\n\n               FROM web_db._user u\n               LEFT JOIN web_db.user_signup us ON u.id = us.invited_user_id\n               LEFT JOIN (select *,\n                             row_number() over (partition by user_id order by last_updated desc) as rn\n                      from web_db.user_email\n                      where is_primary = true) ue ON u.id = ue.user_id AND ue.rn = 1\n               FULL OUTER JOIN web_db.user_invitation ui ON us.user_invitation_id = ui.id\n               FULL OUTER JOIN cte_waitlist wl ON wl.email = ui.email\n               LEFT JOIN web_db.dt_utm_fields_master utm ON utm.utm_generated_url_final = wl.initial_url\n               LEFT JOIN cte_ref_domain_scrubbed rds ON wl.id = rds.id\n\n               LEFT JOIN rdl.utm_lookup cmp1 ON cmp1.utm = 'Campaign' AND cmp1.part = '1' AND lower(cmp1.code) = lower(split_part(wl.utm_campaign,'-',1))\n               LEFT JOIN rdl.utm_lookup cmp2 ON cmp2.utm = 'Campaign' AND cmp2.part = '2' AND lower(cmp2.code) = lower(split_part(wl.utm_campaign,'-',2))\n               LEFT JOIN rdl.utm_lookup cnt1 ON cnt1.utm = 'Content'  AND cnt1.part = '1' AND lower(cnt1.code) = lower(split_part(wl.utm_content,'-',1))\n               LEFT JOIN rdl.utm_lookup cnt2 ON cnt2.utm = 'Content'  AND cnt2.part = '2' AND lower(cnt2.code) = lower(split_part(wl.utm_content,'-',2))\n               LEFT JOIN rdl.utm_lookup cnt3 ON cnt3.utm = 'Content'  AND cnt3.part = '3' AND lower(cnt3.code) = lower(split_part(wl.utm_content,'-',3))\n               LEFT JOIN rdl.utm_lookup cnt4 ON cnt4.utm = 'Content'  AND cnt4.part = '4' AND lower(cnt4.code) = lower(split_part(wl.utm_content,'-',4))\n               LEFT JOIN rdl.utm_lookup cnt5 ON cnt5.utm = 'Content'  AND cnt5.part = '5' AND lower(cnt5.code) = lower(split_part(wl.utm_content,'-',5))\n               LEFT JOIN rdl.utm_lookup trm1 ON trm1.utm = 'Term'     AND trm1.part = '1' AND lower(trm1.code) = lower(split_part(wl.utm_term,'-',1))\n               LEFT JOIN rdl.utm_lookup trm2 ON trm2.utm = 'Term'     AND trm2.part = '2' AND lower(trm2.code) = lower(split_part(wl.utm_term,'-',2))\n               LEFT JOIN rdl.utm_lookup trm3 ON trm3.utm = 'Term'     AND trm3.part = '3' AND lower(trm3.code) = lower(split_part(wl.utm_term,'-',3))\n               LEFT JOIN rdl.utm_lookup trm4 ON trm4.utm = 'Term'     AND trm4.part = '4' AND lower(trm4.code) = lower(split_part(wl.utm_term,'-',4))\n               LEFT JOIN rdl.utm_partnership up ON wl.utm_source = up.utm_source\n               LEFT JOIN (\n                  SELECT user_id\n                  FROM web_db.user_product_application\n                  WHERE account_type_id IN (2,3)\n                  GROUP BY 1\n                  ) started_applications ON started_applications.user_id = u.id\n\n               LEFT JOIN (\n                  SELECT user_id\n                  FROM web_db.user_product_application\n                  WHERE account_type_id IN (2,3)\n                    AND ifnull(funding_amount,0) != 0\n                  GROUP BY 1\n                  ) entered_funding ON entered_funding.user_id = u.id\n\n               LEFT JOIN (\n                  SELECT user_id\n                  FROM web_db.user_product_application\n                  WHERE account_type_id IN (2,3)\n                    AND ifnull(fee_amount,0) != 0\n                  GROUP BY 1\n                  ) entered_fee ON entered_fee.user_id = u.id\n               -- exclude pyc-lite *only* users\n               LEFT JOIN tmp_pyc_lite_only plo ON u.id = plo.USER_ID\n               WHERE plo.USER_ID is null\n               ),\n            aggregated_account_data AS (\n               WITH\n                  first_account AS (\n                     SELECT user_id\n                          , unique_account_id\n                          , inception_date\n                          , funding_amount\n                          , opening_monthly_usd_fee_setting\n                          , opening_yearly_percent_fee_setting\n                          , a.account_type\n                          , funding_bank_account_id\n                          , initial_monthly_recurring_investment_amount\n                     FROM bi.dt_accounts a\n                     WHERE account_creation_order = 1\n                     ),\n                  second_account AS (\n                     SELECT user_id\n                          , unique_account_id\n                          , account_type\n                          , inception_date\n                     FROM bi.dt_accounts a\n                     WHERE account_creation_order = 2\n                     ),\n\n                  initial_transfer_post as (\n                     SELECT user_id\n                          , unique_account_id\n                          , initial_transfer_posted_date\n                     FROM bi.dt_accounts a\n                     WHERE account_type = 'Checking'\n                  )\n\n               SELECT a.user_id\n                    , fa.account_type AS first_account_type\n                    , sa.account_type AS second_account_type\n                    , fa.funding_amount AS first_account_funding_amount\n                    , fa.inception_date AS first_account_inception_date\n                    , fa.opening_monthly_usd_fee_setting AS first_account_opening_monthly_usd_fee_setting\n                    , fa.opening_yearly_percent_fee_setting AS first_account_opening_yearly_percent_fee_setting\n                    , fa.funding_bank_account_id AS first_account_funding_bank_account_id\n                    , fa.initial_monthly_recurring_investment_amount AS first_account_initial_monthly_recurring_investment_account\n                    , sa.inception_date::DATE - fa.inception_date::DATE AS days_between_first_and_second_account\n                    , date_part('year',sa.inception_date) * 12 - date_part('year',fa.inception_date) * 12 +\n                      date_part('month',sa.inception_date) -\n                      date_part('month',fa.inception_date) AS months_between_first_and_second_account\n                    , itp.initial_transfer_posted_date as initial_transfer_posted_date\n                    , BOOLOR_AGG(a.account_type = 'Checking') AS has_checking_account\n                    , BOOLOR_AGG(a.account_type = 'Flagship Individual') AS has_flagship_individual\n                    , BOOLOR_AGG(a.account_type = 'Flagship IRA') AS has_flagship_ira\n                    , BOOLOR_AGG(a.account_type = 'Redwood Individual') AS has_redwood_individual\n                    , BOOLOR_AGG(a.account_type = 'Redwood IRA') AS has_redwood_ira\n                    , sum(current_balance) AS current_total_assets\n                    , count(*) AS total_accounts_opened\n                    , CASE WHEN count(*) >= 1 THEN TRUE ELSE FALSE END AS has_opened_aspiration_account\n                    , sum(current_monthly_recurring_investment_amount) AS current_monthly_recurring_investment_amount\n\n               FROM bi.dt_accounts a\n               INNER JOIN first_account fa ON a.user_id = fa.user_id\n               LEFT JOIN second_account sa ON a.user_id = sa.user_id\n               left join initial_transfer_post itp on itp.user_id = a.user_id\n               GROUP BY 1\n                      , 2\n                      , 3\n                      , 4\n                      , 5\n                      , 6\n                      , 7\n                      , 8\n                      , 9\n                      , 10\n                      , 11\n                      , 12\n               ),\n            customer_information AS (\n               SELECT up.user_id\n                    , date_of_birth\n                    , datediff('months',date_of_birth,CURRENT_DATE) / 12 AS customer_age\n                    , upper(first_name) AS first_name\n                    , upper(middle_name) AS middle_name\n                    , upper(last_name) AS last_name\n                    , CASE gender_type WHEN 1 THEN 'Male' WHEN 2 THEN 'Female' ELSE 'Other' END AS gender\n                    , gross_income\n                    , liquid_net_worth\n                    , has_alternative_investments\n                    , has_bonds\n                    , has_cd\n                    , has_checking\n                    , has_etf\n                    , has_ira\n                    , has_mutual_funds\n                    , has_options\n                    , has_savings\n                    , has_stock\n                    , CASE uip.employment_status WHEN 0 THEN 'Undefined'\n                                                 WHEN 1 THEN 'Employed Full Time'\n                                                 WHEN 2 THEN 'Employed Part Time'\n                                                 WHEN 3 THEN 'Self Employed'\n                                                 WHEN 4 THEN 'Student'\n                                                 WHEN 5 THEN 'Retired'\n                                                 WHEN 6 THEN 'Not Employed'\n                                                 END AS employment\n                    , CASE marital_status WHEN 0 THEN 'Undefined'\n                                          WHEN 1 THEN 'Single'\n                                          WHEN 2 THEN 'Married'\n                                          WHEN 3 THEN 'Divorced'\n                                          WHEN 4 THEN 'Widowed'\n                                          WHEN 5 THEN 'Separated'\n                                          WHEN 6 THEN 'Domestic Partner'\n                                          END AS marital_status\n                    , has_trust\n                    , has401k\n                    , has_joint\n                    , upper(city) AS city\n                    , s.name AS state\n                    , upper(a.street1) AS street_line_1\n                    , upper(a.street2) AS street_line_2\n                    , phone_number\n                    , zip_or_postal_code AS zip_code\n               FROM web_db.user_profile up\n               LEFT JOIN web_db.user_investment_profile uip ON uip.user_id = up.user_id\n               LEFT JOIN web_db.address a ON a.id = coalesce(mailing_address_id,up.address_id)\n               LEFT JOIN web_db.state s ON s.id = a.state_id\n               ),\n            alloy_evaluation AS (\n               SELECT CIP_status\n                    , user_id\n                    , CIP_status_date\n                    , CIP_manual_review_completion_date\n                    , alloy_custom_model_score\n                    , alloy_custom_model_version\n                    , alloy_summary_application_version\n               FROM (\n                  SELECT d.\"alloy summary_outcome\" || CASE WHEN d.\"alloy summary_outcome\" = 'Manual Review'\n                                                              THEN cast(' - ' || coalesce(rd.outcome,'Pending') AS VARCHAR(50))\n                                                           ELSE ''\n                                                           END AS CIP_status\n                       , app.user_id AS user_id\n                       , e.submitted_at AS CIP_status_date\n                       , rd.timestamp AS CIP_manual_review_completion_date\n                       , d.\"custom models_model_score\" as alloy_custom_model_score\n                       , d.\"custom models_model_version\" as alloy_custom_model_version\n                       , d.\"alloy summary_application_version_id\" as alloy_summary_application_version\n                       , row_number() OVER (PARTITION BY app.user_id ORDER BY CIP_status_date DESC) AS row_num\n                  FROM aoa_db.alloy_evaluations e\n                  JOIN web_db.user_product_application app ON app.id = e.user_product_application_id\n                  JOIN rdl.alloy_evaluations_flattened d ON d.evaluation_id = e.id\n                  LEFT JOIN aoa_db.evaluation_reviews er ON er.alloy_evaluation_id = e.id\n                  LEFT JOIN rdl.alloy_evaluation_reviews_flattened rd ON rd.evaluation_review_id = er.id\n                  WHERE d.\"alloy summary_outcome\" IS NOT NULL\n                  ) AS a\n               WHERE a.row_num = 1\n               ),\n            cohorts AS (\n               SELECT uc.user_id\n                    , c.name AS cohort_name\n               FROM web_db.cohorts c\n               JOIN web_db.user_cohorts uc ON c.id = uc.cohorts_id\n               WHERE c.name IN ('check-deposit-disabled','withdrawal-disabled')\n               )\n\n         SELECT a.user_email\n              , a.has_validated_email\n              , a.user_id\n              , a.has_entered_credentials\n              , a.entered_credentials_date\n              , a.external_user_id\n              , a.lead_source\n              , a.utm_source\n              , a.utm_category                   \n              , a.lead_arrival_date\n              , a.utm_content\n              , nvl(a.referral_domain,'direct') AS referral_domain\n              , a.referral_url\n              , a.initial_product_selected\n              , a.is_signed_up\n              , a.utm_campaign\n              , ifnull(a.utm_click_id,'') AS utm_click_id\n              , ifnull(a.utm_click_sub_id,'') AS utm_click_sub_id\n              , ifnull(a.utm_click_sub_id2,'') AS utm_click_sub_id2\n              , ifnull(a.utm_click_sub_id3,'') AS utm_click_sub_id3\n              , a.utm_initial_url\n              , a.gcl_id\n              , a.utm_medium\n              , a.utm_term\n              , a.user_disabled\n              , utm_lander\n              , utm_campaign_product\n              , utm_campaign_marketing_campaign\n              , utm_content_creative_type\n              , utm_content_creative_description\n              , utm_content_cta\n              , utm_content_placement\n              , utm_content_variable\n              , utm_content_ad_id\n              , utm_term_audience_type\n              , utm_term_seed_audience\n              , utm_term_lal_percentage\n              , utm_term_messaging\n              , utm_term_ad_id\n              , utm_term_ad_platform\n              , utm_term_ad_placement\n              , utm_term_start_date\n              , has_started_application\n              , has_opened_aspiration_account\n              , CASE WHEN /*gross_income IS NULL or ssn IS NULL or*/ has_started_application = FALSE THEN FALSE\n                     ELSE has_entered_funding_amount\n                     END AS has_entered_funding_amount\n              , CASE WHEN /*gross_income IS NULL or ssn IS NULL or*/ has_started_application = FALSE OR has_entered_funding_amount = FALSE\n                        THEN FALSE\n                     ELSE has_entered_fee\n                     END AS has_entered_fee\n              , CASE WHEN /*ssn IS NULL or*/ has_started_application = FALSE OR first_name IS NULL THEN FALSE\n                     ELSE TRUE\n                     END AS has_entered_personal_information\n              , CASE WHEN /*gross_income IS NULL or ssn IS NULL or*/ has_started_application = FALSE OR first_name IS NULL\n                        THEN FALSE\n                     ELSE TRUE\n                     END AS has_entered_financial_information\n              , CASE WHEN\n                        /* gross_income IS NULL or ssn IS NULL or has_started_application = false or has_entered_funding_amount = false\n                        or has_entered_fee = false or*/ entered_bank.user_id IS NULL THEN FALSE\n                     ELSE TRUE\n                     END AS has_attempted_to_link_bank\n              , CASE WHEN\n                        /* gross_income IS NULL or ssn IS NULL or has_started_application = false or has_entered_funding_amount = false\n                        or has_entered_fee = false or*/ verified_bank.user_id IS NULL THEN FALSE\n                     ELSE TRUE\n                     END AS has_verified_bank\n              , CASE WHEN tc.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS has_accepted_terms_and_conditions\n              , b.zip_code\n              , b.state\n              , b.street_line_2\n              , b.marital_status\n              , b.street_line_1\n              , b.gender\n              , b.date_of_birth\n              , b.customer_age\n              -- ssn,\n              , b.employment\n              , b.phone_number\n              , b.first_name\n              , b.city\n              , b.gross_income\n              , b.last_name\n              , b.middle_name\n              , b.has_checking\n              , b.has401k\n              , b.has_alternative_investments\n              , b.has_bonds\n              , b.has_cd\n              , b.has_etf\n              , b.has_ira\n              , b.has_joint\n              , b.has_mutual_funds\n              , b.has_options\n              , b.has_savings\n              , b.has_stock\n              , b.has_trust\n              , b.liquid_net_worth\n              , c.second_account_type\n              , c.first_account_type\n              , c.current_monthly_recurring_investment_amount\n              , c.current_total_assets\n              , c.days_between_first_and_second_account\n              , c.months_between_first_and_second_account\n              , c.first_account_funding_amount\n              , c.first_account_funding_bank_account_id\n              , c.first_account_inception_date\n              , c.first_account_opening_monthly_usd_fee_setting\n              , c.first_account_opening_yearly_percent_fee_setting\n              , coalesce(c.has_flagship_individual,FALSE) AS has_flagship_individual\n              , coalesce(c.has_flagship_ira,FALSE) AS has_flagship_ira\n              , coalesce(c.has_redwood_individual,FALSE) AS has_redwood_individual\n              , coalesce(c.has_redwood_ira,FALSE) AS has_redwood_ira\n              , coalesce(c.has_checking_account,FALSE) AS has_checking_account\n              , coalesce(c.total_accounts_opened,0) AS total_accounts_opened\n              , c.initial_transfer_posted_date\n              , CASE WHEN r_ind.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS redwood_individual_application_started\n              , CASE WHEN r_ira.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS redwood_ira_application_started\n              , CASE WHEN f_ind.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS flagship_individual_application_started\n              , CASE WHEN f_ira.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS flagship_ira_application_started\n              , CASE WHEN risk_cohorts.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS has_risk_cohorts\n              , a.inviting_user_id\n              , alloy.CIP_status AS CIP_status\n              , alloy.CIP_status_date AS CIP_status_date\n              , alloy.CIP_manual_review_completion_date AS CIP_manual_review_completion_date\n              , alloy.alloy_custom_model_score\n              , alloy.alloy_custom_model_version\n              , alloy.alloy_summary_application_version\n              , CASE WHEN cohort_deposit.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS is_mobile_check_deposit_disabled\n              , CASE WHEN cohort_withdrawal.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS is_withdrawal_disabled\n\n         FROM attribution_data a\n         LEFT JOIN customer_information b ON a.user_id = b.user_id\n         LEFT JOIN aggregated_account_data c ON a.user_id = c.user_id\n         LEFT JOIN (\n            SELECT user_id\n                 , status\n            FROM web_db.user_product_application\n            WHERE product_id = 1\n              AND account_type_id = 2\n            ) r_ind ON r_ind.user_id = a.user_id\n         LEFT JOIN (\n            SELECT user_id\n                 , status\n            FROM web_db.user_product_application\n            WHERE product_id = 1\n              AND account_type_id = 3\n            ) r_ira ON r_ira.user_id = a.user_id\n         LEFT JOIN (\n            SELECT user_id\n                 , status\n            FROM web_db.user_product_application\n            WHERE product_id = 2\n              AND account_type_id = 2\n            ) f_ind ON f_ind.user_id = a.user_id\n         LEFT JOIN (\n            SELECT user_id\n                 , status\n            FROM web_db.user_product_application\n            WHERE product_id = 2\n              AND account_type_id = 3\n            ) f_ira ON f_ira.user_id = a.user_id\n         LEFT JOIN (\n            SELECT DISTINCT user_id\n            FROM bi.dt_banks\n            WHERE is_checking_account = FALSE\n            ) entered_bank ON entered_bank.user_id = a.user_id\n         LEFT JOIN (\n            SELECT DISTINCT user_id\n            FROM bi.dt_banks\n            WHERE is_verified = TRUE\n              AND is_checking_account = FALSE\n            ) verified_bank ON verified_bank.user_id = a.user_id\n         LEFT JOIN (\n            SELECT DISTINCT user_id\n            FROM web_db.user_terms_conditions\n            ) tc ON tc.user_id = a.user_id\n\n         LEFT JOIN (\n            SELECT DISTINCT user_id\n            FROM web_db.user_cohorts\n            WHERE cohorts_id IN (22,23)\n            ) risk_cohorts ON risk_cohorts.user_id = a.user_id\n         LEFT JOIN cohorts AS cohort_deposit\n                   ON cohort_deposit.user_id = a.user_id AND cohort_deposit.cohort_name = 'check-deposit-disabled'\n         LEFT JOIN cohorts AS cohort_withdrawal\n                   ON cohort_withdrawal.user_id = a.user_id AND cohort_withdrawal.cohort_name = 'withdrawal-disabled'\n         LEFT JOIN alloy_evaluation AS alloy ON alloy.user_id = a.user_id\n         ),\n      aggregate_spending AS (\n         SELECT paid_channel_name\n              , utm_source_1\n              , utm_source_2\n              , start_date\n              , end_date\n              , spend / (1.0 * cnt) AS spend_per_acquisition\n         FROM (\n            SELECT m.channel_name AS paid_channel_name\n                 , utm_source_1\n                 , utm_source_2\n                 , start_date\n                 , end_date\n                 , m.spend\n                 , count(*) AS cnt\n            FROM users u\n            INNER JOIN web_db.dt_marketing_spend m\n                       ON (u.utm_source = m.utm_source_1 OR u.utm_source = m.utm_source_2) AND\n                          lead_arrival_date::DATE >= m.start_date AND lead_arrival_date::DATE < m.end_date AND\n                          m.spend IS NOT NULL AND u.total_accounts_opened > 0\n            GROUP BY 1\n                   , 2\n                   , 3\n                   , 4\n                   , 5\n                   , 6\n            ORDER BY 1\n                   , 2\n                   , 3\n                   , 4\n                   , 5\n                   , 6\n            ) a\n         ),\n      filled_end_dates AS (\n         SELECT channel_name\n              , utm_source_1\n              , utm_source_2\n              , start_date\n              , (\n            SELECT min(start_date)\n            FROM web_db.dt_marketing_spend a\n            WHERE a.channel_name = s.channel_name\n              AND a.start_date > s.start_date\n            ) AS end_date\n              , cpa\n              , cpl\n         FROM web_db.dt_marketing_spend s\n         WHERE cpl IS NOT NULL\n            OR cpa IS NOT NULL\n         ),\n      cpl_spends AS (\n         SELECT channel_name\n              , lead_arrival_month\n              , utm_source_1\n              , utm_source_2\n              , cpl * lead_count / (1.0 * customer_count) AS spend_per_aquisition\n         FROM (\n            SELECT channel_name\n                 , utm_source_1\n                 , utm_source_2\n                 , start_date\n                 , end_date\n                 , cpl\n                 , date_trunc('month',lead_arrival_date) :: DATE AS lead_arrival_month\n                 , count(*) AS lead_count\n                 , sum(CASE WHEN total_accounts_opened > 0 THEN 1 ELSE 0 END) AS customer_count\n            FROM filled_end_dates fed\n            INNER JOIN users u ON (fed.utm_source_1 = u.utm_source OR fed.utm_source_2 = u.utm_source) AND\n                                  lead_arrival_date::DATE >= start_date AND\n                                  (end_date IS NULL OR lead_arrival_date::DATE < end_date)\n            WHERE fed.cpl IS NOT NULL\n            GROUP BY 1\n                   , 2\n                   , 3\n                   , 4\n                   , 5\n                   , 6\n                   , 7\n            HAVING sum(CASE WHEN total_accounts_opened > 0 THEN 1 ELSE 0 END) > 0\n            ) a\n         ),\n      cpa_spends AS (\n         SELECT channel_name\n              , date_trunc('month',lead_arrival_date) :: DATE AS lead_arrival_month\n              , utm_source_1\n              , utm_source_2\n              , cpa AS spend_per_acquisition\n         FROM filled_end_dates fed\n         INNER JOIN users u ON (fed.utm_source_1 = u.utm_source OR fed.utm_source_2 = u.utm_source) AND\n                               lead_arrival_date::DATE >= start_date AND\n                               (end_date IS NULL OR lead_arrival_date::DATE < end_date)\n         WHERE cpa IS NOT NULL\n         GROUP BY 1\n                , 2\n                , 3\n                , 4\n                , 5\n         ),\n      months AS (\n         SELECT DATEADD('month',i - 1,'2014-10-01') AS month\n         FROM (\n                     select row_number() over(order by seq4()) as i\n                     from table(generator(\n                                rowcount =>3000\n                                )\n                         )\n                  )\n         WHERE i <= (DATE_PART('year',CURRENT_DATE) - DATE_PART('year','2014-10-01'::DATE)) * 12 +\n                    (DATE_PART('month',CURRENT_DATE) - DATE_PART('month','2014-10-01'::DATE)) + 1\n         ),\n      agg_spend AS (\n         SELECT paid_channel_name\n              , month\n              , utm_source_1\n              , utm_source_2\n              , spend_per_acquisition\n         FROM aggregate_spending a\n         INNER JOIN months b ON b.month >= a.start_date AND b.month < a.end_date\n         ),\n      all_spend AS (\n         SELECT *\n         FROM cpa_spends\n         UNION ALL\n         SELECT *\n         FROM cpl_spends\n         UNION ALL\n         SELECT *\n         FROM agg_spend\n         ),\n      invites_count AS (\n            SELECT u.inviting_user_id\n            , count(*) AS number_invites_sent\n            ,sum(case\n                  when a.initial_transfer_posted_date IS NOT NULL then 1\n                  else 0 end) as num_funded_referrals\n            FROM web_db.user_signup u\n               left join bi.dt_accounts a on u.invited_user_id = a.user_id\n                                             and a.account_type = 'Checking'\n            GROUP BY u.inviting_user_id\n         ),\n      cte_smart_limit AS (\n         SELECT DISTINCT user_id\n         FROM web_db.user_product_application\n         WHERE is_smart_limit = TRUE\n         )\n\n   SELECT distinct u.*\n        , utm_source_clean\n        , utm_channel_type\n        , utm_channel_grouping\n        , spend_per_acquisition AS marketing_cost_per_user\n        , most_current_nps_score\n        , most_current_nps_survey_date\n        , CASE WHEN f.chargeoff_reason IS NOT NULL OR sum.chargeoff_reason IS NOT NULL THEN TRUE\n               ELSE FALSE\n               END AS is_fraud_or_chargeoff\n        , coalesce(sum.chargeoff_reason,f.chargeoff_reason) AS fraud_or_chargeoff_type\n        , sum.total_amount_charged_off\n        , sum.hard_loss_charge_off\n        , sum.fees_charged_off\n        , invites_count.number_invites_sent\n        , invites_count.num_funded_referrals\n        , CASE WHEN csl.user_id IS NOT NULL THEN TRUE ELSE FALSE END AS is_smart_limit\n        , min_payment_account_linked_date AS external_bank_account_connected_date\n        , case when tcle.email is not null or tclui.user_id is not null\n               then true else false end as has_credit_lead\n        , case when upa_cred.USER_ID is not null\n               then true else false end as has_credit_product_application    \n   FROM users u\n\n   LEFT JOIN invites_count ON invites_count.inviting_user_id = u.user_id\n   LEFT JOIN cte_smart_limit csl ON csl.user_id = u.user_id\n   LEFT JOIN all_spend s ON (u.utm_source = s.utm_source_1 OR u.utm_source = s.utm_source_2) AND\n                            CASE WHEN total_accounts_opened > 0 THEN date_trunc('month',u.lead_arrival_date) :: DATE\n                                 ELSE NULL\n                                 END = s.lead_arrival_month\n\n   LEFT JOIN (\n    SELECT\n      a.email,\n      a.pull_date :: DATE AS most_current_nps_survey_date,\n      a.nps_rating        AS most_current_nps_score\n    FROM dataops_ace_db.nps_survey_candidate a\n      INNER JOIN (\n         SELECT\n           email,\n           max(pull_date) AS max_pull_date\n         FROM dataops_ace_db.nps_survey_candidate\n         GROUP BY email\n       ) b\n      ON a.email = b.email AND a.pull_date = b.max_pull_date\n     AND zendesk_nps_survey_id IS NOT NULL\n    ) nps ON u.user_email = nps.email\n\n   LEFT JOIN web_db.dt_input_fraud_users f ON u.user_email = f.email\n\n   LEFT JOIN (\n      SELECT user_id\n           , is_charged_off\n           , chargeoff_reason\n           , total_amount_charged_off\n           , hard_loss_charge_off\n           , fees_charged_off\n      FROM bi.dt_accounts\n      WHERE account_type = 'Checking'\n      ) sum ON sum.user_id = u.user_id\n\n   LEFT JOIN web_db.dt_external_user_ids e ON e.user_id = u.user_id\n\n   LEFT JOIN web_db.dt_utm_mapping m ON m.utm_source = u.utm_source\n\n   LEFT JOIN (\n      SELECT user_id\n           , min(payment_account_linked_date) min_payment_account_linked_date\n      FROM bi.dt_banks\n      WHERE is_verified = TRUE\n      GROUP BY user_id\n      ) payment_account_link_date ON payment_account_link_date.user_id = u.user_id\n    \n   LEFT JOIN tmp_credit_lead_email tcle on u.user_email = tcle.email\n   LEFT JOIN tmp_credit_lead_user_id tclui on u.user_id = tclui.user_id\n   LEFT JOIN (select distinct user_id\n              from WEB_DB.USER_PRODUCT_APPLICATION\n              where PRODUCT_ID = 8) upa_cred on u.user_id = upa_cred.USER_ID    \n\n   );\n   \n--create the non-credit version of dt_users\ndrop table if exists ush.dt_users;\ncreate table ush.dt_users as\nselect *\nfrom etl.dt_users\n--keep credit leads in other non-credit products; remove credit only leads\nwhere has_credit_lead = false\nor initial_product_selected != 'Credit'\nor (has_credit_lead = true\n    and user_id in (select user_id from WEB_DB.USER_PRODUCT_APPLICATION where PRODUCT_ID != 8))\n;\n\n\ngrant select on all tables in schema ush to data_engineering_group;\ngrant select on all tables in schema ush to data_science_analytics;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{},"failureConnectors":{},"unconditionalConnectors":{"2958588":{"id":2958588,"sourceID":2958562,"targetID":2958589}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{}},"info":{"name":"serena - dt_users DATA-1108","description":"removes credit leads (that don't have non-credit products) from dt_users","type":"ORCHESTRATION","tag":"b35ea5c3-961f-495c-8476-21b9bdc2875d"}}