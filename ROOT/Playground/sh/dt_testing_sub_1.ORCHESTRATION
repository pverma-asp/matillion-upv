{"job":{"components":{"2958626":{"id":2958626,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-576,"y":-192,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958646],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958645":{"id":2958645,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-432,"y":144,"width":32,"height":32,"inputConnectorIDs":[2958641],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dev WH to xsmall"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DEV"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WAREHOUSE_SIZE"},"2":{"slot":2,"type":"STRING","value":"XSMALL"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958648":{"id":2958648,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-425,"y":50,"width":32,"height":32,"inputConnectorIDs":[2958647],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958641],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dt_user_monthly_data"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--DATA-1218\n\n\nuse warehouse load_wh;\n\nSET TIMEZONE = 'America/Los_Angeles';\n\nDROP TABLE IF EXISTS ush.dt_user_monthly_data;\n\nCREATE TABLE ush.dt_user_monthly_data \n--cluster by (user_id)\nAS\n(\n    WITH end_of_month_data AS (SELECT\n                                 b.user_id,\n                                 a.month,\n                                 b.daily_total_assets         AS end_of_month_assets,\n                                 b.daily_total_assets_actual  AS end_of_month_assets_actual,\n                                 b.daily_summit_assets_actual AS end_of_month_summit_assets_actual,\n                                 b.daily_summit_spend_assets_actual AS end_of_month_summit_spend_assets_actual,\n                                 b.daily_summit_save_assets_actual  AS end_of_month_summit_save_assets_actual,                               \n                                 b.monthly_usd_fee_setting    AS total_monthly_usd_fee_setting,\n                                 b.yearly_percent_fee_setting AS total_yearly_percent_fee_setting,\n                                 b.opened_accounts            AS opened_accounts\n                               FROM (\n                                      SELECT\n                                        date_trunc('month', convert_timezone('America/Los_Angeles',date)) :: DATE AS month,\n                                        max(date)                         AS max_date\n                                      FROM bi.dt_user_daily_data\n                                      GROUP BY 1\n                                    ) a INNER JOIN bi.dt_user_daily_data b\n                                   ON a.max_date = b.date)\n      , avg_data AS (\n        SELECT\n          a.user_id,\n          date_trunc('month', convert_timezone('America/Los_Angeles',date)) :: DATE AS month,\n          avg(daily_total_assets)           AS average_daily_assets,\n          min(daily_total_assets)           AS min_daily_assets,\n          max(daily_total_assets)           AS peak_assets,\n          max(daily_summit_assets)          as peak_summit_assets,\n          avg(daily_total_assets_actual)           AS average_daily_assets_actual,\n          min(daily_total_assets_actual)           AS min_daily_assets_actual,\n          max(daily_total_assets_actual)           AS peak_assets_actual,\n          avg(daily_summit_assets_actual)          AS average_summit_assets_actual,\n          min(daily_summit_assets_actual)          AS min_summit_assets_actual,\n          max(daily_summit_assets_actual)          AS peak_summit_assets_actual,\n          avg(daily_summit_spend_assets_actual)    AS average_summit_spend_assets_actual,\n          min(daily_summit_spend_assets_actual)    AS min_summit_spend_assets_actual,\n          max(daily_summit_spend_assets_actual)    AS peak_summit_spend_assets_actual,\n          avg(daily_summit_save_assets_actual)     AS average_summit_save_assets_actual,\n          min(daily_summit_save_assets_actual)     AS min_summit_save_assets_actual,\n          max(daily_summit_save_assets_actual)     AS peak_summit_save_assets_actual,\n          max(daily_investment_assets_actual)      AS peak_investment_assets_actual,          \n          max(case when daily_investment_assets > 0\n            then daily_investment_assets\n              else null end)                as peak_investment_assets,\n          sum(case when has_ios_login or has_android_login or has_web_login\n            then 1\n              else 0 end)                   as unique_daily_logins,\n          sum(case when has_ios_login\n            then 1\n              else 0 end)                   as unique_ios_daily_logins,\n          sum(case when has_android_login\n            then 1\n              else 0 end)                   as unique_android_daily_logins,\n          sum(case when has_web_login\n            then 1\n              else 0 end)                   as unique_web_daily_logins,\n          sum(num_funded_daily_referrals)   as num_funded_monthly_referrals,\n          max(nps_score) as nps_score\n        FROM bi.dt_user_daily_data a\n        GROUP BY 1, 2\n    )\n\n    SELECT\n      a.user_id,\n      a.month,\n      a.total_yearly_percent_fee_setting,\n      a.total_monthly_usd_fee_setting,\n      coalesce(c.total_fee_billed, 0) as total_fee_billed,\n      a.end_of_month_assets,\n      a.end_of_month_assets_actual,\n      a.end_of_month_summit_assets_actual,\n      a.end_of_month_summit_spend_assets_actual,\n      a.end_of_month_summit_save_assets_actual,    \n      a.opened_accounts,\n      b.average_daily_assets,\n      b.min_daily_assets,\n      b.peak_assets,\n      b.peak_summit_assets,\n      b.peak_investment_assets,\n      b.average_daily_assets_actual,\n      b.min_daily_assets_actual,\n      b.peak_assets_actual,\n      b.average_summit_assets_actual,\n      b.min_summit_assets_actual,\n      b.peak_summit_assets_actual,\n      b.average_summit_spend_assets_actual,\n      b.min_summit_spend_assets_actual,\n      b.peak_summit_spend_assets_actual,\n      b.average_summit_save_assets_actual,\n      b.min_summit_save_assets_actual,\n      b.peak_summit_save_assets_actual,\n      b.peak_investment_assets_actual,    \n      b.unique_daily_logins,\n      b.unique_ios_daily_logins,\n      b.unique_android_daily_logins,\n      b.unique_web_daily_logins,\n      b.num_funded_monthly_referrals,\n      b.nps_score,\n\n      ROW_NUMBER() OVER(order by null) AS unique_id\n    FROM end_of_month_data a INNER JOIN avg_data b\n        ON a.user_id = b.user_id AND a.month = b.month\n      left JOIN (\n                  select\n                    user_id,\n                    month,\n                    sum(billed_pwif_this_month) as total_fee_billed\n                  FROM bi.dt_account_monthly_data a inner JOIN bi.dt_accounts b\n                      on a.unique_account_id = b.unique_account_id\n                  group by 1, 2) c\n        on a.user_id = c.user_id and a.month = c.month\n  )\n;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958649":{"id":2958649,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-432,"y":-80,"width":32,"height":32,"inputConnectorIDs":[2958644],"outputSuccessConnectorIDs":[2958647],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dt_user_daily_data"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse load_wh;\n\nSET TIMEZONE = 'America/Los_Angeles';\n--audit trail data for logins\ndrop table if exists tmp_audit_trail;\ncreate temp table tmp_audit_trail\n--cluster by (user_id) \nas\nselect user_id,\n       date_created::date as date_created,\n       client_id,\n       ip_address,\n       mobile_platform\nfrom web_db.user_audit_trail\nwhere audit_trail ilike 'Logged In';\n\nDROP TABLE IF EXISTS ush.dt_user_daily_data;\nCREATE TABLE ush.dt_user_daily_data\n--cluster by (user_id)\nAS\n(\n  with ios_logins AS (\n      SELECT\n        date_created :: date as date,\n        user_id,\n        count(*) as count\n      FROM tmp_audit_trail\n      WHERE ((client_id = '3827973437184' and ip_address not like '206.108.41.10%')\n               OR mobile_platform = 'ios')\n      GROUP BY 1, 2\n  ),\n      android_logins AS (\n        SELECT\n          date_created :: date as date,\n          user_id,\n          count(*) as count\n        FROM tmp_audit_trail\n        WHERE ((client_id = '171738288438772' and ip_address not like '206.108.41.10%')\n                 OR mobile_platform in ('android','Android'))\n        GROUP BY 1, 2\n    ),\n      web_logins AS (\n        SELECT\n          date_created :: date as date,\n          user_id,\n          count(*) as count\n        FROM tmp_audit_trail\n        WHERE (((client_id NOT IN ('171738288438772', '3827973437184') OR client_id IS NULL)\n                   and ip_address not like '206.108.41.10%')\n                 and (mobile_platform not in ('ios','android','Android') or mobile_platform is null))\n        GROUP BY 1, 2\n    ),\n      ace_tickets_10_min AS (\n        SELECT\n          user_id,\n          most_recent_prior_login::date as date,\n          count(*) as ticket_count\n        FROM bi.dt_ace_tickets\n        WHERE datediff(min,most_recent_prior_login::timestamp,created_at::timestamp) <= 10\n        GROUP BY 1, 2\n    ),\n\n\tfunded_refer as (\n\t\tselect u.inviting_user_id,\n\t\t\t\tu.date_created::date as inviting_date,\n\t\t\t\tu.invited_user_id\n\t\tFROM web_db.user_signup u\n               left join bi.dt_accounts a on u.invited_user_id = a.user_id\n\t\t\t   \t\t\t\t\t\t\t\t and a.account_type = 'Checking'\n\t\twhere a.initial_transfer_posted_date is not null\n\t)\n\n\tSELECT b.user_id,\n\t\ta.date,\n\n\t\tcase\n\t\t\twhen wl.user_id is null then false\n\t\t\telse true\n\t\tend as has_web_login,\n\n\t\tcase\n\t\t\twhen il.user_id is null then false\n\t\t\telse true\n\t\tend as has_ios_login,\n\n\t\tcase\n\t\t\twhen al.user_id is null then false\n\t\t\telse true\n\t\tend as has_android_login,\n\n\t        nvl(wl.count,0) as count_web_login,\n\t        nvl(il.count,0) as count_ios_login,\n\t        nvl(al.count,0) as count_android_login,\n\t        nvl(ace.ticket_count,0) as count_ace_ticket_10_min,\n\n    nsc.nps_rating as nps_score,\n\n\t\tsum(daily_balance)           AS daily_total_assets,\n\n\t\tsum(case\n\t\t\t\twhen b.account_type = 'Checking' then daily_balance\n\t\t\t\telse null\n\t\t\tend) as daily_summit_assets,\n\n\t\tsum(case\n\t\t\t\twhen b.account_type <> 'Checking' then daily_balance\n\t\t\t\telse null\n\t\t\tend) as daily_investment_assets,\n\n     \t\tsum(original_balance)           AS daily_total_assets_actual,\n\n     \t\tsum(case\n     \t\t\t\twhen b.account_type = 'Checking' then original_balance\n     \t\t\t\telse null\n     \t\t\tend) as daily_summit_assets_actual,\n\n     \t\tsum(case\n     \t\t\t\twhen b.account_type = 'Checking' then a.spend_daily_balance\n     \t\t\t\telse null\n     \t\t\tend) as daily_summit_spend_assets_actual,\n\n     \t\tsum(case\n     \t\t\t\twhen b.account_type = 'Checking' then a.save_daily_balance\n     \t\t\t\telse null\n     \t\t\tend) as daily_summit_save_assets_actual,\n\n     \t\tsum(case\n     \t\t\t\twhen b.account_type <> 'Checking' then original_balance\n     \t\t\t\telse null\n     \t\t\tend) as daily_investment_assets_actual,\n\n\n\t\tsum(monthly_usd_fee_setting) AS monthly_usd_fee_setting,\n\n\t\tCASE\n\t\t\tWHEN sum(daily_balance) > 0 THEN sum(monthly_usd_fee_setting) * 12 / sum(daily_balance)\n\t\t\tELSE 0\n\t\tEND AS yearly_percent_fee_setting,\n\n\t\tcount(*)                     AS opened_accounts,\n\n\t\tsum(case\n\t\t\twhen fr.invited_user_id is not null then 1\n\t\t\telse 0 end ) \t\t\tAS num_funded_daily_referrals\n\n\tFROM bi.dt_account_daily_data a\n\tINNER JOIN bi.dt_accounts b ON a.unique_account_id = b.unique_account_id\n\tleft JOIN web_logins wl on b.user_id = wl.user_id and a.date = wl.date\n\tleft JOIN ios_logins il on b.user_id = il.user_id and a.date = il.date\n\tleft JOIN android_logins al on b.user_id = al.user_id and a.date = al.date\n\tleft JOIN ace_tickets_10_min ace on b.user_id = ace.user_id and a.date = ace.date\n\tleft join funded_refer fr on b.user_id = fr.inviting_user_id\n\t\t\t\t\t\t\t\tand a.date = fr.inviting_date\n\t\t\t\t\t\t\t\tand b.account_type = 'Checking'\n  left join (\n    SELECT\n      da.user_id,\n      nsc.pull_date,\n      nps_rating\n    FROM dataops_ace_db.nps_survey_candidate nsc\n    JOIN bi.dt_accounts da ON nsc.unique_account_id=da.unique_account_id\n    WHERE 1=1\n      AND nsc.zendesk_nps_survey_id is not null\n      AND nps_rating is not null\n    ) nsc ON b.user_id=nsc.user_id AND nsc.pull_date=a.date\n\tGROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n)\n;\n\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958650":{"id":2958650,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-432,"y":-192,"width":32,"height":32,"inputConnectorIDs":[2958646],"outputSuccessConnectorIDs":[2958644],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dev WH to Large"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DEV"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WAREHOUSE_SIZE"},"2":{"slot":2,"type":"STRING","value":"LARGE"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2958644":{"id":2958644,"sourceID":2958650,"targetID":2958649},"2958647":{"id":2958647,"sourceID":2958649,"targetID":2958648}},"failureConnectors":{},"unconditionalConnectors":{"2958641":{"id":2958641,"sourceID":2958648,"targetID":2958645},"2958646":{"id":2958646,"sourceID":2958626,"targetID":2958650}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{}},"info":{"name":"dt_testing_sub_1","description":null,"type":"ORCHESTRATION","tag":"117ad8a5-d85f-45e7-862a-3eef01df0825"}}