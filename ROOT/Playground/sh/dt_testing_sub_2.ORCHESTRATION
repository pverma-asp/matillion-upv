{"job":{"components":{"2958604":{"id":2958604,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-272,"y":-96,"width":32,"height":32,"inputConnectorIDs":[2958602],"outputSuccessConnectorIDs":[2958606],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"load WH to Large"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"LOAD_WH"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WAREHOUSE_SIZE"},"2":{"slot":2,"type":"STRING","value":"LARGE"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958605":{"id":2958605,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-272,"y":-16,"width":32,"height":32,"inputConnectorIDs":[2958606],"outputSuccessConnectorIDs":[2958601],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dt_account_monthly"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse load_wh;\n\nSET TIMEZONE = 'America/Los_Angeles';\n\ndrop table if exists ush.dt_account_monthly_data_tmp;\n\nCREATE TABLE ush.dt_account_monthly_data_tmp\nAS (\n    SELECT unique_account_id\n      , date_trunc('month', date)::DATE AS month\n      , avg(daily_balance) AS average_balance\n      , min(daily_balance) AS lowest_monthly_balance\n      , max(daily_balance) AS peak_monthly_balance\n      , avg(original_balance) AS average_balance_actual\n      , min(original_balance) AS lowest_monthly_balance_actual\n      , max(original_balance) AS peak_monthly_balance_actual\n      , avg(spend_daily_balance) AS average_spend_balance_actual\n      , min(spend_daily_balance) AS lowest_monthly_spend_balance_actual\n      , max(spend_daily_balance) AS peak_monthly_spend_balance_actual\n      , avg(save_daily_balance) AS average_save_balance_actual\n      , min(save_daily_balance) AS lowest_monthly_save_balance_actual\n      , max(save_daily_balance) AS peak_monthly_save_balance_actual\n      , sum(dbt_card_no_pin_amount) AS monthly_debit_card_no_pin_amount\n      , sum(dbt_card_pin_amount) AS monthly_debit_card_pin_amount\n      , sum(aim_debit_count)::decimal(38,6) AS monthly_aim_scored_transactions\n      , sum(aim_debit_amount)::decimal(38,6) AS monthly_aim_scored_transactions_amount\n      , sum(dbt_card_no_pin_count) AS monthly_debit_card_no_pin_transactions\n      , sum(dbt_card_pin_count) AS monthly_debit_card_pin_transactions\n      , sum(daily_bill_pay_amount) AS monthly_bill_pay_amount\n      , sum(daily_bill_pay_count) AS monthly_bill_pay_count\n      , sum(ach_withdrawal_amount) AS ach_withdrawal_amount\n      , sum(ach_deposit_amount) AS ach_deposit_amount\n      , sum(atm_deposit_amount) AS atm_deposit_amount\n      , sum(atm_withdrawal_amount) AS atm_withdrawal_amount\n      , sum(wire_withdrawal_amount) AS wire_withdrawal_amount\n      , sum(wire_deposit_amount) AS wire_deposit_amount\n      , sum(check_withdrawal_amount) AS check_withdrawal_amount\n      , sum(check_deposit_amount) AS check_deposit_amount\n      , sum(actual_pwif_paid) as actual_pwif_paid\n      , sum(promo) as promo\n      , sum(cashback) as cashback\n      , sum(a.atm_fee_refund_amount) AS atm_fee_refund_amount\n      , sum(interest_amount) AS interest_amount\n      , sum(wire_withdrawal_count) AS wire_withdrawal_count\n      , sum(internal_transfer_deposit) as internal_transfer_deposit\n      , sum(internal_transfer_withdrawal) as internal_transfer_withdrawal\n      , sum(wire_deposit_count) AS wire_deposit_count\n      , sum(ach_deposit_count) AS ach_deposit_count\n      , sum(ach_withdrawal_count) AS ach_withdrawal_count\n      , sum(atm_deposit_count) AS atm_deposit_count\n      , sum(atm_withdrawal_count) AS atm_withdrawal_count\n      , sum(check_withdrawal_count) AS check_withdrawal_count\n      , sum(check_deposit_count) AS check_deposit_count\n      , max(largest_ach_deposit_amount) AS largest_ach_deposit_amount\n      , min(largest_ach_withdrawal_amount) AS largest_ach_withdrawal_amount\n      , min(largest_dbt_card_no_pin_amount) AS largest_dbt_card_no_pin_amount\n      , min(largest_dbt_card_pin_amount) AS largest_dbt_card_pin_amount\n      , max(largest_check_deposit_amount) AS largest_check_deposit_amount\n      , min(largest_check_withdrawal_amount) AS largest_check_withdrawal_amount\n      , max(largest_wire_deposit_amount) AS largest_wire_deposit_amount\n      , min(largest_wire_withdrawal_amount) AS largest_wire_withdrawal_amount\n      , max(largest_atm_deposit_amount) AS largest_atm_deposit_amount\n      , min(largest_atm_withdrawal_amount) AS largest_atm_withdrawal_amount\n      , CASE WHEN sum(aim_debit_count)= 0 THEN NULL\n        ELSE 0.5 * sum(aim_people_transaction_average  * aim_debit_count )/sum(aim_debit_count ) + 0.5 * sum(aim_people_dollar_weighted_average::decimal(38,6)   * aim_debit_amount::decimal(38,6) )/sum(aim_debit_amount::decimal(38,6)) END AS monthly_aim_people_score\n      , CASE WHEN sum(aim_debit_count) = 0 THEN NULL\n        ELSE (0.5 * sum(aim_planet_transaction_average * aim_debit_count)/sum(aim_debit_count) + 0.5 * sum(aim_planet_dollar_weighted_average::decimal(38,6)  * aim_debit_amount::decimal(38,6) )/sum(aim_debit_amount::decimal(38,6) )) END AS monthly_aim_planet_score\n      , sum(other_deposit_count) as other_deposit_count\n      , sum(other_deposit_amount) as other_deposit_amount\n      , sum(other_withdrawal_count) as other_withdrawal_count\n      , sum(other_withdrawal_amount) as other_withdrawal_amount\n      , case when sum(planet_protection_subscription_active::smallint) > 0 then TRUE else FALSE end as planet_protection_subscription_active\n      , sum(planet_protection_subscribed_debit_count) as planet_protection_subscribed_debit_count\n      , sum(planet_protection_unsubscribed_debit_count) as planet_protection_unsubscribed_debit_count\n      , sum(planet_protection_subscribed_debit_amount) as planet_protection_subscribed_debit_amount\n      , sum(planet_protection_unsubscribed_debit_amount) as planet_protection_unsubscribed_debit_amount\n      , sum(planet_protection_subscribed_debit_emissions_amount) as planet_protection_subscribed_debit_emissions_amount\n      , sum(planet_protection_unsubscribed_debit_emissions_amount) as planet_protection_unsubscribed_debit_emissions_amount\n    FROM bi.dt_account_daily_data a\n    GROUP BY 1, 2\n    );\n\ndrop table if exists ush.last_dates;\n\ncreate table ush.last_dates as (\n    SELECT unique_account_id\n      , date_trunc('month', date)::DATE AS month\n      , max(date) AS last_day_of_month\n    FROM bi.dt_account_daily_data\n    GROUP BY 1, 2\n);\n\ndrop table if exists  ush.end_of_month_data;\n\ncreate table ush.end_of_month_data as (\n    SELECT b.unique_account_id\n      , a.month\n      , b.yearly_percent_fee_setting\n      , b.monthly_usd_fee_setting\n      , daily_balance AS end_of_month_balance\n      , original_balance AS end_of_month_balance_actual\n      , spend_daily_balance AS end_of_month_spend_balance_actual\n      , save_daily_balance AS end_of_month_save_balance_actual\n      , is_terminated\n      , is_funded\n      , is_charged_off\n    FROM ush.last_dates a\n    JOIN bi.dt_account_daily_data b ON a.unique_account_id = b.unique_account_id AND a.last_day_of_month = b.date\n);\n\ndrop table if exists ush.dt_account_monthly_data_tmp1;\ncreate table ush.dt_account_monthly_data_tmp1 as (\n SELECT a.unique_account_id\n    , a.month\n    , a.peak_monthly_balance\n    , a.average_balance\n    , a.lowest_monthly_balance\n    , a.peak_monthly_balance_actual\n    , a.average_balance_actual\n    , a.lowest_monthly_balance_actual\n    , a.average_spend_balance_actual\n    , a.lowest_monthly_spend_balance_actual\n    , a.peak_monthly_spend_balance_actual\n    , a.average_save_balance_actual\n    , a.lowest_monthly_save_balance_actual\n    , a.peak_monthly_save_balance_actual\n    , a.monthly_aim_scored_transactions\n    , a.monthly_debit_card_pin_amount\n    , a.monthly_debit_card_no_pin_amount\n    , a.monthly_debit_card_pin_transactions\n    , a.monthly_debit_card_no_pin_transactions\n    , a.monthly_bill_pay_amount\n    , a.monthly_bill_pay_count\n    , b.end_of_month_balance\n    , b.end_of_month_balance_actual\n    , b.end_of_month_spend_balance_actual\n    , b.end_of_month_save_balance_actual\n    , b.yearly_percent_fee_setting\n    , CASE WHEN account_type = 'Checking' THEN b.monthly_usd_fee_setting ELSE b.yearly_percent_fee_setting * average_balance / 12 END AS monthly_usd_fee_setting\n    , b.is_terminated\n    , b.is_funded\n    , b.is_charged_off\n    , a.ach_deposit_amount\n    , a.ach_withdrawal_amount\n    , a.check_deposit_amount\n    , a.check_withdrawal_amount\n    , a.wire_deposit_amount\n    , a.wire_withdrawal_amount\n    , a.atm_deposit_amount\n    , a.atm_withdrawal_amount\n    , a.atm_fee_refund_amount\n    , a.interest_amount\n    , a.monthly_aim_people_score\n    , a.monthly_aim_planet_score\n    , a.wire_withdrawal_count\n    , a.wire_deposit_count\n    , a.internal_transfer_deposit\n    , a.internal_transfer_withdrawal\n    , a.ach_deposit_count\n    , a.ach_withdrawal_count\n    , a.atm_deposit_count\n    , a.atm_withdrawal_count\n    , a.check_withdrawal_count\n    , a.check_deposit_count\n    , a.actual_pwif_paid\n    , a.promo\n    , a.cashback\n    , a.largest_ach_deposit_amount\n    , a.largest_dbt_card_no_pin_amount\n    , a.largest_dbt_card_pin_amount\n    , a.largest_check_deposit_amount\n    , a.largest_check_withdrawal_amount\n    , a.largest_wire_deposit_amount\n    , a.largest_wire_withdrawal_amount\n    , a.largest_atm_deposit_amount\n    , a.largest_atm_withdrawal_amount\n    , a.other_deposit_count\n    , a.other_deposit_amount\n    , a.other_withdrawal_count\n    , a.other_withdrawal_amount\n    , a.planet_protection_subscription_active\n    , a.planet_protection_subscribed_debit_count\n    , a.planet_protection_unsubscribed_debit_count\n    , a.planet_protection_subscribed_debit_amount\n    , a.planet_protection_unsubscribed_debit_amount\n    , a.planet_protection_subscribed_debit_emissions_amount\n    , a.planet_protection_unsubscribed_debit_emissions_amount\n  FROM ush.dt_account_monthly_data_tmp a\n  JOIN ush.end_of_month_data b ON a.unique_account_id = b.unique_account_id AND a.month = b.month\n  JOIN ush.dt_accounts acc ON a.unique_account_id = acc.unique_account_id );\n\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp_2;\n\nCREATE TABLE ush.dt_account_monthly_data_tmp_2\nAS (\n  SELECT unique_account_id\n    , a.month\n    , a.monthly_debit_card_pin_amount\n    , a.monthly_debit_card_no_pin_amount\n    , a.monthly_debit_card_pin_transactions\n    , a.monthly_debit_card_no_pin_transactions\n    , a.monthly_aim_scored_transactions\n    , a.lowest_monthly_balance\n    , a.average_balance\n    , a.peak_monthly_balance\n    , a.end_of_month_balance\n    , a.lowest_monthly_balance_actual\n    , a.average_balance_actual\n    , a.peak_monthly_balance_actual\n    , a.end_of_month_balance_actual\n    , a.lowest_monthly_spend_balance_actual\n    , a.average_spend_balance_actual\n    , a.peak_monthly_spend_balance_actual\n    , a.end_of_month_spend_balance_actual\n    , a.lowest_monthly_save_balance_actual\n    , a.average_save_balance_actual\n    , a.peak_monthly_save_balance_actual\n    , a.end_of_month_save_balance_actual\n    , a.ach_withdrawal_amount\n    , a.ach_deposit_amount\n    , a.check_withdrawal_amount\n    , a.check_deposit_amount\n    , a.wire_withdrawal_amount\n    , a.wire_deposit_amount\n    , a.atm_withdrawal_amount\n    , a.atm_deposit_amount\n    , a.atm_fee_refund_amount\n    , a.interest_amount\n    , a.monthly_usd_fee_setting\n    , a.yearly_percent_fee_setting\n    , a.monthly_aim_people_score\n    , a.monthly_aim_planet_score\n    , is_terminated\n    , is_funded\n    , is_charged_off\n    , previous_monthly_ach_deposit_amount\n    , previous_monthly_ach_withdrawal_amount\n    , previous_monthly_debit_card_pin_amount\n    , previous_monthly_debit_card_no_pin_amount\n    , a.wire_withdrawal_count\n    , a.wire_deposit_count\n    , a.internal_transfer_deposit\n    , a.internal_transfer_withdrawal\n    , a.ach_deposit_count\n    , a.ach_withdrawal_count\n    , a.atm_deposit_count\n    , a.atm_withdrawal_count\n    , a.check_withdrawal_count\n    , a.check_deposit_count\n    , a.actual_pwif_paid\n    , a.promo\n    , a.cashback\n    , a.largest_ach_deposit_amount\n    , a.largest_dbt_card_no_pin_amount\n    , a.largest_dbt_card_pin_amount\n    , a.largest_check_deposit_amount\n    , a.largest_check_withdrawal_amount\n    , a.largest_wire_deposit_amount\n    , a.largest_wire_withdrawal_amount\n    , a.largest_atm_deposit_amount\n    , a.largest_atm_withdrawal_amount\n    , a.monthly_bill_pay_amount\n    , a.monthly_bill_pay_count\n    , a.other_deposit_count\n    , a.other_deposit_amount\n    , a.other_withdrawal_count\n    , a.other_withdrawal_amount\n    , a.planet_protection_subscription_active\n    , a.planet_protection_subscribed_debit_count\n    , a.planet_protection_unsubscribed_debit_count\n    , a.planet_protection_subscribed_debit_amount\n    , a.planet_protection_unsubscribed_debit_amount\n    , a.planet_protection_subscribed_debit_emissions_amount\n    , a.planet_protection_unsubscribed_debit_emissions_amount\n  FROM (\n    SELECT a.*\n      , b.ach_withdrawal_amount AS previous_monthly_ach_withdrawal_amount\n      , b.ach_deposit_amount AS previous_monthly_ach_deposit_amount\n      , b.monthly_debit_card_pin_amount AS previous_monthly_debit_card_pin_amount\n      , b.monthly_debit_card_no_pin_amount AS previous_monthly_debit_card_no_pin_amount\n    FROM ush.dt_account_monthly_data_tmp1 a\n    LEFT JOIN ush.dt_account_monthly_data_tmp b ON a.unique_account_id = b.unique_account_id AND a.month = DATEADD('month', 1, b.month)\n    ) a\n);\n\n\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp;\n\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp_3_1;\nCREATE TABLE ush.dt_account_monthly_data_tmp_3_1\nAS (\n  WITH\n  position_counts AS (\n    SELECT date_trunc('quarter', position_date) :: DATE AS quarter\n      , count(*) AS quarter_count\n    FROM (\n      SELECT DATEADD('hour', 10, convert_timezone('America/Los_Angeles',position_date))::date AS position_date\n      FROM web_db.investment_position\n      GROUP BY 1\n      ) possible_position_dates\n    GROUP BY 1\n    ),\n  average_monthly_positions AS (\n    SELECT a.investment_id\n      , user_id\n      , ua.account_id\n      , i.fund_id\n      , a.month\n      , a.ttl / b.quarter_count AS avg_monthly_position\n    FROM (\n      SELECT investment_id\n        , date_trunc('quarter', DATEADD('hour', 10, convert_timezone('America/Los_Angeles',position_date))) :: DATE AS quarter\n        , date_trunc('month', DATEADD('hour', 10, convert_timezone('America/Los_Angeles',position_date))) :: DATE AS month\n        , sum(current_value) AS ttl\n      FROM web_db.investment_position\n      GROUP BY 1, 2, 3\n      ) a\n    JOIN position_counts b ON b.quarter = a.quarter\n    JOIN web_db.investment i ON a.investment_id = i.id\n    JOIN web_db.user_account ua ON i.account_id = ua.account_id\n    ),\n  payment_fractions AS (\n    SELECT a.investment_id\n      , a.user_id\n      , a.account_id\n      , a.fund_id\n      , a.month\n      , a.avg_monthly_position\n      , a.avg_monthly_position/ttl AS payment_fraction\n    FROM average_monthly_positions a\n    JOIN (\n      SELECT user_id\n        , fund_id\n        , date_trunc('quarter', month)::DATE AS quarter\n        , sum(avg_monthly_position) AS ttl\n      FROM average_monthly_positions\n      GROUP BY 1, 2, 3\n      HAVING sum(avg_monthly_position) > 0\n      ) b ON date_trunc('quarter', a.month) = b.quarter AND a.user_id = b.user_id AND a.fund_id = b.fund_id\n    ),\n  actual_investment_payments AS (\n    SELECT user_id\n      , CASE WHEN p.description = 'REDWX Fee Pmt' THEN 2 WHEN p.description = 'ASPFX Fee Pmt' THEN 1 END AS fund_id\n      , date_trunc('month', txn_date - INTERVAL '80 days')::DATE AS quarter\n      , sum(amount) AS amount\n    FROM web_db.payment p\n    JOIN web_db.user_payment_account upa ON p.user_payment_account_id = upa.id\n    WHERE p.description IN ('REDWX Fee Pmt', 'ASPFX Fee Pmt')\n    GROUP BY 1, 2, 3\n    ),\n  disaggregated_investment_payments AS (\n    SELECT b.investment_id\n      , b.month\n      , b.payment_fraction * a.amount AS monthly_payment\n    FROM actual_investment_payments a\n    JOIN payment_fractions b ON a.user_id = b.user_id AND a.fund_id = b.fund_id AND a.quarter = date_trunc('quarter', b.month)\n    ),\n  all_investment_payments AS (\n    SELECT *\n    FROM disaggregated_investment_payments\n    ),\n  depository_payments AS (\n    SELECT d.id AS depository_id\n      , DATE_TRUNC('month', txn_date :: DATE - 12)::DATE AS month\n      , amount\n    FROM web_db.payment p\n    JOIN web_db.user_payment_account upa ON upa.id = p.user_payment_account_id\n    JOIN web_db.user_account ua ON ua.user_id = upa.user_id\n    JOIN web_db.depository d ON ua.account_id = d.account_id\n    WHERE p.description = 'Fee Pmt'\n      AND txn_date::date NOT IN ('2016-12-31', '2017-02-06', '2017-10-05', '2017-10-06')\n      AND d.inception_date IS NOT NULL\n    ),\n  all_depository_payments AS (\n    SELECT dta.unique_account_id\n      , dp.month\n      , dp.amount\n    FROM depository_payments dp\n    JOIN ush.dt_accounts dta ON (dta.radius_id = dp.depository_id)\n    UNION ALL\n    SELECT dta.unique_account_id\n      , dp.month\n      , dp.amount\n    FROM depository_payments dp\n    JOIN ush.dt_accounts dta ON (dta.galileo_id = dp.depository_id)\n    ),\n  all_payment_data AS (\n    SELECT unique_account_id\n      , month\n      , amount AS fee_paid\n    FROM all_depository_payments\n    UNION ALL\n    SELECT 'i' || investment_id AS unique_account_id\n      , month\n      , monthly_payment AS fee_paid\n    FROM all_investment_payments\n    )\n  SELECT unique_account_id\n    , month\n    , sum(fee_paid) AS fee_paid\n  FROM all_payment_data\n  GROUP BY unique_account_id, month\n);\n\n\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp_3;\nCREATE TABLE ush.dt_account_monthly_data_tmp_3\nAS (\n  SELECT a.*\n    , coalesce(fee_paid, 0) AS billed_pwif_this_month\n    , a.monthly_usd_fee_setting - b.monthly_usd_fee_setting AS month_over_month_monthly_fee_setting_change\n    , a.yearly_percent_fee_setting - b.yearly_percent_fee_setting AS month_over_month_yearly_fee_setting_change\n    , CASE WHEN acc.account_type = 'Checking' AND a.average_balance >= 2500 THEN -0.01/12 * a.average_balance\n        WHEN account_type = 'Checking' AND a.average_balance < 2500 THEN -0.0025 / 12 * a.average_balance\n        ELSE 0 END AS interest_paid_out\n    , CASE WHEN acc.account_type = 'Checking' THEN a.average_balance * 0.016/12\n        ELSE 0 END AS interest_income\n    , CASE WHEN account_type = 'Checking' THEN 2.5\n        ELSE 0 END AS card_issue_fee\n  FROM ush.dt_account_monthly_data_tmp_2 a\n  LEFT JOIN ush.dt_account_monthly_data_tmp_2 b ON a.unique_account_id = b.unique_account_id AND a.month = DATEADD('month', 1, b.month)\n  JOIN ush.dt_accounts acc ON a.unique_account_id = acc.unique_account_id\n  LEFT JOIN ush.dt_account_monthly_data_tmp_3_1 c ON a.unique_account_id = c.unique_account_id AND a.month = c.month\n);\n\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp_2;\nDROP TABLE IF EXISTS ush.dt_account_monthly_data;\n\nCREATE TABLE ush.dt_account_monthly_data\nAS (\n  SELECT a.*\n    , sum(b.billed_pwif_this_month) AS pwif_paid_to_date\n    , sum(b.interest_paid_out)      AS interest_paid_to_date\n    , sum(b.interest_income)        AS interest_income_to_dat\n    , a.unique_account_id || '-' || to_varchar(a.month,'yyyymmdd') AS unique_id\n    --, ROW_NUMBER() OVER(order by a.unique_account_id) AS unique_id\n  FROM ush.dt_account_monthly_data_tmp_3 a\n  JOIN ush.dt_account_monthly_data_tmp_3 b ON a.unique_account_id = b.unique_account_id AND a.month >= b.month\n  GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n           31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n           59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85\n);\n\n\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp_3;\n\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp_4;\nDROP TABLE IF EXISTS ush.dt_account_monthly_data_tmp_3_1;\ndrop table if exists ush.DT_ACCOUNT_MONTHLY_DATA_TMP1;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958607":{"id":2958607,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1859466705,"x":-272,"y":160,"width":32,"height":32,"inputConnectorIDs":[2958603],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"load WH to xsmall"}}}},"visible":true},"2":{"slot":2,"name":"Warehouse","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"LOAD_WH"}}}},"visible":true},"3":{"slot":3,"name":"Command Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Set"}}}},"visible":true},"4":{"slot":4,"name":"New name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false},"5":{"slot":5,"name":"Properties","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"WAREHOUSE_SIZE"},"2":{"slot":2,"type":"STRING","value":"XSMALL"}}}},"visible":true},"6":{"slot":6,"name":"Properties","elements":{},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958642":{"id":2958642,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-384,"y":-96,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958602],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958643":{"id":2958643,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-272,"y":64,"width":32,"height":32,"inputConnectorIDs":[2958601],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958603],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dt_account_period_data"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse load_wh;\n\nSET TIMEZONE = 'America/Los_Angeles';\n\nDROP TABLE IF EXISTS ush.dt_account_period_data_tmp;\nCREATE TABLE ush.dt_account_period_data_tmp\nAS\n(\n      SELECT\n        a.unique_account_id,\n\t\t\t\tfloor((date - inception_date::date) / 30.0) AS thirty_day_periods_since_inception,\n        (floor((date - inception_date::date) / 30.0) * 30)::decimal || '-' || ((floor((date - inception_date::date) / 30.0) + 1) * 30 - 1)::decimal || ' Days' AS day_buckets_since_inception,\n        avg(daily_balance)                    AS average_balance,\n        min(daily_balance)                    AS lowest_balance,\n        max(daily_balance)                    AS peak_balance,\n        avg(original_balance)                 AS average_balance_actual,\n        min(original_balance)                 AS lowest_balance_actual,\n        max(original_balance)                 AS peak_balance_actual,\n        avg(spend_daily_balance)              AS average_spend_balance_actual,\n        min(spend_daily_balance)              AS lowest_spend_balance_actual,\n        max(spend_daily_balance)              AS peak_spend_balance_actual,\n        avg(save_daily_balance)               AS average_save_balance_actual,\n        min(save_daily_balance)               AS lowest_save_balance_actual,\n        max(save_daily_balance)               AS peak_save_balance_actual,\n        sum(dbt_card_no_pin_amount)           AS debit_card_no_pin_amount,\n        sum(dbt_card_pin_amount)              AS debit_card_pin_amount,\n        sum(aim_debit_count)                  AS aim_scored_transactions,\n        sum(aim_debit_amount)                 AS aim_scored_transactions_amount,\n        sum(dbt_card_no_pin_count)            AS debit_card_no_pin_transactions,\n        sum(dbt_card_pin_count)               AS debit_card_pin_transactions,\n        sum(daily_bill_pay_amount)            AS bill_pay_amount,\n        sum(ach_withdrawal_amount)            AS ach_withdrawal_amount,\n        sum(ach_deposit_amount)               AS ach_deposit_amount,\n        sum(atm_deposit_amount)               AS atm_deposit_amount,\n        sum(atm_withdrawal_amount)            AS atm_withdrawal_amount,\n        sum(wire_withdrawal_amount)           AS wire_withdrawal_amount,\n        sum(wire_deposit_amount)              AS wire_deposit_amount,\n        sum(internal_transfer_deposit)        AS internal_transfer_deposit,\n        sum(internal_transfer_withdrawal)     AS internal_transfer_withdrawal,\n        sum(check_withdrawal_amount)          AS check_withdrawal_amount,\n        sum(check_deposit_amount)             AS check_deposit_amount,\n        sum(actual_pwif_paid)                 AS actual_pwif_paid,\n        sum(promo)                            AS promo,\n        sum(cashback)                         AS cashback,\n        sum(a.atm_fee_refund_amount)          AS atm_fee_refund_amount,\n        sum(interest_amount)                  AS interest_amount,\n        sum(wire_withdrawal_count)            AS wire_withdrawal_count,\n        sum(wire_deposit_count)               AS wire_deposit_count,\n        sum(ach_deposit_count)                AS ach_deposit_count,\n        sum(ach_withdrawal_count)             AS ach_withdrawal_count,\n        sum(atm_deposit_count)                AS atm_deposit_count,\n        sum(atm_withdrawal_count)             AS atm_withdrawal_count,\n        sum(check_withdrawal_count)           AS check_withdrawal_count,\n        sum(check_deposit_count)              AS check_deposit_count,\n        max(largest_ach_deposit_amount)       AS largest_ach_deposit_amount,\n        min(largest_ach_withdrawal_amount)    AS largest_ach_withdrawal_amount,\n        min(largest_dbt_card_no_pin_amount)   AS largest_dbt_card_no_pin_amount,\n        min(largest_dbt_card_pin_amount)      AS largest_dbt_card_pin_amount,\n        max(largest_check_deposit_amount)     AS largest_check_deposit_amount,\n        min(largest_check_withdrawal_amount)  AS largest_check_withdrawal_amount,\n        max(largest_wire_deposit_amount)      AS largest_wire_deposit_amount,\n        min(largest_wire_withdrawal_amount)   AS largest_wire_withdrawal_amount,\n        max(largest_atm_deposit_amount)       AS largest_atm_deposit_amount,\n        min(largest_atm_withdrawal_amount)    AS largest_atm_withdrawal_amount,\n        sum(other_deposit_count)              AS other_deposit_count,\n        sum(other_deposit_amount)             AS other_deposit_amount,\n        sum(other_withdrawal_count)           AS other_withdrawal_count,\n        sum(other_withdrawal_amount)          AS other_withdrawal_amount\n      FROM bi.dt_account_daily_data a inner JOIN ush.dt_accounts b\n          on a.unique_account_id = b.unique_account_id\n      GROUP BY 1, 2, 3\n  );\n\ndrop table if exists ush.last_dates;\ncreate table ush.last_dates as (\n      SELECT\n        a.unique_account_id,\n        floor((date - inception_date::date) / 30.0) as thirty_day_periods_since_inception,\n        (floor((date - inception_date::date) / 30.0) * 30)::decimal || '-' || ((floor((date - inception_date::date) / 30.0) + 1) * 30 - 1)::decimal || ' Days' as day_buckets_since_inception,\n        max(date)                             AS last_day_of_period\n      FROM bi.dt_account_daily_data a inner JOIN ush.dt_accounts b\n          on a.unique_account_id = b.unique_account_id\n      GROUP BY 1, 2);\n\ndrop table if exists ush.end_of_period_data;\ncreate table ush.end_of_period_data AS (\n      SELECT\n        b.unique_account_id,\n        a.thirty_day_periods_since_inception,\n        a.day_buckets_since_inception,\n        b.yearly_percent_fee_setting,\n        b.monthly_usd_fee_setting,\n        daily_balance AS end_of_period_balance,\n        original_balance AS end_of_period_balance_actual,\n        spend_daily_balance AS end_of_period_spend_balance_actual,\n        save_daily_balance AS end_of_period_save_balance_actual,\n        is_terminated,\n        is_funded\n      FROM ush.last_dates a INNER JOIN bi.dt_account_daily_data b\n          ON a.unique_account_id = b.unique_account_id AND a.last_day_of_period = b.date);\n\ndrop table if exists ush.dt_account_period_data;\n\ncreate table ush.dt_account_period_data as (\nSELECT\n    a.unique_account_id,\n    a.thirty_day_periods_since_inception,\n    a.day_buckets_since_inception,\n    a.peak_balance,\n    a.average_balance,\n    a.lowest_balance,\n    a.peak_balance_actual,\n    a.average_balance_actual,\n    a.lowest_balance_actual,\n    a.peak_spend_balance_actual,\n    a.average_spend_balance_actual,\n    a.lowest_spend_balance_actual,\n    b.end_of_period_spend_balance_actual,\n    a.peak_save_balance_actual ,\n    a.average_save_balance_actual,\n    a.lowest_save_balance_actual,\n    b.end_of_period_save_balance_actual,\n    a.aim_scored_transactions,\n    a.debit_card_pin_amount,\n    a.debit_card_no_pin_amount,\n    a.debit_card_pin_transactions,\n    a.debit_card_no_pin_transactions,\n    a.bill_pay_amount,\n    b.end_of_period_balance,\n    b.end_of_period_balance_actual,\n    b.yearly_percent_fee_setting,\n    CASE WHEN account_type = 'Checking'\n      THEN b.monthly_usd_fee_setting\n    ELSE b.yearly_percent_fee_setting * average_balance / 12 END AS monthly_usd_fee_setting,\n    b.is_terminated,\n    b.is_funded,\n    a.ach_deposit_amount,\n    a.ach_withdrawal_amount,\n    a.check_deposit_amount,\n    a.actual_pwif_paid,\n    a.promo,\n    a.cashback,\n    a.check_withdrawal_amount,\n    a.wire_deposit_amount,\n    a.wire_withdrawal_amount,\n    a.atm_deposit_amount,\n    a.atm_withdrawal_amount,\n    a.atm_fee_refund_amount,\n    a.interest_amount,\n    a.wire_withdrawal_count,\n    a.wire_deposit_count,\n    a.internal_transfer_deposit,\n    a.internal_transfer_withdrawal,\n    a.ach_deposit_count,\n    a.ach_withdrawal_count,\n    a.atm_deposit_count,\n    a.atm_withdrawal_count,\n    a.check_withdrawal_count,\n    a.check_deposit_count,\n    a.largest_ach_deposit_amount,\n    a.largest_ach_withdrawal_amount,\n    a.largest_dbt_card_no_pin_amount,\n    a.largest_dbt_card_pin_amount,\n    a.largest_check_deposit_amount,\n    a.largest_check_withdrawal_amount,\n    a.largest_wire_deposit_amount,\n    a.largest_wire_withdrawal_amount,\n    a.largest_atm_deposit_amount,\n    a.largest_atm_withdrawal_amount,\n    a.other_deposit_count,\n    a.other_deposit_amount,\n    a.other_withdrawal_count,\n    a.other_withdrawal_amount,\n    ROW_NUMBER() OVER(order by a.unique_account_id) AS unique_id\n  FROM ush.dt_account_period_data_tmp a INNER JOIN ush.end_of_period_data b\n      ON a.unique_account_id = b.unique_account_id AND\n         a.thirty_day_periods_since_inception = b.thirty_day_periods_since_inception\n    INNER JOIN ush.dt_accounts acc\n      ON a.unique_account_id = acc.unique_account_id\n);\n\n/*\nDROP TABLE IF EXISTS ush.dt_account_period_data;\n\nCREATE TABLE ush.dt_account_period_data\nAS\n(\n  select\n    *,\n\n    ROW_NUMBER() OVER(order by unique_account_id) AS unique_id\n  FROM ush.dt_account_period_data_tmp1)\n;\n*/\n\ndrop table if exists ush.DT_ACCOUNT_PERIOD_DATA_TMP;\ndrop table if exists ush.DT_ACCOUNT_PERIOD_DATA_TMP1;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2958601":{"id":2958601,"sourceID":2958605,"targetID":2958643},"2958606":{"id":2958606,"sourceID":2958604,"targetID":2958605}},"failureConnectors":{},"unconditionalConnectors":{"2958602":{"id":2958602,"sourceID":2958642,"targetID":2958604},"2958603":{"id":2958603,"sourceID":2958643,"targetID":2958607}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{}},"info":{"name":"dt_testing_sub_2","description":null,"type":"ORCHESTRATION","tag":"8ef9c536-6ed3-4fae-8946-d0542ec3c93a"}}