{"job":{"components":{"2958112":{"id":2958112,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":0,"y":0,"width":32,"height":32,"inputConnectorIDs":[2958129],"outputSuccessConnectorIDs":[2958109],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"cleanup"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DROP TABLE IF EXISTS public.ucj_batch_promo;\nDROP TABLE IF EXISTS public.ucj_batch_stage;\nDROP TABLE IF EXISTS public.ucj_batch_file;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958113":{"id":2958113,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-496,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958101,2958102,2958103,2958104,2958105,2958106,2958107,2958108,2958110],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958114":{"id":2958114,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-416,"y":0,"width":32,"height":32,"inputConnectorIDs":[2958110],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2958111],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Variables"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Udating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport datetime\n\n#add run_history_id to create a unique temp table for parrallel processing\ncontext.updateVariable(\"staging_table\", staging_table + str(run_history_id))\n\n#add YYYYMMDD to batch_filename varible \n#add value in batch_filename_sequence variable\n#Note: date calc rolls to next day when processed after 5pm MT or 4pm PT (Galileo is no longer processing at this time)\n#context.updateVariable(\"batch_filename\", batch_filename + datetime.date.today().strftime('%Y') + datetime.date.today().strftime('%m') + datetime.date.today().strftime('%d') + str(run_history_id) + '.txt')"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958115":{"id":2958115,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-320,"y":0,"width":32,"height":32,"inputConnectorIDs":[2958111],"outputSuccessConnectorIDs":[2958131],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"promo"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DROP TABLE IF EXISTS public.ucj_batch_promo;\nCREATE TABLE public.ucj_batch_promo AS\nWITH\n   participants AS (\n      SELECT DISTINCT\n             usr.id AS user_id\n      FROM public.ucj_adhoc_aplus ah\n      LEFT JOIN web_db._user usr ON usr.uuid = ah.uuid\n      --WHERE ue.user_id is not null\n      ),\n   promo_accounts AS (\n      SELECT *\n      FROM (\n         SELECT upay.account_number AS prn\n              , uapp.user_id\n              , uapp.account_id\n              , least(nvl(d.account_approved_time,current_date),nvl(d.inception_date,current_date),nvl(a.inception_date,current_date))::DATE AS asp_inception_date\n              , row_number() OVER (PARTITION BY uapp.account_id ORDER BY nvl(a.inception_date,current_date) ASC NULLS LAST, uapp.product_id ASC NULLS LAST) AS rownum\n         FROM participants usr\n         LEFT JOIN web_db.user_product_application uapp ON uapp.user_id = usr.user_id\n         LEFT JOIN web_db.account a ON a.id = uapp.account_id AND a.termination_date IS NULL AND nvl(a.is_admin_disabled,'false') <> 'true'\n         LEFT JOIN web_db.depository d ON d.account_id = a.id AND d.product_id = uapp.product_id\n         LEFT JOIN web_db.user_payment_account upay ON d.id = upay.depository_id AND upay.user_id = uapp.user_id AND nvl(upay.is_admin_disabled,'false') <> 'true' AND nvl(upay.is_deleted,'false') <> 'true'\n         --WHERE asp_inception_date::DATE >= '2019-06-20' AND asp_inception_date::DATE < '2019-09-15'\n         )\n      WHERE rownum = 1\n      ),\n   subscribe_accounts AS (\n         SELECT usr.user_id\n              , usr.account_id\n              , usr.prn\n              , sub.subscription_id\n              , sub.plan_id\n              , sub.billing_cycle_anchor\n              , sub.created_at AS subscribe_date\n              , sub_inv.invoice_id\n              , sub_inv.plan_id AS plan_invoice\n              , sub_inv.amount_due\n              , sub_inv.billing_reason\n              , sub_inv.period_start\n              , sub_inv.period_end\n              , sub_inv.created_at AS invoice_date\n              , row_number() over (partition by usr.account_id order by sub_inv.period_start asc) AS invoice_number\n         FROM promo_accounts usr\n         LEFT JOIN web_db.subscription sub ON sub.account_id = usr.account_id\n         LEFT JOIN web_db.subscription pre_sub ON pre_sub.account_id = usr.account_id AND pre_sub.created_at::date < '2020-10-31' AND pre_sub.status = 'active'\n         LEFT JOIN web_db.subscription_invoice sub_inv ON sub_inv.subscription_id = sub.subscription_id\n         WHERE sub.created_at::date >= '2020-10-31' AND sub.created_at::date < '2020-11-08'\n           AND pre_sub.subscription_id is null\n           AND sub_inv.status = 'paid'\n      ),\n   balance_records AS (\n      SELECT gbal.file_date\n           , asp_gal.account_id\n           , decode(gbal.type_of_account,8,'Savings',6,'Checking') depository_type\n           , sum(concat(trim(gbal.current_balance_sign),trim(gbal.current_balance))::DEC(18,2)) AS balance\n      FROM (\n         SELECT DISTINCT uapp.account_id, aog.galileo_account_number\n         FROM promo_accounts pa\n         JOIN web_db.user_product_application uapp ON uapp.account_id = pa.account_id\n         JOIN aog_db.galileo_accounts aog ON uapp.id = aog.aspiration_application_id AND uapp.user_id = aog.aspiration_user_id\n         ) asp_gal\n      JOIN rdl.raw_galileo_customer_master_data gbal ON asp_gal.galileo_account_number = gbal.galileo_account_id\n      GROUP BY gbal.file_date\n             , asp_gal.account_id\n             , gbal.type_of_account\n      ),\n   accounts_start AS (\n      SELECT account_id\n           , min(file_date)-1 AS start_date\n      FROM balance_records\n      GROUP BY account_id\n      ),\n   numbers AS (\n      SELECT 0 AS number\n      UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4\n      UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8\n      UNION ALL SELECT 9\n      ),\n   records_dates AS (\n      SELECT rs.account_id\n           , (n1.number::VARCHAR || n2.number::VARCHAR || n3.number::VARCHAR)::BIGINT AS num\n           , concat(to_char(('2019-01-01'::DATE + num),'YYYY-MM'),'-01')::DATE AS month\n           , to_char(('2019-01-01'::DATE + num),'YYYY-MM-DD')::DATE AS date\n      FROM numbers n1\n      CROSS JOIN numbers n2\n      CROSS JOIN numbers n3\n      CROSS JOIN accounts_start rs\n      WHERE date <= current_date+1\n        AND date >= rs.start_date\n      ),\n   daily_balance AS (\n      SELECT rd.month\n           , rd.date\n           , rd.account_id\n           , nvl(last_value(spend.balance IGNORE NULLS) OVER (PARTITION BY rd.account_id ORDER BY rd.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),0) AS balance_spend\n           , nvl(last_value(save.balance IGNORE NULLS) OVER (PARTITION BY rd.account_id ORDER BY rd.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),0) AS balance_save\n           , nvl(balance_spend,0)+nvl(balance_save,0) AS balance_combined\n      FROM records_dates rd\n      LEFT JOIN balance_records spend ON spend.file_date = rd.date AND spend.account_id = rd.account_id AND spend.depository_type = 'Checking'\n      LEFT JOIN balance_records save ON save.file_date = rd.date AND save.account_id = rd.account_id AND save.depository_type = 'Savings'\n      ),\n   accounts_standing AS (\n      SELECT account_id\n           , min(balance_spend) < 0   OR min(balance_save) < 0   AS has_od\n           , max(balance_spend) >= 10 OR max(balance_save) >= 10 AS has_funded\n      FROM daily_balance\n      GROUP BY account_id\n      ),\n   accounts_credited AS (\n      SELECT pa.account_id\n           , sum(post.amount) AS total_credit\n           , count(DISTINCT post.id) AS count_credit\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      WHERE (post.description = 'Aspiration Plus Fee Rebate - Promotion' OR gpt.transaction_description = 'Aspiration Plus Fee Rebate - Promotion')\n      GROUP BY 1\n      ),\n   accounts_cards AS (\n      SELECT DISTINCT cards.prn\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      JOIN rdl.raw_galileo_account_card_data cards ON gpt.prn = cards.prn\n      WHERE cards.type_of_card IN (2,25,3) --includes virtual\n      ),\n   accounts_debits AS (\n      SELECT pa.account_id\n           , count(1) AS count_trans\n           , sum(case when post.transaction_date >= '2020-09-04'::DATE AND post.transaction_date < '2020-09-08'::DATE then post.amount end)*-1 AS sum_trans\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      JOIN accounts_cards cards ON gpt.prn = cards.prn\n      WHERE post.transaction_date >= '2020-09-04'::DATE\n        AND post.transaction_date < '2020-10-01'::DATE\n        AND gpt.transaction_code_type IN ('ADdh'   --'Debit Chargeback',\n                                         ,'ADdj'   --'Debit 2nd Presentment',\n                                         ,'ISA'    --'Purchase with PIN',\n                                         ,'ISC'    --'Pre-auth completion',\n                                         ,'ISL'    --'Auth',\n                                         ,'SDA'    --'Purchase with PIN',\n                                         ,'SDC'    --'Pre-auth completion',\n                                         ,'SDL'    --'Retail Sale',\n                                         ,'SE5'    --'Purchase',\n                                         ,'SE8')   --'Unique Transactions',\n      GROUP BY 1\n      ),\n   promo_results AS (\n      SELECT pa.prn\n           , pa.account_id\n           , pa.user_id\n           , sum(1) OVER (PARTITION BY pa.user_id) AS user_row_count\n           , sum(1) OVER (PARTITION BY pa.account_id) AS account_row_count\n           , nvl(ast.has_funded,FALSE) AS funded\n           , nvl(ast.has_od,FALSE) AS overdraft\n           , nvl(ac.count_credit,0) AS prior_credits\n           , trunc(nvl(ac.total_credit,0),2) AS prior_amount\n           , trunc(greatest(case when pa.plan_invoice like '%yearly%' then greatest(17.25 - prior_amount,0) else least(21.0 - prior_amount, 7.0) end,0),2) AS credit_amount\n      FROM subscribe_accounts pa\n      LEFT JOIN accounts_standing ast ON ast.account_id = pa.account_id\n      LEFT JOIN accounts_credited ac ON ac.account_id = pa.account_id\n      WHERE pa.invoice_number > prior_credits\n        AND credit_amount > 0\n\n      )\nSELECT row_number() over (order by 1)  \t\t\t\t\t\t::VARCHAR AS record_number\n     , pr.prn\t\t\t\t\t\t   \t\t\t\t\t\t::VARCHAR AS account_identifier\n     , trunc(pr.credit_amount * -1,2)  \t\t\t\t\t\t::VARCHAR AS transaction_amount\n     , 'AP_${run_history_id}-'||lpad(record_number,5,'0')\t::VARCHAR AS transaction_identifier\nFROM promo_results pr\nUNION ALL\nSELECT 11                                  \t\t\t\t\t::VARCHAR AS record_number\n     , '223108036318'\t\t\t\t\t \t\t\t\t\t::VARCHAR AS account_identifier\n     , '-7.00'                                 \t\t\t\t::VARCHAR AS transaction_amount\n     , 'AP_${run_history_id}-' || lpad(record_number,5,'0')\t::VARCHAR AS transaction_identifier\nUNION ALL\nSELECT 12                                  \t\t\t\t\t::VARCHAR AS record_number\n     , '223108010875'\t\t\t\t\t \t\t\t\t\t::VARCHAR AS account_identifier\n     , '-7.00'                                 \t\t\t\t::VARCHAR AS transaction_amount\n     , 'AP_${run_history_id}-' || lpad(record_number,5,'0')\t::VARCHAR AS transaction_identifier\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958132":{"id":2958132,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-560,"y":96,"width":32,"height":32,"inputConnectorIDs":[2958105],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Cashback"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/* transaction_type = 'A'  transaction_subtype = 'CD'   'Labor Day 2020 Cash Back Promotion' */\nDROP TABLE IF EXISTS public.ucj_batch_promo;\nCREATE TABLE public.ucj_batch_promo AS\nWITH\n   participants AS (\n      SELECT DISTINCT\n             usr.id AS user_id\n      FROM public.ucj_adhoc_laborday ah\n      LEFT JOIN web_db._user usr ON usr.uuid = ah.uuid\n      --WHERE ue.user_id is not null\n      ),\n   promo_accounts AS (\n      SELECT *\n      FROM (\n         SELECT upay.account_number AS prn\n              , uapp.user_id\n              , uapp.account_id\n              , least(nvl(d.account_approved_time,current_date),nvl(d.inception_date,current_date),nvl(a.inception_date,current_date))::DATE AS asp_inception_date\n              , row_number() OVER (PARTITION BY uapp.account_id ORDER BY nvl(a.inception_date,current_date) ASC NULLS LAST, uapp.product_id ASC NULLS LAST) AS rownum\n         FROM participants usr\n         JOIN web_db.user_product_application uapp ON uapp.USER_ID = usr.USER_ID\n         JOIN web_db.account a ON a.id = uapp.account_id AND a.termination_date IS NULL AND nvl(a.is_admin_disabled,'false') <> 'true'\n         JOIN web_db.depository d ON d.account_id = a.id AND d.product_id = uapp.product_id\n         JOIN web_db.user_payment_account upay ON d.id = upay.depository_id AND upay.user_id = uapp.user_id AND nvl(upay.is_admin_disabled,'false') <> 'true' AND nvl(upay.is_deleted,'false') <> 'true'\n         --WHERE asp_inception_date::DATE >= '2019-06-20' AND asp_inception_date::DATE < '2019-09-15'\n         )\n      WHERE rownum = 1\n      ),\n   balance_records AS (\n      SELECT gbal.file_date\n           , asp_gal.account_id\n           , decode(gbal.type_of_account,8,'Savings',6,'Checking') depository_type\n           , sum(concat(trim(gbal.current_balance_sign),trim(gbal.current_balance))::DEC(18,2)) AS balance\n      FROM (\n         SELECT DISTINCT uapp.account_id, aog.galileo_account_number\n         FROM promo_accounts pa\n         JOIN web_db.user_product_application uapp ON uapp.account_id = pa.account_id\n         JOIN aog_db.galileo_accounts aog ON uapp.id = aog.aspiration_application_id AND uapp.user_id = aog.aspiration_user_id\n         ) asp_gal\n      JOIN rdl.raw_galileo_customer_master_data gbal ON asp_gal.galileo_account_number = gbal.galileo_account_id\n      GROUP BY gbal.file_date\n             , asp_gal.account_id\n             , gbal.type_of_account\n      ),\n   records_start AS (\n      SELECT min(file_date) AS start_date\n      FROM balance_records\n      ),\n   numbers AS (\n      SELECT 0 AS number\n      UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4\n      UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8\n      UNION ALL SELECT 9\n      ),\n   records_dates AS (\n      SELECT (n1.number::VARCHAR || n2.number::VARCHAR || n3.number::VARCHAR)::BIGINT AS num\n           , concat(to_char(('2019-01-01'::DATE + num),'YYYY-MM'),'-01')::DATE AS month\n           , to_char(('2019-01-01'::DATE + num),'YYYY-MM-DD')::DATE AS date\n      FROM numbers n1\n      CROSS JOIN numbers n2\n      CROSS JOIN numbers n3\n      CROSS JOIN records_start rs\n      WHERE date <= current_date\n        AND date >= rs.start_date\n      ),\n   daily_balance AS (\n      SELECT rd.month\n           , rd.date\n           , pa.account_id\n           , last_value(spend.balance IGNORE NULLS) OVER (PARTITION BY pa.account_id ORDER BY rd.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS balance_spend\n           , last_value(save.balance IGNORE NULLS) OVER (PARTITION BY pa.account_id ORDER BY rd.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS balance_save\n           , nvl(balance_spend,0)+nvl(balance_save,0) AS balance_combined\n      FROM records_dates rd\n      CROSS JOIN promo_accounts pa\n      LEFT JOIN balance_records spend ON spend.file_date = rd.date AND spend.account_id = pa.account_id AND spend.depository_type = 'Checking'\n      LEFT JOIN balance_records save ON save.file_date = rd.date AND save.account_id = pa.account_id AND save.depository_type = 'Savings'\n      ),\n   accounts_standing AS (\n      SELECT account_id\n           , min(balance_spend) < 0   OR min(balance_save) < 0   AS has_od\n           , max(balance_spend) >= 10 OR max(balance_save) >= 10 AS has_funded\n      FROM daily_balance\n      GROUP BY account_id\n      ),\n   accounts_credited AS (\n      SELECT pa.account_id\n           , sum(post.amount) AS total_credit\n           , count(DISTINCT post.id) AS count_credit\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      WHERE (post.description = 'Labor Day 2020 Cash Back Promotion' OR gpt.transaction_description = 'Labor Day 2020 Cash Back Promotion')\n      GROUP BY 1\n      ),\n   accounts_cards AS (\n      SELECT DISTINCT cards.prn\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      JOIN rdl.raw_galileo_account_card_data cards ON gpt.prn = cards.prn\n      WHERE cards.type_of_card IN (2,25,3) --includes virtual\n      ),\n   accounts_debits AS (\n      SELECT pa.account_id\n           , count(1) AS count_trans\n           , sum(case when post.transaction_date >= '2020-09-04'::DATE AND post.transaction_date < '2020-09-08'::DATE then post.amount end)*-1 AS sum_trans\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      JOIN accounts_cards cards ON gpt.prn = cards.prn\n      WHERE post.transaction_date >= '2020-09-04'::DATE\n        AND post.transaction_date < '2020-10-01'::DATE\n        AND gpt.transaction_code_type IN ('ADdh'   --'Debit Chargeback',\n                                         ,'ADdj'   --'Debit 2nd Presentment',\n                                         ,'ISA'    --'Purchase with PIN',\n                                         ,'ISC'    --'Pre-auth completion',\n                                         ,'ISL'    --'Auth',\n                                         ,'SDA'    --'Purchase with PIN',\n                                         ,'SDC'    --'Pre-auth completion',\n                                         ,'SDL'    --'Retail Sale',\n                                         ,'SE5'    --'Purchase',\n                                         ,'SE8')   --'Unique Transactions',\n      GROUP BY 1\n      ),\n   promo_results AS (\n      SELECT pa.prn\n           , pa.account_id\n           , pa.asp_inception_date\n           , pa.user_id\n           , sum(1) OVER (PARTITION BY pa.user_id) AS user_row_count\n           , sum(1) OVER (PARTITION BY pa.account_id) AS account_row_count\n           , nvl(ast.has_funded,FALSE) AS funded\n           , nvl(ast.has_od,FALSE) AS overdraft\n           , nvl(ac.count_credit,0) AS prior_credits\n           , ad.count_trans AS count_trans\n           , trunc(ad.sum_trans,4) AS sum_trans\n           , trunc(least(case when count_trans >= 10 and sum_trans >= 50 then sum_trans*0.1 end,50),2) AS cashback\n      FROM promo_accounts pa\n      LEFT JOIN accounts_standing ast ON ast.account_id = pa.account_id\n      LEFT JOIN accounts_credited ac ON ac.account_id = pa.account_id\n      LEFT JOIN accounts_debits ad ON ad.account_id = pa.account_id\n      WHERE cashback > 0\n      )\nSELECT row_number() over (order by 1)     \t\t\t\t\t::VARCHAR AS record_number\n     , pr.prn\t\t\t\t\t\t\t \t\t\t\t\t::VARCHAR AS account_identifier\n     , trunc(pr.cashback * -1,2)           \t\t\t\t\t::VARCHAR AS transaction_amount\n     , 'LD_${run_history_id}-' || lpad(record_number,5,'0')\t::VARCHAR AS transaction_identifier\nFROM promo_results pr;\n\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958133":{"id":2958133,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-560,"y":-96,"width":32,"height":32,"inputConnectorIDs":[2958108],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Winback"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--Aspiration Summer 2019 Promotion\nDROP TABLE IF EXISTS public.ucj_batch_promo;\nCREATE TABLE public.ucj_batch_promo AS\nWITH\n   participants AS (\n      SELECT DISTINCT\n             ue.user_id\n      FROM public.ucj_adhoc_winback wb\n      LEFT JOIN web_db.user_email ue ON regexp_replace(lower(ue.email),'\\\\+[^@]*@','@') = regexp_replace(lower(wb.\"EMAIL ADDRESS\"),'\\\\+[^@]*@','@')\n      WHERE ue.user_id is not null\n      ),\n   promo_accounts AS (\n      SELECT *\n      FROM (\n         SELECT upay.account_number AS prn\n              , uapp.user_id\n              , uapp.account_id\n              , least(nvl(d.account_approved_time,current_date),nvl(d.inception_date,current_date),nvl(a.inception_date,current_date))::DATE AS asp_inception_date\n              , least(d.account_approved_time,current_date,d.inception_date,current_date,a.inception_date,current_date)::DATE AS pre_inception_date\n              , row_number() OVER (PARTITION BY uapp.account_id ORDER BY nvl(a.inception_date,current_date) ASC NULLS LAST, uapp.product_id ASC NULLS LAST) AS rownum\n         FROM participants usr\n         JOIN web_db.user_product_application uapp ON uapp.USER_ID = usr.USER_ID\n         JOIN web_db.account a ON a.id = uapp.account_id AND a.termination_date IS NULL AND nvl(a.is_admin_disabled,'false') <> 'true'\n         JOIN web_db.depository d ON d.account_id = a.id AND d.product_id = uapp.product_id\n         JOIN web_db.user_payment_account upay ON d.id = upay.depository_id AND upay.user_id = uapp.user_id AND nvl(upay.is_admin_disabled,'false') <> 'true' AND nvl(upay.is_deleted,'false') <> 'true'\n         WHERE asp_inception_date::DATE >= '2019-06-20' AND asp_inception_date::DATE < '2019-09-15'\n         )\n      WHERE rownum = 1\n      ),\n   balance_records AS (\n      SELECT gbal.file_date\n           , asp_gal.account_id\n           , decode(gbal.type_of_account,8,'Savings',6,'Checking') depository_type\n           , sum(concat(trim(gbal.current_balance_sign),trim(gbal.current_balance))::DEC(18,2)) AS balance\n      FROM (\n         SELECT DISTINCT uapp.account_id, aog.galileo_account_number\n         FROM promo_accounts pa\n         JOIN web_db.user_product_application uapp ON uapp.account_id = pa.account_id\n         JOIN aog_db.galileo_accounts aog ON uapp.id = aog.aspiration_application_id AND uapp.user_id = aog.aspiration_user_id\n         ) asp_gal\n      JOIN rdl.raw_galileo_customer_master_data gbal ON asp_gal.galileo_account_number = gbal.galileo_account_id\n      GROUP BY gbal.file_date\n             , asp_gal.account_id\n             , gbal.type_of_account\n      ),\n   records_start AS (\n      SELECT min(file_date) AS start_date\n      FROM balance_records\n      ),\n   numbers AS (\n      SELECT 0 AS number\n      UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4\n      UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8\n      UNION ALL SELECT 9\n      ),\n   records_dates AS (\n      SELECT (n1.number::VARCHAR || n2.number::VARCHAR || n3.number::VARCHAR)::BIGINT AS num\n           , concat(to_char(('2019-01-01'::DATE + num),'YYYY-MM'),'-01')::DATE AS month\n           , to_char(('2019-01-01'::DATE + num),'YYYY-MM-DD')::DATE AS date\n      FROM numbers n1\n      CROSS JOIN numbers n2\n      CROSS JOIN numbers n3\n      CROSS JOIN records_start rs\n      WHERE date <= current_date\n        AND date >= rs.start_date\n      ),\n   daily_balance AS (\n      SELECT rd.month\n           , rd.date\n           , pa.account_id\n           , last_value(spend.balance IGNORE NULLS) OVER (PARTITION BY pa.account_id ORDER BY rd.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS balance_spend\n           , last_value(save.balance IGNORE NULLS) OVER (PARTITION BY pa.account_id ORDER BY rd.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS balance_save\n           , nvl(balance_spend,0)+nvl(balance_save,0) AS balance_combined\n      FROM records_dates rd\n      CROSS JOIN promo_accounts pa\n      LEFT JOIN balance_records spend ON spend.file_date = rd.date AND spend.account_id = pa.account_id AND spend.depository_type = 'Checking'\n      LEFT JOIN balance_records save ON save.file_date = rd.date AND save.account_id = pa.account_id AND save.depository_type = 'Savings'\n      ),\n   accounts_standing AS (\n      SELECT account_id\n           , min(balance_spend) < 0   OR min(balance_save) < 0   AS has_od\n           , max(balance_spend) >= 10 OR max(balance_save) >= 10 AS has_funded\n      FROM daily_balance\n      GROUP BY account_id\n      ),\n   accounts_septbal AS (\n      SELECT account_id\n           , max(decode(date::DATE,'2020-10-01'::DATE,balance_combined)) AS balance_sept30\n           , min(balance_combined) AS balance_low\n           , least(trunc(nvl(balance_low,0)/20000)*20000,300000) AS balance_level\n           , least(trunc(nvl(balance_low,0)/20000)*20000,300000)/200 AS payout\n      FROM daily_balance\n      WHERE date::DATE >= '2019-10-01'::DATE\n        AND date::DATE <= '2020-10-01'::DATE\n      GROUP BY account_id\n      ),\n   accounts_credited AS (\n      SELECT pa.account_id\n           , sum(post.amount) AS total_credit\n           , count(DISTINCT post.id) AS count_credit\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      WHERE (post.description = 'Aspiration Summer 2019 Promotion' OR gpt.transaction_description = 'Aspiration Summer 2019 Promotion')\n      GROUP BY 1\n      ),\n   promo_results AS (\n      SELECT pa.prn\n           , pa.account_id\n           , pa.asp_inception_date\n           , pa.user_id\n           , sum(1) OVER (PARTITION BY pa.user_id) AS user_row_count\n           , sum(1) OVER (PARTITION BY pa.account_id) AS account_row_count\n           , nvl(ast.has_funded,FALSE) AS funded\n           , nvl(ast.has_od,FALSE) AS overdraft\n           , nvl(ac.count_credit,0) AS prior_credits\n           , sp.balance_sept30\n           , sp.balance_low\n           , sp.balance_level\n           , sp.payout\n      FROM promo_accounts pa\n      LEFT JOIN accounts_standing ast ON ast.account_id = pa.account_id\n      LEFT JOIN accounts_credited ac ON ac.account_id = pa.account_id\n      LEFT JOIN accounts_septbal sp ON sp.account_id = pa.account_id\n      WHERE sp.payout > 0 AND pa.pre_inception_date is null\n      )\nSELECT row_number() over (order by 1)     \t\t\t\t\t::VARCHAR AS record_number\n     , pr.prn\t\t\t\t\t\t\t \t\t\t\t\t::VARCHAR AS account_identifier\n     , trunc(pr.payout * -1,2)             \t\t\t\t\t::VARCHAR AS transaction_amount\n     , 'WB_${run_history_id}-' || lpad(record_number,5,'0')\t::VARCHAR AS transaction_identifier\nFROM promo_results pr;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958134":{"id":2958134,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-591,"y":-27,"width":32,"height":32,"inputConnectorIDs":[2958103],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Sweatcoin"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--Aspiration Promotional - Sweatcoin\nDROP TABLE IF EXISTS public.ucj_batch_promo;\nCREATE TABLE public.ucj_batch_promo AS\nWITH\n   account_incepted AS (\n      SELECT *\n      FROM (\n         SELECT upay.account_number AS prn\n              , uapp.user_id\n              , uapp.account_id\n              , least(coalesce(dep.account_approved_time,current_date),coalesce(dep.inception_date,current_date),coalesce(acc.inception_date,current_date))::DATE AS asp_inception_date\n              , row_number() OVER (PARTITION BY uapp.account_id ORDER BY coalesce(acc.inception_date,current_date) ASC NULLS LAST, uapp.product_id ASC NULLS LAST) AS rownum\n         FROM web_db.user_product_application uapp\n         JOIN web_db.account acc ON acc.id = uapp.account_id AND acc.termination_date IS NULL AND coalesce(acc.is_admin_disabled,'false') <> 'true'\n         JOIN web_db.depository dep ON dep.account_id = acc.id AND dep.product_id = uapp.product_id\n         JOIN web_db.user_payment_account upay ON dep.id = upay.depository_id AND upay.user_id = uapp.user_id AND coalesce(upay.is_admin_disabled,'false') <> 'true' AND coalesce(upay.is_deleted,'false') <> 'true'\n         JOIN web_db.fc_person_response usr_rsp ON usr_rsp.user_id = uapp.user_id\n         JOIN web_db.wait_list_user usr_lst ON usr_lst.id = usr_rsp.wait_list_user_id\n         WHERE least(coalesce(dep.account_approved_time,current_date),coalesce(dep.inception_date,current_date),coalesce(acc.inception_date,current_date))::DATE BETWEEN '2020-10-08' AND '2020-11-01'\n           AND usr_lst.utm_source = 'sweatcoin'\n         ) subq\n      WHERE rownum = 1\n      ),\n   account_balance AS (\n      SELECT gbal.balance_date\n           , usr_acc.account_id\n           , CASE dep.product_id WHEN 5 THEN 'Savings' WHEN 4 THEN 'Checking' END AS depository_type\n           , min(case when sum(gbal.current_balance) <> 0 then gbal.balance_date end) over (partition by usr_acc.account_id) AS first_balance\n           , min(case when sum(gbal.current_balance) >= 100 then gbal.balance_date end) over (partition by usr_acc.account_id) AS first_balance_qualified\n           , sum(gbal.current_balance) AS balance\n           , sum(sum(gbal.current_balance)) over (partition by gbal.balance_date,usr_acc.account_id) AS combined_balance\n      FROM account_incepted usr_acc\n      JOIN web_db.user_product_application uapp ON uapp.account_id = usr_acc.account_id\n      JOIN web_db.depository dep ON dep.account_id = uapp.account_id AND dep.product_id = uapp.product_id\n      JOIN web_db.depository_balance gbal ON dep.id = gbal.depository_id\n      WHERE dep.product_id IN (4,5)\n      GROUP BY gbal.balance_date\n             , usr_acc.account_id\n             , depository_type\n      ),\n   balance_period AS (\n      SELECT account_id\n           , case when first_balance_qualified - first_balance <= 7 then first_balance_qualified else first_balance end AS period_start\n           , case when first_balance_qualified - first_balance <= 7 then first_balance_qualified else first_balance end+30 AS period_end\n           , min(combined_balance) AS min_balance\n      FROM account_balance\n      WHERE balance_date BETWEEN period_start AND period_end\n      GROUP BY account_id\n             , period_start\n             , period_end\n      ),\n   account_standing AS (\n      SELECT account_id\n           , min(CASE WHEN depository_type = 'Checking' AND balance >= 10 THEN balance_date END) AS spend_fund_date\n           , min(CASE WHEN depository_type = 'Savings' AND balance >= 10 THEN balance_date END) AS save_fund_date\n           , max(CASE WHEN depository_type = 'Checking' AND balance < 0 THEN balance_date END) AS last_spend_overdraft\n           , max(CASE WHEN depository_type = 'Savings' AND balance < 0 THEN balance_date END) AS last_save_overdraft\n      FROM account_balance\n      GROUP BY account_id\n      ),\n   promo_results AS (\n      SELECT pa.prn\n           , pa.account_id\n           , pa.asp_inception_date\n           , pa.user_id\n           , sum(1) OVER (PARTITION BY pa.user_id) AS user_row_count\n           , sum(1) OVER (PARTITION BY pa.account_id) AS account_row_count\n           , nvl(ast.spend_fund_date,ast.save_fund_date) IS NOT NULL AS funded\n           , nvl(ast.last_spend_overdraft,ast.last_save_overdraft) IS NOT NULL AS overdraft\n           --, nvl(ac.count_credit,0) AS prior_credits\n           , bal_per.period_start\n           , bal_per.period_end\n           , bal_per.min_balance\n           , case when bal_per.min_balance >= 100 AND NOT overdraft AND funded THEN true END AS qualified\n      FROM account_incepted pa\n      LEFT JOIN account_standing ast ON ast.account_id = pa.account_id\n      --LEFT JOIN accounts_credited ac ON ac.account_id = pa.account_id\n      LEFT JOIN balance_period bal_per ON bal_per.account_id = pa.account_id\n      WHERE qualified\n      )\nSELECT row_number() over (order by 1)     \t\t\t\t\t::VARCHAR AS record_number\n     , pr.prn\t\t\t\t\t\t\t \t\t\t\t\t::VARCHAR AS account_identifier\n     , trunc(10 * -1,2)                  \t\t\t\t\t::VARCHAR AS transaction_amount\n     , 'SC_${run_history_id}-' || lpad(record_number,5,'0')\t::VARCHAR AS transaction_identifier\nFROM promo_results pr;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958135":{"id":2958135,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-592,"y":32,"width":32,"height":32,"inputConnectorIDs":[2958107],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"APlus"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--Aspiration Plus Fee Rebate - Promotion\nDROP TABLE IF EXISTS public.ucj_batch_promo;\nCREATE TABLE public.ucj_batch_promo AS\nWITH\n   participants AS (\n      SELECT DISTINCT\n             usr.id AS user_id\n      FROM public.ucj_adhoc_aplus ah\n      LEFT JOIN web_db._user usr ON usr.uuid = ah.uuid\n      --WHERE ue.user_id is not null\n      ),\n   promo_accounts AS (\n      SELECT *\n      FROM (\n         SELECT upay.account_number AS prn\n              , uapp.user_id\n              , uapp.account_id\n              , least(nvl(d.account_approved_time,current_date),nvl(d.inception_date,current_date),nvl(a.inception_date,current_date))::DATE AS asp_inception_date\n              , row_number() OVER (PARTITION BY uapp.account_id ORDER BY nvl(a.inception_date,current_date) ASC NULLS LAST, uapp.product_id ASC NULLS LAST) AS rownum\n         FROM participants usr\n         LEFT JOIN web_db.user_product_application uapp ON uapp.user_id = usr.user_id\n         LEFT JOIN web_db.account a ON a.id = uapp.account_id AND a.termination_date IS NULL AND nvl(a.is_admin_disabled,'false') <> 'true'\n         LEFT JOIN web_db.depository d ON d.account_id = a.id AND d.product_id = uapp.product_id\n         LEFT JOIN web_db.user_payment_account upay ON d.id = upay.depository_id AND upay.user_id = uapp.user_id AND nvl(upay.is_admin_disabled,'false') <> 'true' AND nvl(upay.is_deleted,'false') <> 'true'\n         --WHERE asp_inception_date::DATE >= '2019-06-20' AND asp_inception_date::DATE < '2019-09-15'\n         )\n      WHERE rownum = 1\n      ),\n   subscribe_accounts AS (\n         SELECT usr.user_id\n              , usr.account_id\n              , usr.prn\n              , sub.subscription_id\n              , sub.plan_id\n              , sub.billing_cycle_anchor\n              , sub.created_at AS subscribe_date\n              , sub_inv.invoice_id\n              , sub_inv.plan_id AS plan_invoice\n              , sub_inv.amount_due\n              , sub_inv.billing_reason\n              , sub_inv.period_start\n              , sub_inv.period_end\n              , sub_inv.created_at AS invoice_date\n              , row_number() over (partition by usr.account_id order by sub_inv.period_start asc) AS invoice_number\n         FROM promo_accounts usr\n         LEFT JOIN web_db.subscription sub ON sub.account_id = usr.account_id\n         LEFT JOIN web_db.subscription pre_sub ON pre_sub.account_id = usr.account_id AND pre_sub.created_at::date < '2020-10-31' AND pre_sub.status = 'active'\n         LEFT JOIN web_db.subscription_invoice sub_inv ON sub_inv.subscription_id = sub.subscription_id\n         WHERE sub.created_at::date >= '2020-10-31' AND sub.created_at::date < '2020-11-08'\n           AND pre_sub.subscription_id is null\n           AND sub_inv.status = 'paid'\n      ),\n   balance_records AS (\n      SELECT gbal.file_date\n           , asp_gal.account_id\n           , decode(gbal.type_of_account,8,'Savings',6,'Checking') depository_type\n           , sum(concat(trim(gbal.current_balance_sign),trim(gbal.current_balance))::DEC(18,2)) AS balance\n      FROM (\n         SELECT DISTINCT uapp.account_id, aog.galileo_account_number\n         FROM promo_accounts pa\n         JOIN web_db.user_product_application uapp ON uapp.account_id = pa.account_id\n         JOIN aog_db.galileo_accounts aog ON uapp.id = aog.aspiration_application_id AND uapp.user_id = aog.aspiration_user_id\n         ) asp_gal\n      JOIN rdl.raw_galileo_customer_master_data gbal ON asp_gal.galileo_account_number = gbal.galileo_account_id\n      GROUP BY gbal.file_date\n             , asp_gal.account_id\n             , gbal.type_of_account\n      ),\n   accounts_start AS (\n      SELECT account_id\n           , min(file_date)-1 AS start_date\n      FROM balance_records\n      GROUP BY account_id\n      ),\n   numbers AS (\n      SELECT 0 AS number\n      UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4\n      UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8\n      UNION ALL SELECT 9\n      ),\n   records_dates AS (\n      SELECT rs.account_id\n           , (n1.number::VARCHAR || n2.number::VARCHAR || n3.number::VARCHAR)::BIGINT AS num\n           , concat(to_char(('2019-01-01'::DATE + num),'YYYY-MM'),'-01')::DATE AS month\n           , to_char(('2019-01-01'::DATE + num),'YYYY-MM-DD')::DATE AS date\n      FROM numbers n1\n      CROSS JOIN numbers n2\n      CROSS JOIN numbers n3\n      CROSS JOIN accounts_start rs\n      WHERE date <= current_date+1\n        AND date >= rs.start_date\n      ),\n   daily_balance AS (\n      SELECT rd.month\n           , rd.date\n           , rd.account_id\n           , nvl(last_value(spend.balance IGNORE NULLS) OVER (PARTITION BY rd.account_id ORDER BY rd.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),0) AS balance_spend\n           , nvl(last_value(save.balance IGNORE NULLS) OVER (PARTITION BY rd.account_id ORDER BY rd.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),0) AS balance_save\n           , nvl(balance_spend,0)+nvl(balance_save,0) AS balance_combined\n      FROM records_dates rd\n      LEFT JOIN balance_records spend ON spend.file_date = rd.date AND spend.account_id = rd.account_id AND spend.depository_type = 'Checking'\n      LEFT JOIN balance_records save ON save.file_date = rd.date AND save.account_id = rd.account_id AND save.depository_type = 'Savings'\n      ),\n   accounts_standing AS (\n      SELECT account_id\n           , min(balance_spend) < 0   OR min(balance_save) < 0   AS has_od\n           , max(balance_spend) >= 10 OR max(balance_save) >= 10 AS has_funded\n      FROM daily_balance\n      GROUP BY account_id\n      ),\n   accounts_credited AS (\n      SELECT pa.account_id\n           , sum(post.amount) AS total_credit\n           , count(DISTINCT post.id) AS count_credit\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      WHERE (post.description = 'Aspiration Plus Fee Rebate - Promotion' OR gpt.transaction_description = 'Aspiration Plus Fee Rebate - Promotion')\n      GROUP BY 1\n      ),\n   accounts_cards AS (\n      SELECT DISTINCT cards.prn\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      JOIN rdl.raw_galileo_account_card_data cards ON gpt.prn = cards.prn\n      WHERE cards.type_of_card IN (2,25,3) --includes virtual\n      ),\n   accounts_debits AS (\n      SELECT pa.account_id\n           , count(1) AS count_trans\n           , sum(case when post.transaction_date >= '2020-09-04'::DATE AND post.transaction_date < '2020-09-08'::DATE then post.amount end)*-1 AS sum_trans\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      JOIN accounts_cards cards ON gpt.prn = cards.prn\n      WHERE post.transaction_date >= '2020-09-04'::DATE\n        AND post.transaction_date < '2020-10-01'::DATE\n        AND gpt.transaction_code_type IN ('ADdh'   --'Debit Chargeback',\n                                         ,'ADdj'   --'Debit 2nd Presentment',\n                                         ,'ISA'    --'Purchase with PIN',\n                                         ,'ISC'    --'Pre-auth completion',\n                                         ,'ISL'    --'Auth',\n                                         ,'SDA'    --'Purchase with PIN',\n                                         ,'SDC'    --'Pre-auth completion',\n                                         ,'SDL'    --'Retail Sale',\n                                         ,'SE5'    --'Purchase',\n                                         ,'SE8')   --'Unique Transactions',\n      GROUP BY 1\n      ),\n   promo_results AS (\n      SELECT pa.prn\n           , pa.account_id\n           , pa.user_id\n           , sum(1) OVER (PARTITION BY pa.user_id) AS user_row_count\n           , sum(1) OVER (PARTITION BY pa.account_id) AS account_row_count\n           , nvl(ast.has_funded,FALSE) AS funded\n           , nvl(ast.has_od,FALSE) AS overdraft\n           , nvl(ac.count_credit,0) AS prior_credits\n           , trunc(nvl(ac.total_credit,0),2) AS prior_amount\n           , trunc(greatest(case when pa.plan_invoice like '%yearly%' then greatest(17.25 - prior_amount,0) else least(21.0 - prior_amount, 7.0) end,0),2) AS credit_amount\n      FROM subscribe_accounts pa\n      LEFT JOIN accounts_standing ast ON ast.account_id = pa.account_id\n      LEFT JOIN accounts_credited ac ON ac.account_id = pa.account_id\n      WHERE pa.invoice_number > prior_credits\n        AND credit_amount > 0\n\n      )\nSELECT row_number() over (order by 1)  \t\t\t\t\t\t::VARCHAR AS record_number\n     , pr.prn\t\t\t\t\t\t   \t\t\t\t\t\t::VARCHAR AS account_identifier\n     , trunc(pr.credit_amount * -1,2)  \t\t\t\t\t\t::VARCHAR AS transaction_amount\n     , 'AP_${run_history_id}-'||lpad(record_number,5,'0')\t::VARCHAR AS transaction_identifier\nFROM promo_results pr\nUNION ALL\nSELECT 11                                  \t\t\t\t\t::VARCHAR AS record_number\n     , '223108036318'\t\t\t\t\t \t\t\t\t\t::VARCHAR AS account_identifier\n     , '-7.00'                                 \t\t\t\t::VARCHAR AS transaction_amount\n     , 'AP_${run_history_id}-' || lpad(record_number,5,'0')\t::VARCHAR AS transaction_identifier\nUNION ALL\nSELECT 12                                  \t\t\t\t\t::VARCHAR AS record_number\n     , '223108010875'\t\t\t\t\t \t\t\t\t\t::VARCHAR AS account_identifier\n     , '-7.00'                                 \t\t\t\t::VARCHAR AS transaction_amount\n     , 'AP_${run_history_id}-' || lpad(record_number,5,'0')\t::VARCHAR AS transaction_identifier\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958136":{"id":2958136,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-432,"y":-96,"width":32,"height":32,"inputConnectorIDs":[2958101],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Haven"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/* transaction_type = 'A'  transaction_subtype = 'PA'   'Promotion - Term Life Insurance Quote' */\nDROP TABLE IF EXISTS ${staging_schema}.${staging_table};\nCREATE TABLE ${staging_schema}.${staging_table} AS\nWITH\n         haven_users AS (\n            SELECT DISTINCT\n                   ha._id AS opportunity_id\n                 , ha.accountcreatedate AS haven_created_date\n                 , ha.email AS email\n                 , nvl(u.id,ue.user_id) AS user_id\n            FROM rdl.havenlife_activity ha\n            LEFT JOIN web_db._user u ON u.uuid = ha.referralid\n            LEFT JOIN web_db.user_email ue ON regexp_replace(lower(ue.email),'\\\\+[^@]*@','@') = regexp_replace(lower(ha.email),'\\\\+[^@]*@','@')\n            ),\n         haven_states AS (\n            SELECT DISTINCT\n                   hd.user_id\n                 , first_value(hd.haven_created_date) over (partition by hd.user_id order by hd.haven_created_date asc nulls last rows unbounded preceding) AS haven_created_date\n                 , (ad.state_id NOT IN (2,4,54,13,15,19,29,32,34,41,47,31,28) AND ad.state_id IS NOT NULL) AS isvalid_state\n            FROM haven_users hd\n            LEFT JOIN web_db.user_profile up ON up.user_id = hd.user_id\n            LEFT JOIN web_db.address ad ON up.address_id = ad.id\n            WHERE isvalid_state\n            ),\n         haven_credits AS (\n            SELECT DISTINCT\n                   uacc.user_id\n                 , credits.account_id\n                 , credits.total_credit\n                 , credits.count_credit\n            FROM (\n               SELECT d.account_id\n                    , sum(post.amount) AS total_credit\n                    , count(distinct post.id) AS count_credit\n               FROM web_db.galileo_posted_transaction gpt\n               JOIN web_db.posted_transaction post ON gpt.posted_transaction_id = post.id\n               JOIN web_db.depository d ON d.id = post.depository_id\n               WHERE gpt.transaction_description IN ('Aspiration Promotional Credit','Promotion - Term Life Insurance Quote','June 26 Duplicate Credit Reversal')\n                 AND gpt.transaction_amount = '10.00'\n                 AND ( gpt.rdf_date  IN ('2020-05-21', '2020-06-27', '2020-07-01', '2020-07-11', '2020-08-28'))\n                 AND gpt.transaction_code_type = 'ADPA'\n               GROUP BY 1\n               ) credits\n            JOIN web_db.user_account uacc ON uacc.account_id = credits.account_id\n            ),\n         haven_accounts AS (\n            SELECT *\n            FROM (\n               SELECT hs.user_id\n                    , upay.account_number AS prn\n                    , uapp.account_id\n                    , hs.haven_created_date::DATE AS haven_created_date\n                    , least(d.account_approved_time,d.inception_date,a.inception_date)::DATE AS asp_created_date\n                    , asp_created_date <= (hs.haven_created_date::DATE + 14) AS isbefore_haven\n                    , row_number()\n                      OVER (PARTITION BY hs.user_id ORDER BY a.inception_date ASC NULLS LAST, uapp.product_id ASC NULLS LAST) AS rownum\n               FROM haven_states hs\n               JOIN web_db.user_product_application uapp ON uapp.user_id = hs.user_id\n               JOIN web_db.account a ON a.id = uapp.account_id AND a.termination_date IS NULL AND nvl(a.is_admin_disabled,'false') <> 'true'\n               JOIN web_db.depository d ON d.account_id = a.id AND d.product_id = uapp.product_id\n               JOIN web_db.user_payment_account upay ON d.id = upay.depository_id AND upay.user_id = hs.user_id AND nvl(upay.is_admin_disabled,'false') <> 'true' AND nvl(upay.is_deleted,'false') <> 'true'\n               )\n            WHERE rownum = 1\n            ),\n         haven_results AS (\n           SELECT *\n           FROM (\n              SELECT *\n                   , sum(decode(isbefore_haven, true, 10)) over (partition by account_id order by haven_created_date rows between current row and unbounded following) AS credit_running\n                   , case when credit_running <= due_credit and isbefore_haven then 10 else 0 end AS credit_amount\n              FROM (\n                 SELECT hs.user_id\n                      , hs.isvalid_state\n                      , hs.haven_created_date\n                      , ha.asp_created_date\n                      , ha.isbefore_haven\n                      , ha.prn\n                      , ha.account_id\n                      , trunc(nvl(hc.total_credit,0),2) AS prior_credit\n                      , nvl(hc.count_credit,0) AS prior_transactions\n                      , sum(decode(ha.isbefore_haven, true, 1)) OVER (PARTITION BY ha.account_id) AS qualified_users\n                      , trunc(qualified_users * 10,2) - prior_credit AS due_credit\n                 FROM haven_states hs\n                 LEFT JOIN haven_accounts ha ON ha.user_id = hs.user_id\n                 LEFT JOIN haven_credits hc ON hc.user_id = ha.user_id AND hc.account_id = ha.account_id\n                 WHERE ( hs.haven_created_date  < (CONVERT_TIMEZONE('America/Los_Angeles', 'UTC', CAST(TO_TIMESTAMP('2020-09-01') AS TIMESTAMP_NTZ))))\n                 )\n             )\n         WHERE credit_amount > 0\n         )\n     SELECT '${run_history_id}'\t\t\t\t      ::VARCHAR \t AS etl_run_history_id\n          , lpad(3::VARCHAR,2,'0') \t\t\t\t  ::VARCHAR \t AS etl_batch_number\n          , row_number() over()     \t\t\t  ::BIGINT  \t AS etl_rownum\n          , hr.prn\t\t\t\t\t\t\t\t  ::VARCHAR \t AS account_identifier\n          , -10               \t  \t\t\t\t  ::DECIMAL(8,4) AS transaction_amount\n          , 'HL_'||'${run_history_id}'||'-'||\n            etl_batch_number::VARCHAR||\n            '-'||\n            lpad(etl_rownum::VARCHAR,5,'0')    \t  ::VARCHAR \t AS transaction_identifier\n     FROM haven_results hr;\nALTER TABLE ${staging_schema}.${staging_table}\n   OWNER TO svc_etl;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958137":{"id":2958137,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-496,"y":-112,"width":32,"height":32,"inputConnectorIDs":[2958104],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"AccOpen"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--Promotion - Account Opening\nDROP TABLE IF EXISTS ${staging_schema}.${staging_table};\nCREATE TABLE ${staging_schema}.${staging_table} AS\nWITH\n   promo_users AS (\n      SELECT DISTINCT\n             ue.user_id\n      FROM ucj.july_flash_list jfl\n      LEFT JOIN web_db.user_email ue ON regexp_replace(lower(ue.email),'\\\\+[^@]*@','@') = regexp_replace(lower(jfl.email),'\\\\+[^@]*@','@')\n      WHERE ue.user_id is not null\n      ),\n   promo_accounts AS (\n      SELECT *\n      FROM (\n         SELECT upay.account_number AS prn\n              , uapp.user_id\n              , uapp.account_id\n              , least(d.account_approved_time,d.inception_date,a.inception_date)::DATE AS asp_inception_date\n              , row_number()\n                OVER (PARTITION BY uapp.account_id ORDER BY a.inception_date ASC NULLS LAST, uapp.product_id ASC NULLS LAST) AS rownum\n         FROM promo_users pu\n         JOIN web_db.user_product_application uapp ON uapp.user_id = pu.user_id\n         JOIN web_db.account a ON a.id = uapp.account_id AND a.termination_date IS NULL AND nvl(a.is_admin_disabled,'false') <> 'true'\n         JOIN web_db.depository d ON d.account_id = a.id AND d.product_id = uapp.product_id\n         JOIN web_db.user_payment_account upay ON d.id = upay.depository_id\n                                              AND upay.user_id = uapp.user_id\n                                              AND nvl(upay.is_admin_disabled,'false') <> 'true'\n                                              AND nvl(upay.is_deleted,'false') <> 'true'\n         WHERE ((( asp_inception_date::date ) >= (CONVERT_TIMEZONE('America/Los_Angeles', 'UTC', TIMESTAMP '2020-07-22')) AND ( asp_inception_date::date ) < (CONVERT_TIMEZONE('America/Los_Angeles', 'UTC', TIMESTAMP '2020-07-26'))))\n         )\n      WHERE rownum = 1\n      ),\n   balance_records AS (\n      SELECT gbal.file_date\n           , asp_gal.account_id\n           , decode(gbal.type_of_account,8,'Savings',6,'Checking') depository_type\n           , sum(concat(gbal.current_balance_sign,gbal.current_balance)::DEC(18,2)) AS balance\n      FROM (\n         SELECT DISTINCT uapp.account_id, aog.galileo_account_number\n         FROM promo_accounts pa\n         JOIN web_db.user_product_application uapp ON uapp.account_id = pa.account_id\n         JOIN aog_db.galileo_accounts aog ON uapp.id = aog.aspiration_application_id AND uapp.user_id = aog.aspiration_user_id\n         ) asp_gal\n      JOIN rdl.raw_galileo_customer_master_data gbal ON asp_gal.galileo_account_number = gbal.galileo_account_id\n      GROUP BY gbal.file_date\n             , asp_gal.account_id\n             , gbal.type_of_account\n      ),\n   records_start AS (\n      SELECT min(file_date) AS start_date\n      FROM balance_records\n      ),\n   numbers AS (\n      SELECT 0 AS number\n      UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3\n      UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6\n      UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9\n      ),\n   records_dates AS (\n      SELECT (n1.number::VARCHAR || n2.number::VARCHAR || n3.number::VARCHAR)::BIGINT AS num\n           , concat(to_char(('2019-01-01'::DATE + num),'YYYY-MM'),'-01')::DATE AS month\n           , to_char(('2019-01-01'::DATE + num),'YYYY-MM-DD')::DATE AS date\n      FROM numbers n1 CROSS JOIN numbers n2 CROSS JOIN numbers n3\n      CROSS JOIN records_start rs\n      WHERE date <= sysdate\n        AND date >= rs.start_date\n      ),\n   daily_balance AS (\n      SELECT rd.month\n           , rd.date\n           , pa.account_id\n           , bal.depository_type\n           , last_value(bal.balance IGNORE NULLS)\n             OVER (PARTITION BY bal.account_id, bal.depository_type ORDER BY rd.date ASC ROWS UNBOUNDED PRECEDING) AS balance\n      FROM records_dates rd\n      CROSS JOIN promo_accounts pa\n      LEFT JOIN balance_records bal ON bal.file_date = rd.date AND bal.account_id = pa.account_id\n      ),\n   accounts_standing AS (\n      SELECT account_id\n           , min(balance) < 0 AS has_od\n           , max(balance) >= 10 AS has_funded\n      FROM daily_balance\n      GROUP BY account_id\n      ),\n   promo_results AS (\n       SELECT pa.prn\n            , pa.account_id\n            , pa.asp_inception_date\n            , pa.user_id\n            , sum(1) over (partition by pa.user_id) AS user_row_count\n            , sum(1) over (partition by pa.account_id) AS account_row_count\n            , nvl(ast.has_funded,false) AS funded\n            , nvl(ast.has_od,false) AS overdraft\n            , case when overdraft = false and funded = true then true else false end AS qualified\n       FROM promo_accounts pa\n       LEFT JOIN accounts_standing ast ON ast.account_id = pa.account_id\n       WHERE qualified\n   )\nSELECT '${run_history_id}'\t\t\t ::VARCHAR \t    AS etl_run_history_id\n, lpad(3::VARCHAR,2,'0') \t\t\t ::VARCHAR \t    AS etl_batch_number\n, row_number() over()     \t\t\t ::BIGINT  \t    AS etl_rownum\n, pr.prn\t\t\t\t\t\t\t ::VARCHAR \t    AS account_identifier\n, -25               \t  \t\t\t ::DECIMAL(8,4) AS transaction_amount\n, 'FL_'||'${run_history_id}'||'-'||\n etl_batch_number::VARCHAR||\n '-'||\n lpad(etl_rownum::VARCHAR,5,'0')     ::VARCHAR \t\tAS transaction_identifier\nFROM promo_results pr;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958138":{"id":2958138,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-80,"y":0,"width":32,"height":32,"inputConnectorIDs":[2958130],"outputSuccessConnectorIDs":[2958129],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"output"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"copy into '@PUBLIC.ETL/file_processing/galileo_batch_transactions/batch_files/btrans_584_20201209_229.txt'\nfrom (\n  select COL_01\n\t   , COL_02\n\t   , COL_03\n\t   , COL_04\n\t   , COL_05\n\t   , COL_06\n\t   , COL_07\n\t   , COL_08\n\t   , COL_09\n\t   , COL_10\n\t   , COL_11\n  from public.ucj_batch_file\n  order by ROWNUM ASC\n  )\n\tfile_format=(\n      type=csv\n      compression=none\n      field_delimiter=none\n    )\n    single=true\n    ;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958139":{"id":2958139,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-160,"y":0,"width":32,"height":32,"inputConnectorIDs":[2958128],"outputSuccessConnectorIDs":[2958130],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"batch"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DROP TABLE IF EXISTS public.ucj_batch_file;\nCREATE TABLE public.ucj_batch_file (\n   ROWNUM\tBIGINT,\n   COL_01   VARCHAR(256),\n   COL_02   VARCHAR(256),\n   COL_03   VARCHAR(256),\n   COL_04   VARCHAR(256),\n   COL_05   VARCHAR(256),\n   COL_06   VARCHAR(256),\n   COL_07   VARCHAR(256),\n   COL_08   VARCHAR(256),\n   COL_09   VARCHAR(256),\n   COL_10   VARCHAR(256),\n   COL_11   VARCHAR(256)\n   );\nINSERT INTO public.ucj_batch_file (\n   SELECT 0\n\t\t, rpad('H'\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, 1  )\n\t\t, rpad('HEADER'\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, 6  )\n\t\t, rpad('454'\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, 10 )\n\t\t, rpad('584'\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, 10 )\n\t\t, rpad('btrans_584_'||to_char(dateadd(hour,-7,current_timestamp()),'YYYYMMDD')||'_228.txt.gpg'\t, 50 )\n\t\t, rpad(to_char(dateadd(hour,-7,current_timestamp()), 'MMDDYYYY')\t\t\t\t\t\t\t\t\t\t\t, 8  )\n\t\t, '', '', '', '', ''\n   );\nINSERT INTO public.ucj_batch_file (\n   SELECT record_number::bigint\n\t\t, record_type\n\t\t, record_number\n\t\t, account_id_type\n\t\t, account_identifier\n\t\t, location_id\n\t\t, location_type\n\t\t, transaction_type\n\t\t, transaction_sub_type\n\t\t, transaction_amount\n\t\t, transaction_description\n\t\t, transaction_identifier\n   FROM public.ucj_batch_stage\n   );\nINSERT INTO public.ucj_batch_file (\n   SELECT 999999\n        , rpad('T'\t\t\t\t, 1 )\n        , rpad('TRAILER'\t\t, 7 )\n        , rpad(count(1)::VARCHAR, 6 )\n        , '', '', '', '', '', '', '', ''\n   FROM public.ucj_batch_stage\n   );"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958140":{"id":2958140,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-240,"y":0,"width":32,"height":32,"inputConnectorIDs":[2958131],"outputSuccessConnectorIDs":[2958128],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"stage"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DROP TABLE IF EXISTS public.ucj_batch_stage;\nCREATE TABLE public.ucj_batch_stage AS \n   SELECT rpad('D'\t\t\t\t\t\t\t\t\t\t, 1  ) AS record_type\n\t\t, rpad(record_number          \t\t\t\t\t, 6  ) AS record_number\n\t\t, rpad('R'\t\t\t\t\t\t\t\t\t\t, 1  ) AS account_id_type\n\t\t, rpad(account_identifier\t\t\t\t\t\t, 50 ) AS account_identifier\n\t\t, rpad(''\t\t\t\t\t\t\t\t\t\t, 1  ) AS location_id\n\t\t, rpad(''\t\t\t\t\t\t\t\t\t\t, 20 ) AS location_type\n\t\t, rpad('A'\t\t\t\t\t\t\t\t\t\t, 1  ) AS transaction_type\n\t\t, rpad('PA'\t\t\t\t\t\t\t\t\t\t, 3  ) AS transaction_sub_type\n\t\t, rpad(transaction_amount        \t\t\t\t, 13 ) AS transaction_amount\n\t\t, rpad('Aspiration Plus Fee Rebate - Promotion'\t, 40 ) AS transaction_description\n\t\t, rpad(transaction_identifier          \t\t\t, 20 ) AS transaction_identifier\n   FROM public.ucj_batch_promo;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958141":{"id":2958141,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":80,"y":0,"width":32,"height":32,"inputConnectorIDs":[2958109],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958142":{"id":2958142,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-496,"y":112,"width":32,"height":32,"inputConnectorIDs":[2958102],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"February"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"/* transaction_type = 'A'  transaction_subtype = 'PA'   'Aspiration Promotional Credit' */\nDROP TABLE IF EXISTS ${staging_schema}.${staging_table};\nCREATE TABLE ${staging_schema}.${staging_table} AS\n      WITH\n         promo_users AS (\n            SELECT DISTINCT\n                   ue.user_id\n            FROM rdl.feb_dd_promo p\n            LEFT JOIN web_db.user_email ue ON replace(regexp_replace(lower(ue.email),'\\\\+[^@]*@','@'),'gmail.net','gmail.com') = replace(regexp_replace(lower(p.email),'\\\\+[^@]*@','@'),'gmail.net','gmail.com')\n            WHERE ue.user_id is not null\n            ),\n         promo_accounts AS (\n            SELECT *\n            FROM (\n               SELECT upay.account_number AS prn\n                    , u.user_id\n                    , uapp.account_id\n                    , least(d.account_approved_time,d.inception_date,a.inception_date)::DATE AS asp_inception_date\n                    , row_number()\n                      OVER (PARTITION BY uapp.account_id ORDER BY a.inception_date ASC NULLS LAST, uapp.product_id ASC NULLS LAST) AS rownum\n               FROM web_db.user_product_application uapp\n               JOIN promo_users u ON u.user_id = uapp.user_id\n               JOIN web_db.account a ON a.id = uapp.account_id AND a.termination_date IS NULL AND nvl(a.is_admin_disabled,'false') <> 'true'\n               JOIN web_db.depository d ON d.account_id = a.id AND d.product_id = uapp.product_id\n               JOIN web_db.user_payment_account upay ON d.id = upay.depository_id\n                                                    AND upay.user_id = uapp.user_id\n                                                    AND nvl(upay.is_admin_disabled,'false') <> 'true'\n                                                    AND nvl(upay.is_deleted,'false') <> 'true'\n               WHERE asp_inception_date BETWEEN '2020-02-15' AND '2020-02-29'\n               )\n            WHERE rownum = 1\n            ),\n         balance_records AS (\n            SELECT gbal.file_date\n                 , asp_gal.account_id\n                 , decode(gbal.type_of_account,8,'Savings',6,'Checking') depository_type\n                 , sum(concat(gbal.current_balance_sign,gbal.current_balance)::DEC(18,2)) AS balance\n            FROM (\n               SELECT DISTINCT uapp.account_id, aog.galileo_account_number\n               FROM promo_accounts pa\n               JOIN web_db.user_product_application uapp ON uapp.account_id = pa.account_id\n               JOIN aog_db.galileo_accounts aog ON uapp.id = aog.aspiration_application_id AND uapp.user_id = aog.aspiration_user_id\n               ) asp_gal\n            JOIN rdl.raw_galileo_customer_master_data gbal ON asp_gal.galileo_account_number = gbal.galileo_account_id\n            GROUP BY gbal.file_date\n                   , asp_gal.account_id\n                   , gbal.type_of_account\n            ),\n         records_start AS (\n            SELECT min(file_date) AS start_date\n            FROM balance_records\n            ),\n         numbers AS (\n            SELECT 0 AS number\n            UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3\n            UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6\n            UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9\n            ),\n         records_dates AS (\n            SELECT (n1.number::VARCHAR || n2.number::VARCHAR || n3.number::VARCHAR)::BIGINT AS num\n                 , concat(to_char(('2019-01-01'::DATE + num),'YYYY-MM'),'-01')::DATE AS month\n                 , to_char(('2019-01-01'::DATE + num),'YYYY-MM-DD')::DATE AS date\n            FROM numbers n1 CROSS JOIN numbers n2 CROSS JOIN numbers n3\n            CROSS JOIN records_start rs\n            WHERE date <= sysdate\n              AND date >= rs.start_date\n            ),\n         daily_balance AS (\n            SELECT rd.month\n                 , rd.date\n                 , pa.account_id\n                 , bal.depository_type\n                 , last_value(bal.balance IGNORE NULLS)\n                   OVER (PARTITION BY bal.account_id, bal.depository_type ORDER BY rd.date ASC ROWS UNBOUNDED PRECEDING) AS balance\n            FROM records_dates rd\n            CROSS JOIN promo_accounts pa\n            LEFT JOIN balance_records bal ON bal.file_date = rd.date AND bal.account_id = pa.account_id\n            ),\n         accounts_standing AS (\n            SELECT account_id\n                 , min(balance) < 0 AS has_od\n                 , max(balance) > 10 AS has_funded\n            FROM daily_balance\n            GROUP BY account_id\n            ),\n         accounts_credited AS (\n            SELECT pa.account_id\n                 , sum(post.amount) AS total_credit\n                 , count(distinct post.id) AS count_credit\n            FROM promo_accounts pa\n            JOIN web_db.depository d ON d.account_id = pa.account_id\n            JOIN web_db.posted_transaction post ON d.id = post.depository_id\n            JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n            WHERE 1=1\n              AND (post.description = 'Aspiration Promotional Credit' OR gpt.transaction_description = 'Aspiration Promotional Credit')\n              AND gpt.transaction_amount = '100.00'\n            GROUP BY 1\n            ),\n         accounts_cards AS (\n            SELECT DISTINCT cards.prn\n            FROM promo_accounts pa\n            JOIN web_db.depository d ON d.account_id = pa.account_id\n            JOIN web_db.posted_transaction post ON d.id = post.depository_id\n            JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n            JOIN rdl.raw_galileo_account_card_data cards ON gpt.prn = cards.prn\n            --JOIN web_db.galileo_lookup ct ON ct.field_name = 'TYPE OF CARD' AND ct.file = 'D' AND ct.code = cards.type_of_card\n            WHERE cards.type_of_card IN (2,25,3)\n            ),\n         accounts_debits AS (\n            SELECT pa.account_id\n                 , count(1) AS count_trans\n                 , sum(post.amount)*-1 AS sum_trans\n            FROM promo_accounts pa\n            JOIN web_db.depository d ON d.account_id = pa.account_id\n            JOIN web_db.posted_transaction post ON d.id = post.depository_id\n            JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n            JOIN accounts_cards cards ON gpt.prn = cards.prn\n            WHERE post.post_date < '2020-07-01'\n              AND gpt.transaction_code_type IN ('ADdh'--'Debit Chargeback',\n                                               ,'ADdj'--'Debit 2nd Presentment',\n                                               ,'ISA' --'Purchase with PIN',\n                                               ,'ISC' --'Pre-auth completion',\n                                               ,'ISL' --'Auth',\n                                               ,'SDA' --'Purchase with PIN',\n                                               ,'SDC' --'Pre-auth completion',\n                                               ,'SDL' --'Retail Sale',\n                                               ,'SE5' --'Purchase',\n                                               ,'SE8')--'Unique Transactions',\n            GROUP BY 1\n            ),\n         accounts_directs AS (\n            SELECT pa.account_id\n                 , count(1) AS count_directs\n                 , sum(post.amount) AS sum_directs\n            FROM promo_accounts pa\n            JOIN web_db.depository d ON d.account_id = pa.account_id\n            JOIN web_db.posted_transaction post ON d.id = post.depository_id\n            JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n            WHERE post.amount >= 500\n              AND gpt.transaction_code_type = 'PMCE'\n              AND post.post_date < '2020-07-01'\n              AND (nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%ANNUITY%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%CHILD SUP%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%COMMON OF MASS%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DD PR%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DIRECT%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DIR%DEP%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DIR%PAY%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DISABILITY%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DFAS%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%EMPLOYEE P%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%FED SAL%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%GUSTO%PAY%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%P%YR%L%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PAY-ADP%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PAYDEPOSIT%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PEN%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PR DEP%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PR PAYMENT%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%SALARY%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%SOC%SEC%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%SSI%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%TREA%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%UI%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%U%EMPLOYMEN%'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%BIWEEKLY'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%PPD'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%NET=PAY'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%DIRECT PAY'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%NET PAY'\n                OR nvl(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%RETIRE%')\n            GROUP BY 1\n            ),\n      \tpromo_results AS (\n            SELECT pa.prn\n                 , pa.account_id\n                 , pa.asp_inception_date\n                 , pa.user_id\n                 , sum(1) over (partition by pa.user_id) AS user_row_count\n                 , sum(1) over (partition by pa.account_id) AS account_row_count\n                 , nvl(ast.has_funded,false) AS funded\n                 , nvl(ast.has_od,false) AS overdraft\n                 , nvl(ac.count_credit,0) AS prior_credits\n                 , nvl(adeb.count_trans,0) AS transactions\n                 , nvl(trunc(adeb.sum_trans,2),0) AS transactions_amount\n                 , nvl(adir.count_directs,0) AS directdeposits\n                 , nvl(trunc(adir.sum_directs,2),0) AS directdeposits_amount\n                 , case when directdeposits >= 3 and transactions_amount >= 100 and overdraft = false and funded = true and prior_credits = 0 then true else false end AS qualified\n            FROM promo_accounts pa\n            LEFT JOIN accounts_standing ast ON ast.account_id = pa.account_id\n            LEFT JOIN accounts_credited ac ON ac.account_id = pa.account_id\n            LEFT JOIN accounts_debits adeb ON adeb.account_id = pa.account_id\n            LEFT JOIN accounts_directs adir ON adir.account_id = pa.account_id\n          \tWHERE qualified\n        \t)\nSELECT '${run_history_id}'\t\t\t\t ::VARCHAR \t    AS etl_run_history_id\n     , lpad(3::VARCHAR,2,'0') \t\t\t ::VARCHAR \t    AS etl_batch_number\n     , row_number() over()     \t\t\t ::BIGINT  \t    AS etl_rownum\n     , pr.prn\t\t\t\t\t\t\t ::VARCHAR \t    AS account_identifier\n     , -100               \t  \t\t\t ::DECIMAL(8,4) AS transaction_amount\n     , 'FP_'||'${run_history_id}'||'-'||\n       etl_batch_number::VARCHAR||\n       '-'||\n       lpad(etl_rownum::VARCHAR,5,'0')    ::VARCHAR \t    AS transaction_identifier\nFROM promo_results pr;\n;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2958143":{"id":2958143,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-432,"y":96,"width":32,"height":32,"inputConnectorIDs":[2958106],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Spend"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--Aspiration Spend Promotion Credit\n--type A  subtype PA\nDROP TABLE IF EXISTS public.ucj_batch_promo;\nCREATE TABLE public.ucj_batch_promo AS\nWITH\n   promo_accounts AS (\n      SELECT *\n      FROM (\n         SELECT upay.account_number AS prn\n              , uapp.user_id\n              , uapp.account_id\n              , least(nvl(d.account_approved_time,current_date),nvl(d.inception_date,current_date),nvl(a.inception_date,current_date))::DATE AS asp_inception_date\n              , row_number() OVER (PARTITION BY uapp.account_id ORDER BY nvl(a.inception_date,current_date) ASC NULLS LAST, uapp.product_id ASC NULLS LAST) AS rownum\n         FROM web_db.user_product_application uapp\n         JOIN web_db.account a ON a.id = uapp.account_id AND a.termination_date IS NULL AND nvl(a.is_admin_disabled,'false') <> 'true'\n         JOIN web_db.depository d ON d.account_id = a.id AND d.product_id = uapp.product_id\n         JOIN web_db.user_payment_account upay ON d.id = upay.depository_id\n                                              AND upay.user_id = uapp.user_id\n                                              AND nvl(upay.is_admin_disabled,'false') <> 'true'\n                                              AND nvl(upay.is_deleted,'false') <> 'true'\n         WHERE asp_inception_date::date >= '2020-08-01' AND asp_inception_date::date < '2020-09-01'\n         )\n      WHERE rownum = 1\n      ),\n   balance_records AS (\n      SELECT gbal.file_date\n           , asp_gal.account_id\n           , decode(gbal.type_of_account,8,'Savings',6,'Checking') depository_type\n           , sum(concat(gbal.current_balance_sign,gbal.current_balance)::DEC(18,2)) AS balance\n      FROM (\n         SELECT DISTINCT uapp.account_id, aog.galileo_account_number\n         FROM promo_accounts pa\n         JOIN web_db.user_product_application uapp ON uapp.account_id = pa.account_id\n         JOIN aog_db.galileo_accounts aog ON uapp.id = aog.aspiration_application_id AND uapp.user_id = aog.aspiration_user_id\n         ) asp_gal\n      JOIN rdl.raw_galileo_customer_master_data gbal ON asp_gal.galileo_account_number = gbal.galileo_account_id\n      GROUP BY gbal.file_date\n             , asp_gal.account_id\n             , gbal.type_of_account\n      ),\n   records_start AS (\n      SELECT min(file_date) AS start_date\n      FROM balance_records\n      ),\n   numbers AS (\n      SELECT 0 AS number\n      UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3\n      UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6\n      UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9\n      ),\n   records_dates AS (\n      SELECT (n1.number::VARCHAR || n2.number::VARCHAR || n3.number::VARCHAR)::BIGINT AS num\n           , concat(to_char(('2019-01-01'::DATE + num),'YYYY-MM'),'-01')::DATE AS month\n           , to_char(('2019-01-01'::DATE + num),'YYYY-MM-DD')::DATE AS date\n      FROM numbers n1 CROSS JOIN numbers n2 CROSS JOIN numbers n3\n      CROSS JOIN records_start rs\n      WHERE date <= current_date+1\n        AND date >= rs.start_date\n      ),\n   daily_balance AS (\n      SELECT rd.month\n           , rd.date\n           , pa.account_id\n           , last_value(spend.balance IGNORE NULLS) OVER (PARTITION BY pa.account_id ORDER BY rd.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS balance_spend\n           , last_value(save.balance IGNORE NULLS) OVER (PARTITION BY pa.account_id ORDER BY rd.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS balance_save\n           , nvl(balance_spend,0)+nvl(balance_save,0) AS balance_combined\n      FROM records_dates rd\n      CROSS JOIN promo_accounts pa\n      LEFT JOIN balance_records spend ON spend.file_date = rd.date AND spend.account_id = pa.account_id AND spend.depository_type = 'Checking'\n      LEFT JOIN balance_records save ON save.file_date = rd.date AND save.account_id = pa.account_id AND save.depository_type = 'Savings'\n      ),\n   accounts_standing AS (\n      SELECT account_id\n           , min(balance_spend) < 0   OR min(balance_save) < 0   AS has_od\n           , max(balance_spend) >= 10 OR max(balance_save) >= 10 AS has_funded\n      FROM daily_balance\n      GROUP BY account_id\n      ),\n   accounts_credited AS (\n      SELECT pa.account_id\n           , sum(post.amount) AS total_credit\n           , count(distinct post.id) AS count_credit\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      WHERE (post.description = 'Aspiration Spend Promotion Credit' OR gpt.transaction_description = 'Aspiration Spend Promotion Credit')\n      GROUP BY 1\n      ),\n   accounts_cards AS (\n      SELECT DISTINCT cards.prn\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      JOIN rdl.raw_galileo_account_card_data cards ON gpt.prn = cards.prn\n      WHERE cards.type_of_card IN (2,25,3)\n      ),\n   accounts_debits AS (\n      SELECT pa.account_id\n           , count(1) AS count_trans\n           , sum(post.amount)*-1 AS sum_trans\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id and post.transaction_date <= (pa.asp_inception_date + 60)\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      JOIN accounts_cards cards ON gpt.prn = cards.prn\n      WHERE 1=1 --post.transaction_date < '2020-09-01'\n        AND gpt.transaction_code_type IN ('ADdh'--'Debit Chargeback',\n                                         ,'ADdj'--'Debit 2nd Presentment',\n                                         ,'ISA' --'Purchase with PIN',\n                                         ,'ISC' --'Pre-auth completion',\n                                         ,'ISL' --'Auth',\n                                         ,'SDA' --'Purchase with PIN',\n                                         ,'SDC' --'Pre-auth completion',\n                                         ,'SDL' --'Retail Sale',\n                                         ,'SE5' --'Purchase',\n                                         ,'SE8')--'Unique Transactions',\n      GROUP BY 1\n      ),\n   accounts_directs AS (\n      SELECT pa.account_id\n           , count(1) AS count_directs\n           , sum(post.amount) AS sum_directs\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      WHERE post.amount >= 500\n        AND gpt.transaction_code_type = 'PMCE'\n        AND post.transaction_date < '2020-09-01'\n        AND (coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%ANNUITY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%CHILD SUP%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%COMMON OF MASS%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DD PR%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DIRECT%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DIR%DEP%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DIR%PAY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DISABILITY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DFAS%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%EMPLOYEE P%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%FED SAL%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%GUSTO%PAY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%P%YR%L%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PAY-ADP%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PAYDEPOSIT%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PEN%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PR DEP%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PR PAYMENT%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%SALARY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%SOC%SEC%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%SSI%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%TREA%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%UI%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%U%EMPLOYMEN%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%BIWEEKLY'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%PPD'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%NET=PAY'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%DIRECT PAY'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%NET PAY'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%RETIRE%')\n      GROUP BY 1\n      ),\n   promo_results AS (\n       SELECT pa.prn\n            , pa.account_id\n            , pa.asp_inception_date\n            , pa.user_id\n            , sum(1) over (partition by pa.user_id) AS user_row_count\n            , sum(1) over (partition by pa.account_id) AS account_row_count\n            , nvl(ast.has_funded,false) AS funded\n            , nvl(ast.has_od,false) AS overdraft\n            , nvl(ac.count_credit,0) AS prior_credits\n            , nvl(adeb.count_trans,0) AS transactions\n            , nvl(trunc(adeb.sum_trans,2),0) AS transactions_amount\n            --, nvl(adir.count_directs,0) AS directdeposits\n            --, nvl(trunc(adir.sum_directs,2),0) AS directdeposits_amount\n            , case when transactions_amount >= 1000 and overdraft = false and funded = true and prior_credits = 0 then true else false end AS qualified\n       FROM promo_accounts pa\n       LEFT JOIN accounts_standing ast ON ast.account_id = pa.account_id\n       LEFT JOIN accounts_credited ac ON ac.account_id = pa.account_id\n       LEFT JOIN accounts_debits adeb ON adeb.account_id = pa.account_id\n       --LEFT JOIN accounts_directs adir ON adir.account_id = pa.account_id\n       WHERE qualified\n   )\nSELECT row_number() over (order by 1)     \t\t\t\t\t::VARCHAR AS record_number\n     , pr.prn\t\t\t\t\t\t\t \t\t\t\t\t::VARCHAR AS account_identifier\n     , -100                              \t\t\t\t\t::VARCHAR AS transaction_amount\n     , 'LD_${run_history_id}-' || lpad(record_number,5,'0')\t::VARCHAR AS transaction_identifier\nFROM promo_results pr;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2958109":{"id":2958109,"sourceID":2958112,"targetID":2958141},"2958128":{"id":2958128,"sourceID":2958140,"targetID":2958139},"2958129":{"id":2958129,"sourceID":2958138,"targetID":2958112},"2958130":{"id":2958130,"sourceID":2958139,"targetID":2958138},"2958131":{"id":2958131,"sourceID":2958115,"targetID":2958140}},"failureConnectors":{},"unconditionalConnectors":{"2958101":{"id":2958101,"sourceID":2958113,"targetID":2958136},"2958102":{"id":2958102,"sourceID":2958113,"targetID":2958142},"2958103":{"id":2958103,"sourceID":2958113,"targetID":2958134},"2958104":{"id":2958104,"sourceID":2958113,"targetID":2958137},"2958105":{"id":2958105,"sourceID":2958113,"targetID":2958132},"2958106":{"id":2958106,"sourceID":2958113,"targetID":2958143},"2958107":{"id":2958107,"sourceID":2958113,"targetID":2958135},"2958108":{"id":2958108,"sourceID":2958113,"targetID":2958133},"2958110":{"id":2958110,"sourceID":2958113,"targetID":2958114},"2958111":{"id":2958111,"sourceID":2958114,"targetID":2958115}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{"2958116":{"id":2958116,"x":-104,"y":-70,"width":47,"height":106,"text":"Filename","colour":"e6e63c"},"2958117":{"id":2958117,"x":-263,"y":-69,"width":46,"height":105,"text":"Descript\nType\nSubtype","colour":"e6e63c"},"2958118":{"id":2958118,"x":-341,"y":56,"width":283,"height":138,"text":"Types\nA: adjustment\n\nSubtypes\nPA: promotion...\nCD: cashback?","colour":"e6e63c"},"2958119":{"id":2958119,"x":-342,"y":-132,"width":284,"height":43,"text":"also two job variables for temp tables can be changed but not required.","colour":"e6e63c"},"2958120":{"id":2958120,"x":118,"y":172,"width":382,"height":83,"text":"**``TRAILER``**\n\n0**\tCOLUMN .         L    S    E    VALUE        REQ**\n1  RECORD_TYPE   1    1    1    \"T\"               Y\n2  TRAILER              7    2    8    \"TRAILER\"   Y\n3  COUNT               6    9    14   999999       Y","colour":"e6e63c"},"2958121":{"id":2958121,"x":117,"y":-30,"width":382,"height":198,"text":"**``DETAIL``**\n\n0**   COLUMN                                       L      S       E      VALUE           REQ**\n1    RECORD_TYPE                               1     1       1      \"D\"                   Y\n2    RECORD_NUMBER                        6     2       7      999999           Y\n3    ACCOUNT_ID_TYPE                      1      8       8      R                      Y\n4    ACCOUNT_IDENTIFIER                 50    9      58    PRN                 Y\n5    LOCATION_ID                                1      59    59                             N\n6    LOCATION_TYPE                           20    60    79                             N\n7    TRANSACTION_TYPE                    1      80    80     var                   Y\n8    TRANSACTION_SUB_TYPE           3      81    83                             N\n9    TRANSACTION_AMOUNT            13    84    96    1234567891   Y\n10  TRANSACTION_DESCRIPTION    40    97    136   var                  N\n11  TRANSACTION_IDENTIFIER         20    137  156                          N","colour":"e6e63c"},"2958122":{"id":2958122,"x":-342,"y":-70,"width":44,"height":106,"text":"Query\nAmount","colour":"e6e63c"},"2958123":{"id":2958123,"x":117,"y":-163,"width":382,"height":129,"text":"**``HEADER``**\n\n0**  COLUMN                        L      S     E      VAL                   REQ**\n1   RECORD_TYPE                1      1     1      \"H\"                    Y\n2   HEADER                           6      2     7      \"HEADER\"        Y\n3   CLIENT_ID                       10    8     17    454                    Y\n4   PROGRAM_ID                 10   18    27    584\n5   FILE_NAME                      50   28   77    var                     Y\n6   FILE_TRANSMIT_DATE   8     78   85    MMDDYYYY      Y","colour":"e6e63c"}},"variables":{"batch_table":{"definition":{"name":"batch_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"tmp_batch_file"},"file_number":{"definition":{"name":"file_number","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":""},"input_bucket":{"definition":{"name":"input_bucket","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"s3://aspiration-etl-staging/file_processing/galileo_batch_transactions/batch_files"},"input_filename":{"definition":{"name":"input_filename","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"passed_variable"},"staging_table":{"definition":{"name":"staging_table","type":"TEXT","scope":"BRANCH","description":"","visibility":"PRIVATE"},"value":"tmp_batch_stage"}},"grids":{}},"info":{"name":"adhoc_batch_file","description":"","type":"ORCHESTRATION","tag":"f6d0d831-06e1-45c4-a935-13b83d3e8936"}}