{"job":{"components":{"2957304":{"id":2957304,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":81,"y":83,"width":32,"height":32,"inputConnectorIDs":[2957303],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"get filename"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"import boto3\n  \nfile_bucket = '${input_bucket}'\nfile_key = '${input_folder}/${input_filename}'\n\nfile_filter = boto3.client('s3').list_objects_v2(Bucket=file_bucket,Prefix=file_key)\nfile_count = file_filter['KeyCount']\n\nif file_count == 1:\n  file_name = file_filter['Contents'][0]['Key']\nelse:\n  file_name = None\n  \ncontext.updateVariable('input_filepath', file_name)\n\nprint(input_filepath)"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2957305":{"id":2957305,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":80,"y":0,"width":32,"height":32,"inputConnectorIDs":[2957306],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DB match"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport boto3\nimport datetime\nimport os\n\nrows = context.cursor()\nrows.execute('SELECT DISTINCT etl_filename FROM rdl.galileo_batch_response')\ndb_files = []\nfor row in rows:\n  db_files.append(row[0])\n  \nfile_bucket = ('${input_bucket}').split('s3:/',1)[1].split('/',2)[1].strip('/')\nfile_key = ('${input_bucket}').split(file_bucket,1)[1].strip('/')\nnew_files = []\nfile_number = 0\n\nsvc = boto3.client('s3')\npaginator = svc.get_paginator('list_objects_v2')\npages = paginator.paginate(Bucket=file_bucket, Prefix=file_key)\nfiltered_items = pages.search('Contents[?!contains(Key,`.gpg`) && contains(Key,`.out`)].{Key: Key, LastModified: LastModified}')\n\nfor item in filtered_items:\n  filename = os.path.split(item['Key'])[1]\n  if filename not in db_files and filename != '':\n    file_number = file_number + 1\n    new_files.extend([[filename,item['LastModified'].strftime('%Y-%m-%d'),file_number]])\n\ncontext.updateGridVariable('bucket_files', new_files)"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2957307":{"id":2957307,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":80,"y":-80,"width":32,"height":32,"inputConnectorIDs":[2957301],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dates"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\n\nfrom datetime import datetime, timedelta\ncontext.updateVariable('yesterday', datetime.today() - timedelta(days=1))\nprint(yesterday)"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2957310":{"id":2957310,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":0,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2957301,2957303,2957306],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{},"failureConnectors":{},"unconditionalConnectors":{"2957301":{"id":2957301,"sourceID":2957310,"targetID":2957307},"2957303":{"id":2957303,"sourceID":2957310,"targetID":2957304},"2957306":{"id":2957306,"sourceID":2957310,"targetID":2957305}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{"input_bucket":{"definition":{"name":"input_bucket","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"aspiration-etl-staging"},"input_filename":{"definition":{"name":"input_filename","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"partner_product_20210401_083033.xlsx"},"input_filepath":{"definition":{"name":"input_filepath","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":""},"input_folder":{"definition":{"name":"input_folder","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"file_processing/havenlife"},"yesterday":{"definition":{"name":"yesterday","type":"DATETIME","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""}},"grids":{}},"info":{"name":"Scripts","description":null,"type":"ORCHESTRATION","tag":"42cda95d-f1ef-438b-944f-1201677c594a"}}