{"job":{"components":{"2959640":{"id":2959640,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":0,"y":96,"width":32,"height":32,"inputConnectorIDs":[2959637],"outputSuccessConnectorIDs":[2959642],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of check variables"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom dateutil.relativedelta import relativedelta\nfrom pytz import timezone\n\n# print 'current time in PST: ', datetime.now(timezone('US/Pacific'))\n\n# today=datetime.now(timezone('US/Pacific')).strftime(\"%Y-%m-%d\")\n# print 'today: ', today\n\nprint '${current_year}-${current_month}-${current_day}'\n\n#file_date='${current_year}${current_month}${current_day}'\n#context.updateVariable('file_date', file_date)\n#print 'file_date', file_date\n\n#context.updateVariable('file_date', file_date)\n\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2959641":{"id":2959641,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":0,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2959637],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2959643":{"id":2959643,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":0,"y":208,"width":32,"height":32,"inputConnectorIDs":[2959642],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"extract historical txns"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse unit_21;\n\n\ncreate or replace file format FEEDZAI_CSV_FORMAT \n  type = 'CSV'\n  comment = 'CSV format for feedzai export files'\n  FIELD_OPTIONALLY_ENCLOSED_BY = '\"' \n  ESCAPE_UNENCLOSED_FIELD = NONE\n;\n\n\n-- copy into @public.DATATEAM/dump/jchen/feedzai_poc/historical_transactions/historical_txn_month_${current_year}${current_month}${current_day}.csv\ncopy into @public.FEEDZAI_DATA_POC/historical_txn_extract_on_20220201/historical_txn_${current_year}${current_month}${current_day}.csv\n\nfrom (\n\n\nwith prn_virtual_raw as (\n    select\n        PRN,\n        VIRTUAL,\n        row_number() over (partition by prn order by CREATED_AT asc ) as rn\n    from BANK_DB.DEBIT_CARD\n    where 1=1\n      and USER_ID != 0\n)\n, prn_virtual as (\n    select prn,\n           VIRTUAL\n    from prn_virtual_raw\n    where 1 = 1\n      and rn = 1\n--     limit 5\n)\nselect\n--     gpt.prn,\n    gpt.ID as transaction_id,\n    gpt.MERCHANT_COUNTRY_CODE as acceptor_country_code,\n    gpt.MERCHANT_NUMBER as acceptor_id,\n    case\n        when gpt.ID=56010010 then 'REMA .RUM             Torp          NOR'\n        else gpt.MERCHANT_NAME\n    end as acceptor_name,\n--     'N/A' as account_pw_change_flag, -- TO investigate\n    ifnull(replace(pending.raw_body:response_code, '\"', ''), '') as action_code,\n    gpt.TRANSACTION_AMOUNT as amount,\n    gpt.AUTHORIZATION_CODE as auth_type,\n    pt.RUNNING_BALANCE::numeric(20,2) as card_available_balance,\n    case\n        when pv.VIRTUAL=TRUE then 'Virtual'\n        when pv.VIRTUAL=False then 'Physical'\n        else NULL\n    end as card_category,\n    cids_hash.UUID as card_pan,\n    gpt.TRANSACTION_CURRENCY_CODE as currency_code,\n--     NULL as customer_email_change_flag,             -- TODO, need some work\n    u.UUID as customer_id,\n--     NULL as customer_phone_change_flag,             -- TODO, need some work\n    pt.TRANSACTION_DATE as event_occurred_at,\n--     NULL as last_sca_at,                            -- probably can do, need some work\n    gpt.MERCHANT_CATEGORY_CODE as mcc,\n--     NULL as pos_card_read_method,                   -- need investigation on event_db\n--     NULL as pos_cardholder_ver_method,              -- need investigation on event_db\n--     'N/A' as terminal_id,                           -- need investigation on event_db\n    gl.DESCRIPTION as purchase_type,\n    gpt.TRANSACTION_AMOUNT_SIGN,\n    pwc.TRANSACTION_DATE is not null as account_pw_change_flag,\n    ec.TRANSACTION_DATE is not null as customer_email_change_flag,\n    pc.TRANSACTION_DATE is not null as customer_phone_change_flag,\n    logins.LOGIN_TIME as last_sca_at,\n    replace(pending.RAW_BODY:type, '\"', '') as TXN_TYPE,\n    replace(pending.RAW_BODY:act_type, '\"', '') as TXN_ACT_TYPE\nfrom WEB_DB.GALILEO_POSTED_TRANSACTION gpt\njoin WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.ID\njoin WEB_DB.DEPOSITORY d on pt.DEPOSITORY_ID = d.ID\njoin WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID=ua.ACCOUNT_ID\njoin WEB_DB._USER u on ua.USER_ID=u.ID\njoin WEB_DB.USER_PROFILE up on ua.USER_ID=up.USER_ID\njoin WEB_DB.ADDRESS addr on up.ADDRESS_ID = addr.ID\njoin prn_virtual pv on pv.PRN=gpt.PRN\nJOIN web_db.galileo_lookup gl\n  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n        join unit21.INSTRUMENT_TRANSACTION_TYPE_MAPPING ittm on ittm.ASPIRATION_TRANSACTION_TYPE=gl.DESCRIPTION\n-- join FEEDZAI.CARD_DATA_ALL_DAYS cids on gpt.PRN=cids.prn and to_date(gpt.POST_DATE, 'MMDDYYYY')=cids.DATE\nleft join FEEDZAI.CARD_ID_HASH_TABLE cids_hash on gpt.CARD_ID=cids_hash.CARD_ID\nleft join FEEDZAI.GALILEO_PENDING_TRANSACTION_FEEDZAI_POC pending\n    on pending.TXN_ID=gpt.AUTHORIZATION_CODE\n   and pending.GALILEO_ACCOUNT_ID=gpt.GALILEO_ACCOUNT_ID\nleft join FEEDZAI.FIRST_TXN_AFTER_PASSWORD_CHANGES pwc on pwc.TRANSACTION_ID=gpt.ID\nleft join FEEDZAI.FIRST_TXN_AFTER_EMAIL_CHANGES ec on ec.TRANSACTION_ID=gpt.ID\nleft join FEEDZAI.FIRST_TXN_AFTER_PHONE_CHANGES pc on pc.TRANSACTION_ID=gpt.ID\nleft join FEEDZAI.LAST_LOGIN_TIME logins on logins.TRANSACTION_ID=gpt.ID\nwhere 1=1\n  and ittm.INSTRUMENT='debit_card'\n--   and to_date(gpt.POST_DATE, 'MMDDYYYY') between '2020-11-01' and '2021-11-30'\n  and date_trunc('month', pt.TRANSACTION_DATE) = '${current_year}-${current_month}-${current_day}'\n--   and gpt.galileo_account_id='473327'\n--   and posted.AUTHORIZATION_CODE='12335486'\n--   and ua.USER_ID=2357211\n--   and ua.USER_ID=2826307\n--   and ua.USER_ID in (1628334, 958687, 2357211, 2826307, 2962500)\n\n)\nfile_format = (format_name = FEEDZAI_CSV_FORMAT, compression = NONE)\nSINGLE=true\nHEADER=TRUE\nmax_file_size=4900000000\n;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2959642":{"id":2959642,"sourceID":2959640,"targetID":2959643}},"failureConnectors":{},"unconditionalConnectors":{"2959637":{"id":2959637,"sourceID":2959641,"targetID":2959640}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{"current_day":{"definition":{"name":"current_day","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"01"},"current_month":{"definition":{"name":"current_month","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"11"},"current_year":{"definition":{"name":"current_year","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"2021"}},"grids":{}},"info":{"name":"feedzai_transaction_historical_extract_day","description":null,"type":"ORCHESTRATION","tag":"ebb8a426-dba4-42e8-ba44-cce73e4a2534"}}