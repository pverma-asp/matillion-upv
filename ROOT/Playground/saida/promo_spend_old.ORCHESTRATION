{"job":{"components":{"2959872":{"id":2959872,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-160,"y":0,"width":32,"height":32,"inputConnectorIDs":[2959896],"outputSuccessConnectorIDs":[2959898],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"batch"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DROP TABLE IF EXISTS ${tmp_schema}.${tmp_c_output_table};\nCREATE TABLE ${tmp_schema}.${tmp_c_output_table} (\n   ROWNUM\tBIGINT,\n   COL_01   VARCHAR(256),\n   COL_02   VARCHAR(256),\n   COL_03   VARCHAR(256),\n   COL_04   VARCHAR(256),\n   COL_05   VARCHAR(256),\n   COL_06   VARCHAR(256),\n   COL_07   VARCHAR(256),\n   COL_08   VARCHAR(256),\n   COL_09   VARCHAR(256),\n   COL_10   VARCHAR(256),\n   COL_11   VARCHAR(256)\n   );\nINSERT INTO ${tmp_schema}.${tmp_c_output_table} (\n   SELECT 0\n\t\t, rpad('H'\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, 1  )\n\t\t, rpad('HEADER'\t\t\t\t\t\t\t\t\t\t\t\t\t\t, 6  )\n\t\t, rpad('454'\t\t\t\t\t\t\t\t\t\t\t\t\t\t, 10 )\n\t\t, rpad('584'\t\t\t\t\t\t\t\t\t\t\t\t\t\t, 10 )\n\t\t, rpad('${output_file_name}.gpg'\t\t\t\t\t\t\t\t\t, 50 )\n\t\t, rpad('${output_file_month}${output_file_day}${output_file_year}'\t, 8  )\n\t\t, '', '', '', '', ''\n   );\nINSERT INTO ${tmp_schema}.${tmp_c_output_table} (\n   SELECT record_number::bigint\n\t\t, record_type\n\t\t, record_number\n\t\t, account_id_type\n\t\t, account_identifier\n\t\t, location_id\n\t\t, location_type\n\t\t, transaction_type\n\t\t, transaction_sub_type\n\t\t, transaction_amount\n\t\t, transaction_description\n\t\t, transaction_identifier\n   FROM ${tmp_schema}.${tmp_b_batch_table}\n   );\nINSERT INTO ${tmp_schema}.${tmp_c_output_table} (\n   SELECT 999999\n        , rpad('T'\t\t\t\t, 1 )\n        , rpad('TRAILER'\t\t, 7 )\n        , rpad(count(1)::VARCHAR, 6 )\n        , '', '', '', '', '', '', '', ''\n   FROM ${tmp_schema}.${tmp_b_batch_table}\n   );"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2959873":{"id":2959873,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-320,"y":0,"width":32,"height":32,"inputConnectorIDs":[2959895],"outputSuccessConnectorIDs":[2959899],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"promo"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DROP TABLE IF EXISTS ${tmp_schema}.${tmp_a_data_table};\nCREATE TABLE ${tmp_schema}.${tmp_a_data_table} AS\nWITH\n   promo_accounts AS (\n      SELECT *\n      FROM (\n         SELECT upay.account_number AS prn\n              , uapp.user_id\n              , uapp.account_id\n              , least(nvl(d.account_approved_time,current_date),nvl(d.inception_date,current_date),nvl(a.inception_date,current_date))::DATE AS asp_inception_date\n              , row_number() OVER (PARTITION BY uapp.account_id ORDER BY nvl(a.inception_date,current_date) ASC NULLS LAST, uapp.product_id ASC NULLS LAST) AS rownum\n         FROM web_db.user_product_application uapp\n         JOIN web_db.account a ON a.id = uapp.account_id AND a.termination_date IS NULL AND nvl(a.is_admin_disabled,'false') <> 'true'\n         JOIN web_db.depository d ON d.account_id = a.id AND d.product_id = uapp.product_id\n         JOIN web_db.user_payment_account upay ON d.id = upay.depository_id\n                                              AND upay.user_id = uapp.user_id\n                                              AND nvl(upay.is_admin_disabled,'false') <> 'true'\n                                              AND nvl(upay.is_deleted,'false') <> 'true'\n         WHERE asp_inception_date::date >= '${promo_incepted_start}' AND asp_inception_date::date < ('${promo_incepted_end}'::DATE + 1)\n         )\n      WHERE rownum = 1\n      ),\n   balance_records AS (\n      SELECT gbal.file_date\n           , asp_gal.account_id\n           , decode(gbal.type_of_account,8,'Savings',6,'Checking') depository_type\n           , sum(concat(gbal.current_balance_sign,gbal.current_balance)::DEC(18,2)) AS balance\n      FROM (\n         SELECT DISTINCT uapp.account_id, aog.galileo_account_number\n         FROM promo_accounts pa\n         JOIN web_db.user_product_application uapp ON uapp.account_id = pa.account_id\n         JOIN aog_db.galileo_accounts aog ON uapp.id = aog.aspiration_application_id AND uapp.user_id = aog.aspiration_user_id\n         ) asp_gal\n      JOIN rdl.raw_galileo_customer_master_data gbal ON asp_gal.galileo_account_number = gbal.galileo_account_id\n      GROUP BY gbal.file_date\n             , asp_gal.account_id\n             , gbal.type_of_account\n      ),\n   records_start AS (\n      SELECT min(file_date) AS start_date\n      FROM balance_records\n      ),\n   numbers AS (\n      SELECT 0 AS number\n      UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3\n      UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6\n      UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9\n      ),\n   records_dates AS (\n      SELECT (n1.number::VARCHAR || n2.number::VARCHAR || n3.number::VARCHAR)::BIGINT AS num\n           , concat(to_char(('2018-01-01'::DATE + num),'YYYY-MM'),'-01')::DATE AS month\n           , to_char(('2018-01-01'::DATE + num),'YYYY-MM-DD')::DATE AS date\n      FROM numbers n1 CROSS JOIN numbers n2 CROSS JOIN numbers n3 CROSS JOIN numbers n4\n      CROSS JOIN records_start rs\n      WHERE date <= current_date+1\n        AND date >= rs.start_date\n      ),\n   daily_balance AS (\n      SELECT rd.month\n           , rd.date\n           , pa.account_id\n           , last_value(spend.balance IGNORE NULLS) OVER (PARTITION BY pa.account_id ORDER BY rd.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS balance_spend\n           , last_value(save.balance IGNORE NULLS) OVER (PARTITION BY pa.account_id ORDER BY rd.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS balance_save\n           , nvl(balance_spend,0)+nvl(balance_save,0) AS balance_combined\n      FROM records_dates rd\n      CROSS JOIN promo_accounts pa\n      LEFT JOIN balance_records spend ON spend.file_date = rd.date AND spend.account_id = pa.account_id AND spend.depository_type = 'Checking'\n      LEFT JOIN balance_records save ON save.file_date = rd.date AND save.account_id = pa.account_id AND save.depository_type = 'Savings'\n      ),\n   accounts_standing AS (\n      SELECT account_id\n           , min(balance_spend) < 0   OR min(balance_save) < 0   AS has_od\n           , max(balance_spend) >= 10 OR max(balance_save) >= 10 AS has_funded\n      FROM daily_balance\n      GROUP BY account_id\n      ),\n   accounts_credited AS (\n      SELECT pa.account_id\n           , sum(post.amount) AS total_credit\n           , count(distinct post.id) AS count_credit\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      WHERE (post.description = '${promo_description}' OR gpt.transaction_description = '${promo_description}')\n      GROUP BY 1\n      ),\n   accounts_cards AS (\n      SELECT DISTINCT cards.prn\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      JOIN rdl.raw_galileo_account_card_data cards ON gpt.prn = cards.prn\n      WHERE cards.type_of_card IN (2,25,3)\n      ),\n   accounts_debits AS (\n      SELECT pa.account_id\n           , count(1) AS count_trans\n           , sum(post.amount)*-1 AS sum_trans\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id and post.transaction_date <= (pa.asp_inception_date + ${promo_transaction_days})\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      JOIN accounts_cards cards ON gpt.prn = cards.prn\n      WHERE 1=1 --post.transaction_date < '2020-09-01'\n        AND gpt.transaction_code_type IN ('ADdh'--'Debit Chargeback',\n                                         ,'ADdj'--'Debit 2nd Presentment',\n                                         ,'ISA' --'Purchase with PIN',\n                                         ,'ISC' --'Pre-auth completion',\n                                         ,'ISL' --'Auth',\n                                         ,'SDA' --'Purchase with PIN',\n                                         ,'SDC' --'Pre-auth completion',\n                                         ,'SDL' --'Retail Sale',\n                                         ,'SE5' --'Purchase',\n                                         ,'SE8')--'Unique Transactions',\n      GROUP BY 1\n      ),\n   accounts_directs AS (\n      SELECT pa.account_id\n           , count(1) AS count_directs\n           , sum(post.amount) AS sum_directs\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id AND post.transaction_date <= (pa.asp_inception_date + ${promo_transaction_days})\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      WHERE post.amount >= 500\n        AND gpt.transaction_code_type = 'PMCE'\n        AND (coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%ANNUITY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%CHILD SUP%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%COMMON OF MASS%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DD PR%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DIRECT%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DIR%DEP%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DIR%PAY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DISABILITY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DFAS%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%EMPLOYEE P%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%FED SAL%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%GUSTO%PAY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%P%YR%L%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PAY-ADP%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PAYDEPOSIT%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PEN%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PR DEP%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PR PAYMENT%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%SALARY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%SOC%SEC%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%SSI%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%TREA%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%UI%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%U%EMPLOYMEN%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%BIWEEKLY'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%PPD'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%NET=PAY'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%DIRECT PAY'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%NET PAY'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%RETIRE%')\n      GROUP BY 1\n      ),\n   promo_results AS (\n       SELECT pa.prn\n            , pa.account_id\n            , pa.asp_inception_date\n            , pa.user_id\n            , sum(1) over (partition by pa.user_id) AS user_row_count\n            , sum(1) over (partition by pa.account_id) AS account_row_count\n            , nvl(ast.has_funded,false) AS funded\n            , nvl(ast.has_od,false) AS overdraft\n            , nvl(ac.count_credit,0) AS prior_credits\n            , nvl(adeb.count_trans,0) AS transactions\n            , nvl(trunc(adeb.sum_trans,2),0) AS transactions_amount\n            --, nvl(adir.count_directs,0) AS directdeposits\n            --, nvl(trunc(adir.sum_directs,2),0) AS directdeposits_amount\n            , case when transactions_amount >= ${promo_spend_amount} and overdraft = false and prior_credits = 0 then true else false end AS qualified\n       FROM promo_accounts pa\n       LEFT JOIN accounts_standing ast ON ast.account_id = pa.account_id\n       LEFT JOIN accounts_credited ac ON ac.account_id = pa.account_id\n       LEFT JOIN accounts_debits adeb ON adeb.account_id = pa.account_id\n       --LEFT JOIN accounts_directs adir ON adir.account_id = pa.account_id\n       WHERE qualified\n   )\nSELECT row_number() over (order by 1)     \t\t\t\t\t::VARCHAR AS record_number\n     , pr.prn\t\t\t\t\t\t\t \t\t\t\t\t::VARCHAR AS account_identifier\n     , '${batch_credit_amount}'              \t\t\t\t::VARCHAR AS transaction_amount\n     , 'SP_${run_history_id}-' || lpad(record_number,5,'0')\t::VARCHAR AS transaction_identifier\nFROM promo_results pr;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2959874":{"id":2959874,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-560,"y":0,"width":32,"height":32,"inputConnectorIDs":[2959893],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Scratch"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--Aspiration Spend Promotion Credit\n--type A  subtype PA\nDROP TABLE IF EXISTS public.ucj_batch_promo;\nCREATE TABLE public.ucj_batch_promo AS\nWITH\n   promo_accounts AS (\n      SELECT *\n      FROM (\n         SELECT upay.account_number AS prn\n              , uapp.user_id\n              , uapp.account_id\n              , least(nvl(d.account_approved_time,current_date),nvl(d.inception_date,current_date),nvl(a.inception_date,current_date))::DATE AS asp_inception_date\n              , row_number() OVER (PARTITION BY uapp.account_id ORDER BY nvl(a.inception_date,current_date) ASC NULLS LAST, uapp.product_id ASC NULLS LAST) AS rownum\n         FROM web_db.user_product_application uapp\n         JOIN web_db.account a ON a.id = uapp.account_id AND a.termination_date IS NULL AND nvl(a.is_admin_disabled,'false') <> 'true'\n         JOIN web_db.depository d ON d.account_id = a.id AND d.product_id = uapp.product_id\n         JOIN web_db.user_payment_account upay ON d.id = upay.depository_id\n                                              AND upay.user_id = uapp.user_id\n                                              AND nvl(upay.is_admin_disabled,'false') <> 'true'\n                                              AND nvl(upay.is_deleted,'false') <> 'true'\n         WHERE asp_inception_date::date >= '2020-08-01' AND asp_inception_date::date < '2020-09-01'\n         )\n      WHERE rownum = 1\n      ),\n   balance_records AS (\n      SELECT gbal.file_date\n           , asp_gal.account_id\n           , decode(gbal.type_of_account,8,'Savings',6,'Checking') depository_type\n           , sum(concat(gbal.current_balance_sign,gbal.current_balance)::DEC(18,2)) AS balance\n      FROM (\n         SELECT DISTINCT uapp.account_id, aog.galileo_account_number\n         FROM promo_accounts pa\n         JOIN web_db.user_product_application uapp ON uapp.account_id = pa.account_id\n         JOIN aog_db.galileo_accounts aog ON uapp.id = aog.aspiration_application_id AND uapp.user_id = aog.aspiration_user_id\n         ) asp_gal\n      JOIN rdl.raw_galileo_customer_master_data gbal ON asp_gal.galileo_account_number = gbal.galileo_account_id\n      GROUP BY gbal.file_date\n             , asp_gal.account_id\n             , gbal.type_of_account\n      ),\n   records_start AS (\n      SELECT min(file_date) AS start_date\n      FROM balance_records\n      ),\n   numbers AS (\n      SELECT 0 AS number\n      UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3\n      UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6\n      UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9\n      ),\n   records_dates AS (\n      SELECT (n1.number::VARCHAR || n2.number::VARCHAR || n3.number::VARCHAR)::BIGINT AS num\n           , concat(to_char(('2019-01-01'::DATE + num),'YYYY-MM'),'-01')::DATE AS month\n           , to_char(('2019-01-01'::DATE + num),'YYYY-MM-DD')::DATE AS date\n      FROM numbers n1 CROSS JOIN numbers n2 CROSS JOIN numbers n3\n      CROSS JOIN records_start rs\n      WHERE date <= current_date+1\n        AND date >= rs.start_date\n      ),\n   daily_balance AS (\n      SELECT rd.month\n           , rd.date\n           , pa.account_id\n           , last_value(spend.balance IGNORE NULLS) OVER (PARTITION BY pa.account_id ORDER BY rd.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS balance_spend\n           , last_value(save.balance IGNORE NULLS) OVER (PARTITION BY pa.account_id ORDER BY rd.date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS balance_save\n           , nvl(balance_spend,0)+nvl(balance_save,0) AS balance_combined\n      FROM records_dates rd\n      CROSS JOIN promo_accounts pa\n      LEFT JOIN balance_records spend ON spend.file_date = rd.date AND spend.account_id = pa.account_id AND spend.depository_type = 'Checking'\n      LEFT JOIN balance_records save ON save.file_date = rd.date AND save.account_id = pa.account_id AND save.depository_type = 'Savings'\n      ),\n   accounts_standing AS (\n      SELECT account_id\n           , min(balance_spend) < 0   OR min(balance_save) < 0   AS has_od\n           , max(balance_spend) >= 10 OR max(balance_save) >= 10 AS has_funded\n      FROM daily_balance\n      GROUP BY account_id\n      ),\n   accounts_credited AS (\n      SELECT pa.account_id\n           , sum(post.amount) AS total_credit\n           , count(distinct post.id) AS count_credit\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      WHERE (post.description = 'Aspiration Spend Promotion Credit' OR gpt.transaction_description = 'Aspiration Spend Promotion Credit')\n      GROUP BY 1\n      ),\n   accounts_cards AS (\n      SELECT DISTINCT cards.prn\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      JOIN rdl.raw_galileo_account_card_data cards ON gpt.prn = cards.prn\n      WHERE cards.type_of_card IN (2,25,3)\n      ),\n   accounts_debits AS (\n      SELECT pa.account_id\n           , count(1) AS count_trans\n           , sum(post.amount)*-1 AS sum_trans\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id and post.transaction_date <= (pa.asp_inception_date + 60)\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      JOIN accounts_cards cards ON gpt.prn = cards.prn\n      WHERE 1=1 --post.transaction_date < '2020-09-01'\n        AND gpt.transaction_code_type IN ('ADdh'--'Debit Chargeback',\n                                         ,'ADdj'--'Debit 2nd Presentment',\n                                         ,'ISA' --'Purchase with PIN',\n                                         ,'ISC' --'Pre-auth completion',\n                                         ,'ISL' --'Auth',\n                                         ,'SDA' --'Purchase with PIN',\n                                         ,'SDC' --'Pre-auth completion',\n                                         ,'SDL' --'Retail Sale',\n                                         ,'SE5' --'Purchase',\n                                         ,'SE8')--'Unique Transactions',\n      GROUP BY 1\n      ),\n   accounts_directs AS (\n      SELECT pa.account_id\n           , count(1) AS count_directs\n           , sum(post.amount) AS sum_directs\n      FROM promo_accounts pa\n      JOIN web_db.depository d ON d.account_id = pa.account_id\n      JOIN web_db.posted_transaction post ON d.id = post.depository_id\n      JOIN web_db.galileo_posted_transaction gpt ON gpt.posted_transaction_id = post.id\n      WHERE post.amount >= 500\n        AND gpt.transaction_code_type = 'PMCE'\n        AND post.transaction_date < '2020-09-01'\n        AND (coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%ANNUITY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%CHILD SUP%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%COMMON OF MASS%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DD PR%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DIRECT%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DIR%DEP%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DIR%PAY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DISABILITY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%DFAS%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%EMPLOYEE P%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%FED SAL%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%GUSTO%PAY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%P%YR%L%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PAY-ADP%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PAYDEPOSIT%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PEN%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PR DEP%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%PR PAYMENT%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%SALARY%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%SOC%SEC%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%SSI%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%TREA%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%UI%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ILIKE '%U%EMPLOYMEN%'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%BIWEEKLY'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%PPD'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%NET=PAY'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%DIRECT PAY'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%NET PAY'\n          OR coalesce(NULLIF(gpt.merchant_name,''),NULLIF(gpt.transaction_description,''),NULLIF(post.description,'')) ilike '%RETIRE%')\n      GROUP BY 1\n      ),\n   promo_results AS (\n       SELECT pa.prn\n            , pa.account_id\n            , pa.asp_inception_date\n            , pa.user_id\n            , sum(1) over (partition by pa.user_id) AS user_row_count\n            , sum(1) over (partition by pa.account_id) AS account_row_count\n            , nvl(ast.has_funded,false) AS funded\n            , nvl(ast.has_od,false) AS overdraft\n            , nvl(ac.count_credit,0) AS prior_credits\n            , nvl(adeb.count_trans,0) AS transactions\n            , nvl(trunc(adeb.sum_trans,2),0) AS transactions_amount\n            --, nvl(adir.count_directs,0) AS directdeposits\n            --, nvl(trunc(adir.sum_directs,2),0) AS directdeposits_amount\n            , case when transactions_amount >= 1000 and overdraft = false and funded = true and prior_credits = 0 then true else false end AS qualified\n       FROM promo_accounts pa\n       LEFT JOIN accounts_standing ast ON ast.account_id = pa.account_id\n       LEFT JOIN accounts_credited ac ON ac.account_id = pa.account_id\n       LEFT JOIN accounts_debits adeb ON adeb.account_id = pa.account_id\n       --LEFT JOIN accounts_directs adir ON adir.account_id = pa.account_id\n       WHERE qualified\n   )\nSELECT row_number() over (order by 1)     \t\t\t\t\t::VARCHAR AS record_number\n     , pr.prn\t\t\t\t\t\t\t \t\t\t\t\t::VARCHAR AS account_identifier\n     , -100                              \t\t\t\t\t::VARCHAR AS transaction_amount\n     , 'LD_${run_history_id}-' || lpad(record_number,5,'0')\t::VARCHAR AS transaction_identifier\nFROM promo_results pr;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2959875":{"id":2959875,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-80,"y":0,"width":32,"height":32,"inputConnectorIDs":[2959898],"outputSuccessConnectorIDs":[2959900],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"output"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"copy into '@PUBLIC.ETL/${output_folder}/${output_file_name}'\nfrom (\n  select COL_01\n\t   , COL_02\n\t   , COL_03\n\t   , COL_04\n\t   , COL_05\n\t   , COL_06\n\t   , COL_07\n\t   , COL_08\n\t   , COL_09\n\t   , COL_10\n\t   , COL_11\n  from ${tmp_schema}.${tmp_c_output_table}\n  order by ROWNUM ASC\n  )\n\tfile_format=(\n      type=csv\n      compression=none\n      field_delimiter=none\n    )\n    single=true\n    ;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2959876":{"id":2959876,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-480,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2959892,2959893],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2959877":{"id":2959877,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-240,"y":0,"width":32,"height":32,"inputConnectorIDs":[2959899],"outputSuccessConnectorIDs":[2959896],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"stage"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DROP TABLE IF EXISTS ${tmp_schema}.${tmp_b_batch_table};\nCREATE TABLE ${tmp_schema}.${tmp_b_batch_table} AS \n   SELECT rpad('D'\t\t\t\t\t\t\t\t\t\t, 1  ) AS record_type\n\t\t, rpad(record_number          \t\t\t\t\t, 6  ) AS record_number\n\t\t, rpad('R'\t\t\t\t\t\t\t\t\t\t, 1  ) AS account_id_type\n\t\t, rpad(account_identifier\t\t\t\t\t\t, 50 ) AS account_identifier\n\t\t, rpad(''\t\t\t\t\t\t\t\t\t\t, 1  ) AS location_id\n\t\t, rpad(''\t\t\t\t\t\t\t\t\t\t, 20 ) AS location_type\n\t\t, rpad('${batch_type}'\t\t\t\t\t\t\t, 1  ) AS transaction_type\n\t\t, rpad('${batch_subtype}'\t\t\t\t\t\t, 3  ) AS transaction_sub_type\n\t\t, rpad(transaction_amount        \t\t\t\t, 13 ) AS transaction_amount\n\t\t, rpad('${promo_description}'\t\t\t\t\t, 40 ) AS transaction_description\n\t\t, rpad(transaction_identifier          \t\t\t, 20 ) AS transaction_identifier\n   FROM ${tmp_schema}.${tmp_a_data_table};"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2959878":{"id":2959878,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-400,"y":0,"width":32,"height":32,"inputConnectorIDs":[2959892],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2959895],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Variables"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Udating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport datetime\n\n#add run_history_id to create a unique temp table for parrallel processing\n#context.updateVariable(\"staging_table\", staging_table + str(run_history_id))\n#context.updateVariable(\"batch_filename\", batch_filename + datetime.date.today().strftime('%Y') + datetime.date.today().strftime('%m') + datetime.date.today().strftime('%d') + str(run_history_id) + '.txt')\nfulldatetime = datetime.datetime.now().strftime('%Y%m%d_%H%M%S%f')[:-3]\noutput_file_time = fulldatetime[9:]\ncontext.updateVariable(\"output_file_year\", fulldatetime[0:4])\ncontext.updateVariable(\"output_file_month\", fulldatetime[4:6])\ncontext.updateVariable(\"output_file_day\", fulldatetime[6:8])\ncontext.updateVariable(\"output_file_name\", output_file_prefix + output_file_year + output_file_month + output_file_day + '_' + output_file_time + output_file_suffix)\nprint(\"Full:   \" + fulldatetime)\nprint(\"Year:   \" + output_file_year)\nprint(\"Month:      \" + output_file_month)\nprint(\"Day:          \" + output_file_day)\nprint(\"Filename: \" + output_file_name)\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2959879":{"id":2959879,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":0,"y":0,"width":32,"height":32,"inputConnectorIDs":[2959900],"outputSuccessConnectorIDs":[2959897],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"cleanup"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DROP TABLE IF EXISTS ${tmp_schema}.${tmp_a_data_table};\nDROP TABLE IF EXISTS ${tmp_schema}.${tmp_b_batch_table};\nDROP TABLE IF EXISTS ${tmp_schema}.${tmp_c_output_table};"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2959882":{"id":2959882,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":80,"y":0,"width":32,"height":32,"inputConnectorIDs":[2959897],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2959896":{"id":2959896,"sourceID":2959877,"targetID":2959872},"2959897":{"id":2959897,"sourceID":2959879,"targetID":2959882},"2959898":{"id":2959898,"sourceID":2959872,"targetID":2959875},"2959899":{"id":2959899,"sourceID":2959873,"targetID":2959877},"2959900":{"id":2959900,"sourceID":2959875,"targetID":2959879}},"failureConnectors":{},"unconditionalConnectors":{"2959892":{"id":2959892,"sourceID":2959876,"targetID":2959878},"2959893":{"id":2959893,"sourceID":2959876,"targetID":2959874},"2959895":{"id":2959895,"sourceID":2959878,"targetID":2959873}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{"2959826":{"id":2959826,"x":-342,"y":-70,"width":44,"height":106,"text":"Query\nAmount","colour":"e6e63c"},"2959827":{"id":2959827,"x":118,"y":172,"width":382,"height":83,"text":"**``TRAILER``**\n\n0**\tCOLUMN .         L    S    E    VALUE        REQ**\n1  RECORD_TYPE   1    1    1    \"T\"               Y\n2  TRAILER              7    2    8    \"TRAILER\"   Y\n3  COUNT               6    9    14   999999       Y","colour":"e6e63c"},"2959880":{"id":2959880,"x":-342,"y":-132,"width":284,"height":43,"text":"also two job variables for temp tables can be changed but not required.","colour":"e6e63c"},"2959881":{"id":2959881,"x":-341,"y":56,"width":283,"height":90,"text":"Types\nA: adjustment\n\nSubtypes\nPA: promotion...\nCD: cashback?","colour":"e6e63c"},"2959883":{"id":2959883,"x":117,"y":-163,"width":382,"height":129,"text":"**``HEADER``**\n\n0**  COLUMN                        L      S     E      VAL                   REQ**\n1   RECORD_TYPE                1      1     1      \"H\"                    Y\n2   HEADER                           6      2     7      \"HEADER\"        Y\n3   CLIENT_ID                       10    8     17    454                    Y\n4   PROGRAM_ID                 10   18    27    584\n5   FILE_NAME                      50   28   77    var                     Y\n6   FILE_TRANSMIT_DATE   8     78   85    MMDDYYYY      Y","colour":"e6e63c"},"2959884":{"id":2959884,"x":-104,"y":-70,"width":47,"height":106,"text":"Filename","colour":"e6e63c"},"2959885":{"id":2959885,"x":-263,"y":-69,"width":46,"height":105,"text":"Descript\nType\nSubtype","colour":"e6e63c"},"2959886":{"id":2959886,"x":-591,"y":163,"width":533,"height":144,"text":"Spend Promo Steps:\n1) Check ticket for rule changes\n2) Adjust promo_incepted_start and promo_incepted_end job variables\n3) Check file that appears in:\n.     s3://aspiration-etl-staging/file_processing/galileo_batch_transactions/batch_files\n4) If file looks good then go to:\n.     s3://aspiration-etl-staging/file_processing/galileo_batch_transactions/batch_files_encrypted\n.     and move the encrypted version of the file to Galileo SFTP\n\nRoot Location: s3://aspiration-etl-staging/file_processing/galileo_batch_transactions/","colour":"e6e63c"},"2959887":{"id":2959887,"x":117,"y":-30,"width":382,"height":198,"text":"**``DETAIL``**\n\n0**   COLUMN                                       L      S       E      VALUE           REQ**\n1    RECORD_TYPE                               1     1       1      \"D\"                   Y\n2    RECORD_NUMBER                        6     2       7      999999           Y\n3    ACCOUNT_ID_TYPE                      1      8       8      R                      Y\n4    ACCOUNT_IDENTIFIER                 50    9      58    PRN                 Y\n5    LOCATION_ID                                1      59    59                             N\n6    LOCATION_TYPE                           20    60    79                             N\n7    TRANSACTION_TYPE                    1      80    80     var                   Y\n8    TRANSACTION_SUB_TYPE           3      81    83                             N\n9    TRANSACTION_AMOUNT            13    84    96    1234567891   Y\n10  TRANSACTION_DESCRIPTION    40    97    136   var                  N\n11  TRANSACTION_IDENTIFIER         20    137  156                          N","colour":"e6e63c"}},"variables":{"batch_credit_amount":{"definition":{"name":"batch_credit_amount","type":"TEXT","scope":"BRANCH","description":"This is the amount to use for each batch file record. Some promotions have a calculated amount or an amount that varies between records. This variable would not be used in those cases.","visibility":"PUBLIC"},"value":"-100.00"},"batch_subtype":{"definition":{"name":"batch_subtype","type":"TEXT","scope":"BRANCH","description":"NOTE: whether a credit or debit should be positive or negative in the batch file is determined by type and subtype.","visibility":"PUBLIC"},"value":"PA"},"batch_type":{"definition":{"name":"batch_type","type":"TEXT","scope":"BRANCH","description":"NOTE: whether a credit or debit should be positive or negative in the batch file is determined by type and subtype.","visibility":"PUBLIC"},"value":"A"},"output_bucket":{"definition":{"name":"output_bucket","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"aspiration-etl-staging"},"output_file_day":{"definition":{"name":"output_file_day","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"11"},"output_file_month":{"definition":{"name":"output_file_month","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"12"},"output_file_name":{"definition":{"name":"output_file_name","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"python calculated"},"output_file_prefix":{"definition":{"name":"output_file_prefix","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"btrans_584_"},"output_file_suffix":{"definition":{"name":"output_file_suffix","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":".txt"},"output_file_year":{"definition":{"name":"output_file_year","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"2020"},"output_folder":{"definition":{"name":"output_folder","type":"TEXT","scope":"BRANCH","description":"","visibility":"PUBLIC"},"value":"file_processing/galileo_batch_transactions/batch_files"},"promo_description":{"definition":{"name":"promo_description","type":"TEXT","scope":"BRANCH","description":"This is the description used for this promotion. This value is used in the promotion query to identify previous credits related to this promotion. It is also used in the query that creates the promo batch which applies the same description to the new transactions being sent through this batch file. \n\nNOTE: this value is important to some of the business users and they will usually want to define the value. It is important to review the description they define to make sure it is unlikely to overlap with other descriptions used in the past. Finally be sure that the description is 40 characters or less. This value will appear as the transaction description that is seen by the customer.","visibility":"PUBLIC"},"value":"Aspiration Spend Promotion Credit"},"promo_incepted_end":{"definition":{"name":"promo_incepted_end","type":"TEXT","scope":"BRANCH","description":"This is the end of the date range that filters incepted accounts in the promotion query. NOTE: 1 day is added to this date in the query and the end of the range in the filter is no inclusive.","visibility":"PUBLIC"},"value":"2020-10-31"},"promo_incepted_start":{"definition":{"name":"promo_incepted_start","type":"TEXT","scope":"BRANCH","description":"This is the start of the date range that filters incepted accounts in the promotion query.","visibility":"PUBLIC"},"value":"2020-10-01"},"promo_spend_amount":{"definition":{"name":"promo_spend_amount","type":"TEXT","scope":"BRANCH","description":"This is the spend amount required to qualify for a promotion credit.","visibility":"PUBLIC"},"value":"1000"},"promo_transaction_days":{"definition":{"name":"promo_transaction_days","type":"TEXT","scope":"BRANCH","description":"This is the number of days since the account incepted and is used to filter transactions to include in the promotion.","visibility":"PUBLIC"},"value":"60"},"tmp_a_data_table":{"definition":{"name":"tmp_a_data_table","type":"TEXT","scope":"BRANCH","description":"This is the first table created in the process to hold the promotion query results.","visibility":"PUBLIC"},"value":"tmp_spend_data"},"tmp_b_batch_table":{"definition":{"name":"tmp_b_batch_table","type":"TEXT","scope":"BRANCH","description":"This is the second table created in the process to hold the batch query results (file body).","visibility":"PUBLIC"},"value":"tmp_spend_batch"},"tmp_c_output_table":{"definition":{"name":"tmp_c_output_table","type":"TEXT","scope":"BRANCH","description":"This is the third table created in the process to hold the output query results (file header + body + trailer).","visibility":"PUBLIC"},"value":"tmp_spend_output"},"tmp_schema":{"definition":{"name":"tmp_schema","type":"TEXT","scope":"BRANCH","description":"This is the schema to use for creating the temporary tables created in the process. Everything is deleted at the end of the process.","visibility":"PUBLIC"},"value":"public"}},"grids":{}},"info":{"name":"promo_spend_old","description":"","type":"ORCHESTRATION","tag":"41eb7a1b-602a-447e-9adf-959e1a315105"}}