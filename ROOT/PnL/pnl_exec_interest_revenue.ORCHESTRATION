{"job":{"components":{"2963138":{"id":2963138,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-832,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2963197],"outputSuccessConnectorIDs":[2963168],"outputFailureConnectorIDs":[2963189],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Execution -1 month"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SET timezone = 'America/Los_Angeles';\n\nINSERT INTO edw.interest_revenue(execution,\n                                  User_id,\n                                  Account_id,\n                                  Depository_id,\n                                  Investment_id,\n                                  Account_type,\n                                  Product_type,\n--                                   Account_product_type_id,\n--                                   Account_product_type_name,\n--                                   Account_product_id,\n--                                   Account_product_name,\n                                  Non_customer,\n                                  Category,\n                                  Item,\n                                  Date,\n                                  Value,\n                                  Value_type)\n\nWITH\n    month_dates AS (\n      SELECT date_trunc('month', dateadd(month, -1, current_date))::date AS prev_month_first,\n             last_day(prev_month_first) AS prev_month_last,\n             prev_month_first - 1 AS two_months_ago_last_day\n    ),\n\n    fitting_accounts AS (\n      SELECT gpt.galileo_account_id::bigint AS Galileo_account_id,\n             MAX(dep.id) AS Account_dep_inv_id\n      FROM web_db.galileo_posted_transaction gpt\n             INNER JOIN web_db.posted_transaction pt ON gpt.posted_transaction_id = pt.id\n             INNER JOIN web_db.depository AS dep ON pt.depository_id = dep.id\n             INNER JOIN web_db.account AS acc ON dep.account_id = acc.id\n             INNER JOIN edw.view_accounts_termination_dates atd ON atd.account_id = dep.account_id\n      WHERE acc.product_type = 2\n        AND dep.product_id IN (4, 5)\n        AND dep.inception_date <= (SELECT prev_month_last FROM month_dates)\n      AND (atd.termination_date IS NULL\n      OR (atd.termination_date::date >= (SELECT prev_month_first FROM month_dates)\n        AND dep.inception_date <= atd.termination_date))\n      GROUP BY gpt.galileo_account_id\n    ),\n\n    date_gen AS (\n      SELECT DATEADD('day', i.i - 1, (SELECT prev_month_first FROM month_dates)) AS Date\n      FROM (\n             SELECT ROW_NUMBER() OVER(ORDER BY SEQ4()) i\n             FROM TABLE (\n                    GENERATOR(\n                            ROWCOUNT => 31\n                        )\n                 )\n             LIMIT 31\n           ) i\n      WHERE DATE_TRUNC('month', Date) = (SELECT prev_month_first FROM month_dates)\n    ),\n\n    galileo_accounts_all_dates AS (\n      SELECT acc.Galileo_account_id, qd.date FROM fitting_accounts acc\n                                                    CROSS JOIN date_gen qd\n    ),\n\n    current_balances AS (\n      SELECT galileo_account_id::bigint,\n             (CASE WHEN current_balance_sign != '-' THEN current_balance::float\n                   ELSE 0 END) AS current_balance,\n             file_date\n      FROM rdl.raw_galileo_customer_master_data\n      WHERE DATE_TRUNC('month', file_date) = (SELECT prev_month_first FROM month_dates)\n      ORDER BY galileo_account_id, file_date\n    ),\n\n    last_known_value AS (\n      SELECT galileo_account_id::bigint,\n\n             (CASE WHEN current_balance_sign != '-' THEN current_balance::float\n                   ELSE 0 END) AS current_balance,\n\n             (SELECT two_months_ago_last_day FROM month_dates) AS date,\n             ROW_NUMBER() OVER (PARTITION BY galileo_account_id::bigint ORDER BY file_date DESC) AS num\n\n      FROM rdl.raw_galileo_customer_master_data\n      WHERE file_date < (SELECT prev_month_first FROM month_dates)\n    ),\n\n    combined AS (\n      SELECT ad.Galileo_account_id, cb.current_balance, ad.date\n      FROM current_balances cb\n             RIGHT JOIN galileo_accounts_all_dates ad\n                        ON ad.date = cb.file_date AND ad.Galileo_account_id = cb.galileo_account_id\n      UNION\n      SELECT l.galileo_account_id, l.current_balance, l.date FROM last_known_value l\n      WHERE num = 1\n    ),\n\n    combined_with_filled_values AS (\n      SELECT Galileo_account_id,\n             (CASE\n                WHEN combined.current_balance IS NULL\n                  THEN FIRST_VALUE(combined.current_balance::float IGNORE NULLS) OVER\n                  (PARTITION BY Galileo_account_id ORDER BY Date DESC, Galileo_account_id DESC\n                  ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)\n                WHEN combined.current_balance IS NOT NULL\n                  THEN combined.current_balance::float END) AS cb_last,\n             Date\n      FROM combined\n      ORDER BY Galileo_account_id, Date\n    ),\n\n    combined_with_filled_values_cutoff_at_inception_and_termination AS (\n      SELECT cwfv.Galileo_account_id,\n             (CASE WHEN (cwfv.date < dep.inception_date OR cwfv.date > atd.termination_date) THEN 0\n                   ELSE cb_last END) AS cb_last,\n             Date\n      FROM combined_with_filled_values cwfv\n             INNER JOIN fitting_accounts fa ON cwfv.galileo_account_id = fa.galileo_account_id\n             INNER JOIN web_db.depository AS dep ON fa.Account_dep_inv_id = dep.id\n             INNER JOIN web_db.account AS acc ON dep.account_id = acc.id\n             INNER JOIN edw.view_accounts_termination_dates atd ON atd.account_id = dep.account_id\n      ORDER BY Galileo_account_id, Date\n    ),\n\n    total_monthly_sum AS (\n      SELECT SUM(cb_last) AS msum\n      FROM combined_with_filled_values_cutoff_at_inception_and_termination\n      WHERE DATE_TRUNC('month', Date) = (SELECT prev_month_first FROM month_dates)\n    ),\n\n    combined_by_monthly_percentage AS (\n      SELECT Galileo_account_id,\n             cb_last,\n             (CASE WHEN cb_last IS NULL THEN 0\n                   WHEN cb_last IS NOT NULL THEN cb_last END) AS Current_balance,\n             (SELECT msum FROM total_monthly_sum) AS Monthly_sum,\n             (CASE WHEN Monthly_sum IS NULL THEN 0\n                   WHEN Monthly_sum = 0 THEN 0\n                   WHEN Monthly_sum > 0 THEN Current_balance / Monthly_sum END) AS Day_share,\n             Date\n      FROM combined_with_filled_values_cutoff_at_inception_and_termination\n      WHERE DATE_TRUNC('month', Date) = (SELECT prev_month_first FROM month_dates)\n    ),\n\n    interest_income_sum AS (\n      SELECT interest_revenue AS value\n      FROM edw.etl_interest_revenue\n      WHERE DATE_TRUNC('month', TO_DATE(date, 'YYYY-MM')) = (SELECT prev_month_first FROM month_dates)\n    ),\n\n    combined_final AS (\n      SELECT fa.Account_dep_inv_id,\n             c.Date,\n             SUM(Day_share) AS Share\n      FROM fitting_accounts fa\n             INNER JOIN combined_by_monthly_percentage c ON c.Galileo_account_id = fa.Galileo_account_id\n      GROUP BY fa.Account_dep_inv_id, c.Date\n    )\n\nSELECT current_date() AS execution,\n       un.user_id AS User_id,\n       un.account_id AS Account_id,\n       cf.Account_dep_inv_id AS Depository_id,\n       NULL AS Investment_id,\n       'Depository'::text AS Account_type,\n       (CASE\n          WHEN dep.product_id = 4 THEN 'Spend'::text\n          WHEN dep.product_id = 5 THEN 'Save'::text\n          ELSE ''::text\n         END) AS Product_type,\n--        2 AS Account_product_type_id,\n--        'Depository'::text AS Account_product_type_name,\n--        dep.product_id AS Account_product_id,\n--        (CASE\n--           WHEN Account_product_id = 4 THEN 'Spend'::text\n--           WHEN Account_product_id = 5 THEN 'Save'::text\n--           ELSE ''::text\n--          END) AS Account_product_name,\n       FALSE AS Non_customer,\n       'Indirect'::text AS Category,\n       'Interest Revenue'::text AS Item,\n       cf.Date,\n       cf.Share * (SELECT value FROM interest_income_sum) AS Value,\n       'Revenue'::text AS Value_type\nFROM combined_final cf\n  INNER JOIN web_db.depository dep ON cf.Account_dep_inv_id = dep.id\n  INNER JOIN edw.view_unique_user_accounts un ON dep.account_id = un.account_id;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963139":{"id":2963139,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-1472,"y":-240,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2963195],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963172":{"id":2963172,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-832,"y":-320,"width":32,"height":32,"inputConnectorIDs":[2963188,2963189,2963194],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2963192],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963173":{"id":2963173,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":-1540940111,"x":-736,"y":-368,"width":32,"height":32,"inputConnectorIDs":[2963192],"outputSuccessConnectorIDs":[2963170],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Rollback 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963174":{"id":2963174,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-1136,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2963198],"outputSuccessConnectorIDs":[2963171],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_etl_interest_revenue"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_etl_interest_revenue"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963175":{"id":2963175,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":-656,"y":-368,"width":32,"height":32,"inputConnectorIDs":[2963170],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Failure 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963176":{"id":2963176,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-544,"y":-64,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DROP"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--drop table ${Pnl_schema}.${Target_table};\ntruncate table ${Pnl_schema}.${Target_table}\n\n--delete from ${Pnl_schema}.${Target_table}\n--where \n--date_part(year, cast(${Pnl_schema}.${Target_table}.date as date)) = date_part(year, current_date)\n--and\n--date_part(month, cast(${Pnl_schema}.${Target_table}.date as date)) = date_part(month, current_date) - 1;\n--delete from ${Pnl_schema}.${Consolidated_table}\n--where \n--date_part(year, cast(${Pnl_schema}.${Consolidated_table}.date as date)) = date_part(year, current_date)\n--and\n--date_part(month, cast(${Pnl_schema}.${Consolidated_table}.date as date)) = date_part(month, current_date) - 1"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963177":{"id":2963177,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-1136,"y":-144,"width":32,"height":32,"inputConnectorIDs":[2963193],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_init_interest_revenue"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_init_interest_revenue"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963178":{"id":2963178,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":977205684,"x":-640,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2963169],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Commit 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963179":{"id":2963179,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":-1785670938,"x":-1024,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2963171],"outputSuccessConnectorIDs":[2963199],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Begin 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963180":{"id":2963180,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-928,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2963199],"outputSuccessConnectorIDs":[2963197],"outputFailureConnectorIDs":[2963188],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Delete -1 month"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"delete from edw.${Target_table}\nwhere \ndate_part(year, cast(edw.${Target_table}.date as date)) = date_part(year, dateadd(month, -1, current_date))\nand\ndate_part(month, cast(edw.${Target_table}.date as date)) = date_part(month, dateadd(month, -1, current_date))"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963181":{"id":2963181,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-736,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2963168],"outputSuccessConnectorIDs":[2963169],"outputFailureConnectorIDs":[2963194],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Consolidated"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"-- Delete existing data\nDELETE FROM edw.${Consolidated_table} \nWHERE Item = ${Item_name} \n\tand\ndate_part(year, cast(edw.${Consolidated_table}.date as date)) = date_part(year, dateadd(month, -1, current_date))\nand\ndate_part(month, cast(edw.${Consolidated_table}.date as date)) = date_part(month, dateadd(month, -1, current_date));\n\n-- Insert updated data\n\nINSERT INTO edw.${Consolidated_table}(execution,\n                                 User_id,\n                                 Account_id,\n                                 Depository_id,\n                                 Investment_id,\n                                 Account_type,\n                                 Product_type,\n                                 --Account_product_type_id,\n                                 --Account_product_type_name,\n                                 --Account_investment_type_id,\n                                 --Account_investment_type_name,\n                                 --Account_type_id,\n                                 --Account_type_name,\n                                 --Account_product_id,\n                                 --Account_product_name,\n                                 Non_customer,\n                                 Category,\n                                 Item,\n                                 Value_type,\n                                 Value,\n                                 Date)\n(SELECT execution,\n       User_id,\n       Account_id,\n       Depository_id,\n       Investment_id,\n       Account_type,\n       Product_type,\n       --Account_product_type_id,\n       --Account_product_type_name,\n       --Account_investment_type_id,\n       --Account_investment_type_name,\n       --Account_type_id,\n       --Account_type_name,\n       --Account_product_id,\n       --Account_product_name,\n       Non_customer,\n       Category,\n       Item,\n       Value_type,\n       Value,\n       Date\nFROM edw.${Target_table}\nwhere\t\ndate_part(year, cast(edw.${Target_table}.date as date)) = date_part(year, dateadd(month, -1, current_date))\nand\ndate_part(month, cast(edw.${Target_table}.date as date)) = date_part(month, dateadd(month, -1, current_date)));"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963182":{"id":2963182,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1376,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2963195],"outputSuccessConnectorIDs":[2963196],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Target table check"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\ncursor = context.cursor()\ntry:\n\tcursor.execute('select convert (integer, (select exists (select * from edw.'+Target_table+' limit 1)))')\n\tresult = cursor.fetchone()[0]\n\tcontext.updateVariable('Exist_check_Target_table', result)\nexcept:\n  \tcontext.updateVariable('Exist_check_Target_table', '0')\n    \nprint ('Variable value: '+str(Exist_check_Target_table))"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963183":{"id":2963183,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-1280,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2963196],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[2963198],"outputFalseConnectorIDs":[2963193],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"If"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Exist_check_Target_table"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"1"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963200":{"id":2963200,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-544,"y":-128,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GRANT"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"spashchenko.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"ashumakov.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"vfigurkin.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"opetrova.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"idudkin.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Consolidated_table} TO \"spashchenko.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Consolidated_table} TO \"ashumakov.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Consolidated_table} TO \"vfigurkin.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Consolidated_table} TO \"opetrova.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Consolidated_table} TO \"idudkin.ctr\";"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2963168":{"id":2963168,"sourceID":2963138,"targetID":2963181},"2963169":{"id":2963169,"sourceID":2963181,"targetID":2963178},"2963170":{"id":2963170,"sourceID":2963173,"targetID":2963175},"2963171":{"id":2963171,"sourceID":2963174,"targetID":2963179},"2963196":{"id":2963196,"sourceID":2963182,"targetID":2963183},"2963197":{"id":2963197,"sourceID":2963180,"targetID":2963138},"2963199":{"id":2963199,"sourceID":2963179,"targetID":2963180}},"failureConnectors":{"2963188":{"id":2963188,"sourceID":2963180,"targetID":2963172},"2963189":{"id":2963189,"sourceID":2963138,"targetID":2963172},"2963194":{"id":2963194,"sourceID":2963181,"targetID":2963172}},"unconditionalConnectors":{"2963192":{"id":2963192,"sourceID":2963172,"targetID":2963173},"2963195":{"id":2963195,"sourceID":2963139,"targetID":2963182}},"trueConnectors":{"2963198":{"id":2963198,"sourceID":2963183,"targetID":2963174}},"falseConnectors":{"2963193":{"id":2963193,"sourceID":2963183,"targetID":2963177}},"iterationConnectors":{},"noteConnectors":{},"notes":{"2963136":{"id":2963136,"x":-587,"y":-168,"width":87,"height":140,"text":"for development","colour":"d60000"}},"variables":{"Consolidated_table":{"definition":{"name":"Consolidated_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"consolidated_pnl"},"Exist_check_Target_table":{"definition":{"name":"Exist_check_Target_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"Item_name":{"definition":{"name":"Item_name","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"'Interest Revenue'"},"Month_iterator":{"definition":{"name":"Month_iterator","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"Pnl_schema":{"definition":{"name":"Pnl_schema","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"edw"},"Target_table":{"definition":{"name":"Target_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":"interest_revenue"}},"grids":{}},"info":{"name":"pnl_exec_interest_revenue","description":"Script for updating item on regular basis","type":"ORCHESTRATION","tag":"79301c8b-e952-4e78-8464-43dc5503d606"}}