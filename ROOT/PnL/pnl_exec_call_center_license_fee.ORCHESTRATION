{"job":{"components":{"2963952":{"id":2963952,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-1424,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964029],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[2964027],"outputFalseConnectorIDs":[2964026],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"If"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Exist_check_Target_table"},"2":{"slot":2,"type":"STRING","value":"Not"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"-1"}}},"2":{"slot":2,"values":{"1":{"slot":1,"type":"STRING","value":"Exist_check_Calendar_table"},"2":{"slot":2,"type":"STRING","value":"Not"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"-1"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963953":{"id":2963953,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-544,"y":-128,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GRANT"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"spashchenko.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"ashumakov.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"vfigurkin.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"opetrova.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"idudkin.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Calendar_table} TO \"spashchenko.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Calendar_table} TO \"ashumakov.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Calendar_table} TO \"vfigurkin.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Calendar_table} TO \"opetrova.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Calendar_table} TO \"idudkin.ctr\";"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963954":{"id":2963954,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-1280,"y":-160,"width":32,"height":32,"inputConnectorIDs":[2964026],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_init_call_center_license_fee"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_init_call_center_license_fee"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963955":{"id":2963955,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1680,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964001],"outputSuccessConnectorIDs":[2964030],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Target table check"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\ncursor = context.cursor()\ntry:\n\tcursor.execute('select convert (integer, (select exists (select * from edw.'+Target_table+' limit 1)))')\n\tresult = cursor.fetchone()[0]\n\tcontext.updateVariable('Exist_check_Target_table', result)\nexcept:\n  \tcontext.updateVariable('Exist_check_Target_table', '-1')\n    \nprint ('Variable value: '+str(Exist_check_Target_table))"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2963958":{"id":2963958,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-1920,"y":-240,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2964020],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964004":{"id":2964004,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-832,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964002],"outputSuccessConnectorIDs":[2964024],"outputFailureConnectorIDs":[2964023],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"To Consolidated"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"-- Delete existing data\nDELETE FROM edw.${Consolidated_table} \nWHERE Item = ${Item_name};\n\n-- Insert updated data\n\nINSERT INTO edw.${Consolidated_table}(execution,\n                                 User_id,\n                                 Account_id,\n                                 Depository_id,\n                                 Investment_id,\n                                 Account_type,\n                                 Product_type,\n                                 --Account_product_type_id,\n                                 --Account_product_type_name,\n                                 --Account_investment_type_id,\n                                 --Account_investment_type_name,\n                                 --Account_type_id,\n                                 --Account_type_name,\n                                 --Account_product_id,\n                                 --Account_product_name,\n                                 Non_customer,\n                                 Category,\n                                 Item,\n                                 Value_type,\n                                 Value,\n                                 Date)\n(SELECT execution,\n       User_id,\n       Account_id,\n       Depository_id,\n       Investment_id,\n       Account_type,\n       Product_type,\n       --Account_product_type_id,\n       --Account_product_type_name,\n       --Account_investment_type_id,\n       --Account_investment_type_name,\n       --Account_type_id,\n       --Account_type_name,\n       --Account_product_id,\n       --Account_product_name,\n       Non_customer,\n       Category,\n       Item,\n       Value_type,\n       Value,\n       Date\nFROM edw.${Target_table})"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964005":{"id":2964005,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-960,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964025],"outputSuccessConnectorIDs":[2964002],"outputFailureConnectorIDs":[2964022],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Execution 2"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SET timezone TO 'America/Los_Angeles';\nINSERT INTO edw.etl_call_center_tmp_user_date_value(user_id, date, value)\n\nWITH users AS (\n       SELECT u.id AS user_id,\n              uua.account_id AS account_id,\n              u.date_created AS user_date_created,\n              acc.termination_date AS acc_termination_date,\n              atd.termination_date AS atd_termination_date,\n              (CASE\n                WHEN uua.account_id IN (SELECT account_id FROM web_db.investment)\n                 THEN TRUE\n                ELSE FALSE\n               END) acc_has_investment,\n              (CASE\n                WHEN acc_has_investment IS FALSE\n                 THEN atd_termination_date\n                WHEN (acc_has_investment IS TRUE)\n                       AND (acc_termination_date IS NULL OR atd_termination_date IS NULL)\n                 THEN NULL\n                WHEN acc_termination_date >= atd_termination_date\n                 THEN acc_termination_date\n                ELSE atd_termination_date\n               END) user_termination_date\n       FROM web_db._user AS u\n       INNER JOIN edw.view_unique_user_accounts AS uua ON u.id = uua.user_id\n       INNER JOIN web_db.account AS acc ON uua.account_id = acc.id\n       INNER JOIN edw.view_accounts_termination_dates AS atd ON atd.account_id = uua.account_id\n     ),\n\n     date_gen AS (\n       SELECT DATE_ADD('day', i.i - 1, (SELECT MIN(date) FROM edw.etl_call_center_tmp_calendar))::date AS date_of_month\n       FROM (\n              SELECT ROW_NUMBER() OVER() i\n              FROM stl_scan\n              LIMIT 1000\n            ) i\n       WHERE date_of_month <= (SELECT MAX(date) FROM edw.etl_call_center_tmp_calendar)\n     ),\n\n     users_dates AS (\n       SELECT user_id,\n              user_date_created,\n              user_termination_date,\n              date_of_month,\n              (CASE\n                WHEN (user_termination_date IS NULL AND date_of_month >= user_date_created::date)\n                 THEN TRUE\n                WHEN user_termination_date IS NULL AND date_of_month < user_date_created::date\n                 THEN FALSE\n                WHEN date_of_month BETWEEN user_date_created::date\n                                   AND user_termination_date::date\n                 THEN TRUE\n                ELSE FALSE\n               END) user_existed\n       FROM users\n       CROSS JOIN date_gen\n     ),\n\n     count_users_existed_by_dates AS (\n       SELECT date_of_month, COUNT(user_id) count_users_existed\n       FROM users_dates\n       WHERE user_existed IS TRUE\n       GROUP BY date_of_month\n     ),\n\n     users_dates_total AS (\n       SELECT ua.user_id AS User_id,\n              cc.date AS Date,\n              (CASE\n                WHEN ua.user_existed\n                 THEN cc.total / cu.count_users_existed\n                ELSE 0\n               END) Value\n       FROM users_dates AS ua\n       INNER JOIN edw.${Calendar_table} AS cc ON ua.date_of_month = cc.date\n       INNER JOIN count_users_existed_by_dates AS cu ON cu.date_of_month = cc.date\n     ),\n\n     new_and_old_users_dates_total AS (\n       SELECT udt.User_id,\n              udt.date,\n              (COALESCE(cf.Value, 0) + udt.Value) AS Value\n       FROM edw.${Target_table} AS cf\n       RIGHT JOIN users_dates_total AS udt ON cf.date::date = udt.date AND cf.User_id = udt.User_id\n     )\nSELECT * FROM new_and_old_users_dates_total;\n\n\n\nUPDATE edw.${Target_table}\nSET execution = getdate(), value = i.val\nFROM (\n       SELECT User_id, date, value AS val\n       FROM edw.etl_call_center_tmp_user_date_value) i\nWHERE edw.${Target_table}.User_id = i.User_id\n  AND edw.${Target_table}.date = i.date;\n\n\n\n\nINSERT INTO edw.${Target_table}(execution,\n                                         User_id,\n                                         Non_customer,\n                                         Category,\n                                         Item,\n                                         Date,\n                                         Value,\n                                         Value_type)\nSELECT getdate() AS execution,\n       ctmp.User_id,\n       TRUE AS Non_customer,\n       'Indirect'::text AS Category,\n       'Call Center License Fee'::text AS Item,\n       ctmp.Date,\n       -ctmp.Value AS Value,\n       'Cost'::text AS Value_type\nFROM edw.${Target_table} AS clf\nRIGHT JOIN edw.etl_call_center_tmp_user_date_value AS ctmp ON clf.User_id = ctmp.User_id\n                                                              AND clf.Date = ctmp.date\nWHERE clf.User_id IS NULL AND clf.Date IS NULL;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964006":{"id":2964006,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-1792,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964020],"outputSuccessConnectorIDs":[2964001],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_etl_email"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_etl_email"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964007":{"id":2964007,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1552,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964030],"outputSuccessConnectorIDs":[2964029],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Calendar table check"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\ncursor = context.cursor()\ntry:\n\tcursor.execute('select convert (integer, (select exists (select * from edw.'+Calendar_table+' limit 1)))')\n\tresult = cursor.fetchone()[0]\n\tcontext.updateVariable('Exist_check_Calendar_table', result)\nexcept:\n  \tcontext.updateVariable('Exist_check_Calendar_table', '-1')\n    \nprint ('Variable value: '+str(Exist_check_Calendar_table))"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964008":{"id":2964008,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":-720,"y":-352,"width":32,"height":32,"inputConnectorIDs":[2964031],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Failure 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964009":{"id":2964009,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-1008,"y":-352,"width":32,"height":32,"inputConnectorIDs":[2964016,2964017,2964022,2964023],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2964021],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964010":{"id":2964010,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-1056,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964003],"outputSuccessConnectorIDs":[2964025],"outputFailureConnectorIDs":[2964017],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Execution 1"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SET timezone TO 'America/Los_Angeles';\nINSERT INTO edw.etl_call_center_tmp_calendar(date, total)\n\nWITH zendesk_split AS (\n        SELECT id,\n               start_date,\n               end_date,\n               datediff('day', start_date, end_date)+1 AS days_count,\n               amount / days_count AS amount_by_days\n        FROM edw.etl_call_center_zendesk\n        WHERE flag_processed IS FALSE\n        AND start_date <= end_date\n      ),\n\n     talkdesk_split AS (\n       SELECT id,\n              credit_start_date,\n              credit_end_date,\n              enterprise_start_date,\n              enterprise_end_date,\n              datediff('day', credit_start_date, credit_end_date)+1 AS credit_days_count,\n              credit_amount / credit_days_count AS credit_amount_by_days,\n              datediff('day', enterprise_start_date, enterprise_end_date)+1 AS enterprise_days_count,\n              enterprise_amount / enterprise_days_count AS enterprise_amount_by_days\n       FROM edw.etl_call_center_talkdesk\n       WHERE flag_processed IS FALSE\n         AND credit_start_date <= credit_end_date\n         AND enterprise_start_date <= enterprise_end_date\n     ),\n\n     tymeshift_split AS (\n        SELECT id,\n               first_part_start_date,\n               first_part_end_date,\n               second_part_start_date,\n               second_part_end_date,\n               datediff('day', first_part_start_date, first_part_end_date)+1 AS first_part_days_count,\n               time_payment / first_part_days_count AS first_part_by_days,\n               datediff('day', second_part_start_date, second_part_end_date)+1 AS second_part_days_count,\n               professional_payment / second_part_days_count AS second_part_by_days\n        FROM edw.etl_call_center_tymeshift\n        WHERE flag_processed IS FALSE\n          AND first_part_start_date <= first_part_end_date\n          AND second_part_start_date <= second_part_end_date\n     ),\n\n     dates AS (\n       SELECT start_date, end_date\n       FROM zendesk_split\n       UNION\n       SELECT credit_start_date, credit_end_date\n       FROM talkdesk_split\n       UNION\n       SELECT enterprise_start_date, enterprise_end_date\n       FROM talkdesk_split\n       UNION\n       SELECT first_part_start_date, first_part_end_date\n       FROM tymeshift_split\n       UNION\n       SELECT second_part_start_date, second_part_end_date\n       FROM tymeshift_split\n     ),\n\n     start_date AS (\n       SELECT MIN(start_date) AS start_date\n       FROM dates\n     ),\n\n     end_date AS (\n       SELECT MAX(end_date) AS end_date\n       FROM dates\n     ),\n\n     date_gen AS (\n       SELECT DATE_ADD('day', i.i - 1, (SELECT MIN(start_date) FROM start_date))::date AS date_of_month\n       FROM (\n              SELECT ROW_NUMBER() OVER() i\n              FROM stl_scan\n              LIMIT 1000\n            ) i\n       WHERE date_of_month <= (SELECT MAX(end_date) FROM end_date)\n     ),\n\n     zd AS (\n       SELECT dg.date_of_month AS date,\n              (CASE\n                 WHEN date_of_month BETWEEN zs.start_date\n                                    AND zs.end_date\n                   THEN zs.amount_by_days\n                 ELSE 0\n                END) AS total\n       FROM zendesk_split AS zs\n       CROSS JOIN date_gen AS dg\n     ),\n\n     td_credit AS (\n       SELECT dg.date_of_month AS date,\n              (CASE\n                 WHEN date_of_month BETWEEN ts.credit_start_date\n                                    AND ts.credit_end_date\n                   THEN ts.credit_amount_by_days\n                 ELSE 0\n                END) AS total\n       FROM talkdesk_split AS ts\n       CROSS JOIN date_gen AS dg\n     ),\n\n     td_ent AS (\n       SELECT dg.date_of_month AS date,\n              (CASE\n                 WHEN date_of_month BETWEEN ts.enterprise_start_date\n                                    AND ts.enterprise_end_date\n                   THEN ts.enterprise_amount_by_days\n                 ELSE 0\n                END) AS total\n       FROM talkdesk_split AS ts\n       CROSS JOIN date_gen AS dg\n     ),\n\n     ts_first AS (\n       SELECT dg.date_of_month AS date,\n              (CASE\n                 WHEN date_of_month BETWEEN ts.first_part_start_date\n                                    AND ts.first_part_end_date\n                   THEN ts.first_part_by_days\n                 ELSE 0\n                END) AS total\n       FROM tymeshift_split AS ts\n       CROSS JOIN date_gen AS dg\n     ),\n\n     ts_second AS (\n       SELECT dg.date_of_month AS date,\n              (CASE\n                 WHEN date_of_month BETWEEN ts.second_part_start_date\n                                    AND ts.second_part_end_date\n                   THEN ts.second_part_by_days\n                 ELSE 0\n                END) AS total\n       FROM tymeshift_split AS ts\n       CROSS JOIN date_gen AS dg\n     ),\n\n     zd_sum AS (\n       SELECT date, SUM(total) AS total\n       FROM zd\n       GROUP BY date\n     ),\n\n     td_credit_sum AS (\n       SELECT date, SUM(total) AS total\n       FROM td_credit\n       GROUP BY date\n     ),\n\n     td_ent_sum AS (\n       SELECT date, SUM(total) AS total\n       FROM td_ent\n       GROUP BY date\n     ),\n\n     ts_first_sum AS (\n       SELECT date, SUM(total) AS total\n       FROM ts_first\n       GROUP BY date\n     ),\n\n     ts_second_sum AS (\n       SELECT date, SUM(total) AS total\n       FROM ts_second\n       GROUP BY date\n     ),\n\n     combined AS (\n       SELECT zd.date,\n              zd.total+td1.total+td2.total+ts1.total+ts2.total AS total\n       FROM zd_sum AS zd\n       INNER JOIN td_credit_sum AS td1 ON zd.date = td1.date\n       INNER JOIN td_ent_sum AS td2 ON zd.date = td2.date\n       INNER JOIN ts_first_sum AS ts1 ON zd.date = ts1.date\n       INNER JOIN ts_second_sum AS ts2 ON zd.date = ts2.date\n     ),\n\n     combined_and_calendar AS (\n       SELECT comb.date, (COALESCE(calendar.total, 0) + comb.total) AS total\n       FROM edw.${Calendar_table} AS calendar\n       RIGHT JOIN combined AS comb ON calendar.date = comb.date\n     )\nSELECT * FROM combined_and_calendar;\n\n\n\n--SET FLAGS Processed True\nUPDATE edw.etl_call_center_zendesk\nSET flag_processed = TRUE\nWHERE flag_processed IS FALSE;\n\nUPDATE edw.etl_call_center_talkdesk\nSET flag_processed = TRUE\nWHERE flag_processed IS FALSE;\n\nUPDATE edw.etl_call_center_tymeshift\nSET flag_processed = TRUE\nWHERE flag_processed IS FALSE;\n\n\n\n\n\nINSERT INTO edw.${Calendar_table}(date, total)\nSELECT date, total\nFROM edw.etl_call_center_tmp_calendar\nWHERE NOT(date IN (SELECT date FROM edw.${Calendar_table}));\n\n\n\nUPDATE edw.${Calendar_table}\nSET total = i.total\nFROM (\n       SELECT date, total\n       FROM edw.etl_call_center_tmp_calendar) i\nWHERE edw.${Calendar_table}.date = i.date;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964011":{"id":2964011,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-1168,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964028],"outputSuccessConnectorIDs":[2964003],"outputFailureConnectorIDs":[2964016],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"CREATE tmp tables"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"-- tmp Calendar\nCREATE TABLE IF NOT EXISTS edw.etl_call_center_tmp_calendar(\n                                   id bigint identity(1, 1),\n                                   date date,\n                                   total numeric(38,8));\n\nTRUNCATE edw.etl_call_center_tmp_calendar;\n\n\n--tmp user_date_value table\nCREATE TABLE IF NOT EXISTS edw.etl_call_center_tmp_user_date_value(\n                                  id bigint identity(1, 1),\n                                  User_id bigint not null,\n                                  Date timestamp with time zone,\n                                  Value numeric(38,8));\n\nTRUNCATE edw.etl_call_center_tmp_user_date_value;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964012":{"id":2964012,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":-1785670938,"x":-1280,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964027],"outputSuccessConnectorIDs":[2964028],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Begin 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964013":{"id":2964013,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-544,"y":-64,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DROP"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop table ${Pnl_schema}.${Target_table};\ndrop table ${Pnl_schema}.${Calendar_table};\n--truncate table ${Pnl_schema}.${Consolidated_table}\n\n--delete from ${Pnl_schema}.${Target_table}\n--where \n--date_part(year, cast(${Pnl_schema}.${Target_table}.date as date)) = date_part(year, current_date)\n--and\n--date_part(month, cast(${Pnl_schema}.${Target_table}.date as date)) = date_part(month, current_date) - 1;\n--delete from ${Pnl_schema}.${Consolidated_table}\n--where \n--date_part(year, cast(${Pnl_schema}.${Consolidated_table}.date as date)) = date_part(year, current_date)\n--and\n--date_part(month, cast(${Pnl_schema}.${Consolidated_table}.date as date)) = date_part(month, current_date) - 1"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964014":{"id":2964014,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":-1540940111,"x":-832,"y":-352,"width":32,"height":32,"inputConnectorIDs":[2964021],"outputSuccessConnectorIDs":[2964031],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Rollback 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964015":{"id":2964015,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":977205684,"x":-704,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964024],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Commit 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2964001":{"id":2964001,"sourceID":2964006,"targetID":2963955},"2964002":{"id":2964002,"sourceID":2964005,"targetID":2964004},"2964003":{"id":2964003,"sourceID":2964011,"targetID":2964010},"2964024":{"id":2964024,"sourceID":2964004,"targetID":2964015},"2964025":{"id":2964025,"sourceID":2964010,"targetID":2964005},"2964028":{"id":2964028,"sourceID":2964012,"targetID":2964011},"2964029":{"id":2964029,"sourceID":2964007,"targetID":2963952},"2964030":{"id":2964030,"sourceID":2963955,"targetID":2964007},"2964031":{"id":2964031,"sourceID":2964014,"targetID":2964008}},"failureConnectors":{"2964016":{"id":2964016,"sourceID":2964011,"targetID":2964009},"2964017":{"id":2964017,"sourceID":2964010,"targetID":2964009},"2964022":{"id":2964022,"sourceID":2964005,"targetID":2964009},"2964023":{"id":2964023,"sourceID":2964004,"targetID":2964009}},"unconditionalConnectors":{"2964020":{"id":2964020,"sourceID":2963958,"targetID":2964006},"2964021":{"id":2964021,"sourceID":2964009,"targetID":2964014}},"trueConnectors":{"2964027":{"id":2964027,"sourceID":2963952,"targetID":2964012}},"falseConnectors":{"2964026":{"id":2964026,"sourceID":2963952,"targetID":2963954}},"iterationConnectors":{},"noteConnectors":{},"notes":{"2963959":{"id":2963959,"x":-587,"y":-168,"width":87,"height":140,"text":"for development","colour":"d60000"}},"variables":{"Calendar_table":{"definition":{"name":"Calendar_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"etl_call_center_license_fee_calendar"},"Consolidated_table":{"definition":{"name":"Consolidated_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"consolidated_pnl"},"Exist_check_Calendar_table":{"definition":{"name":"Exist_check_Calendar_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"Exist_check_Target_table":{"definition":{"name":"Exist_check_Target_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"Item_name":{"definition":{"name":"Item_name","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"'Call Center License Fee'"},"Month_iterator":{"definition":{"name":"Month_iterator","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"Pnl_schema":{"definition":{"name":"Pnl_schema","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"edw"},"Target_table":{"definition":{"name":"Target_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":"call_center_license_fee"}},"grids":{}},"info":{"name":"pnl_exec_call_center_license_fee","description":"Script for updating item on regular basis","type":"ORCHESTRATION","tag":"5021b53c-7dae-49f5-a4ab-487d1c654122"}}