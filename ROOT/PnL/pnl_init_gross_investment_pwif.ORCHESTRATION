{"job":{"components":{"2962912":{"id":2962912,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-1296,"y":-160,"width":32,"height":32,"inputConnectorIDs":[2962905],"outputSuccessConnectorIDs":[2962935],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_init_view_accounts_termination_dates"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_init_view_accounts_termination_dates"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962913":{"id":2962913,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":-657,"y":-112,"width":32,"height":32,"inputConnectorIDs":[2962931],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Failure 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962914":{"id":2962914,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-816,"y":-240,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Execution"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"set timezone = 'America/Los_Angeles';\n\nINSERT INTO edw.${Target_table}(execution,\n                                      User_id,\n                                      Account_id,\n                                      Depository_id,\n                                      Investment_id,\n                            \t\t  Account_type,\n                            \t\t  Product_type,\n                                      --Account_product_type_id,\n                                      --Account_product_type_name,\n                                      --Account_type_id,\n                                      --Account_type_name,\n                                      --Account_investment_type_id,\n                                      --Account_investment_type_name,\n                                      Non_customer,\n                                      Category,\n                                      Item,\n                                      Date,\n                                      Value,\n                                      Value_type)\n\nWITH\n  prev_quart_date AS (\n    SELECT DATEADD(quarter, ${Quarter_iterator}, current_date) AS pd\n  ),\n\n  quarter_dates AS (\n    SELECT DATE_TRUNC(quarter, (DATEADD(quarter, ${Quarter_iterator}, current_date))) AS cur_quart_first,\n           DATE_TRUNC(quarter, DATEADD(quarter, -1, cur_quart_first)) AS prev_quart_first,\n           cur_quart_first - 1 AS prev_quart_last,\n           DATE_TRUNC(year, DATEADD(quarter, 4, cur_quart_first)) AS prev_quart_next_year,\n           DATEDIFF(day, DATE_TRUNC(year, prev_quart_first), prev_quart_next_year) AS days_in_year\n  ),\n\n  list_of_investments AS (\n    SELECT DISTINCT id::bigint AS Account_dep_inv_id\n    FROM web_db.investment\n    WHERE DATEDIFF(day, inception_date::date, (DATE_TRUNC(quarter, (DATEADD(quarter, ${Quarter_iterator}, current_date))) - 1)) >= 20\n    ORDER BY Account_dep_inv_id DESC\n  ),\n\n  date_gen AS (\n    SELECT DATEADD('day', i.i - 1, DATE_TRUNC(quarter, (DATE_TRUNC(quarter, DATEADD(quarter, -1, DATE_TRUNC(quarter, (DATEADD(quarter, ${Quarter_iterator}, current_date)))))) - 1)) AS Date\n    FROM (\n           SELECT ROW_NUMBER() OVER(ORDER BY SEQ4()) i\n           FROM TABLE (\n                GENERATOR(\n                        ROWCOUNT => 200\n                    )\n               )\n         ) i\n    WHERE DATE_TRUNC(quarter, Date) < DATE_TRUNC(quarter, (DATE_TRUNC(quarter, (DATEADD(quarter, ${Quarter_iterator}, current_date)))))\n  ),\n\n  investments_accounts_all_dates AS (\n    SELECT Account_dep_inv_id, qd.Date::date as iaad_dates FROM list_of_investments\n                                                    CROSS JOIN date_gen qd\n  ),\n\n  current_balances AS (\n    SELECT investment_id, current_value, last_updated::date cb_last_updated\n    FROM web_db.investment_position\n    WHERE DATE_TRUNC(quarter, last_updated) >= DATE_TRUNC(quarter, (DATE_TRUNC(quarter, DATEADD(quarter, -1, DATE_TRUNC(quarter, (DATEADD(quarter, ${Quarter_iterator}, current_date)))))) - 1)\n      AND DATE_TRUNC(quarter, last_updated) < (DATE_TRUNC(quarter, (DATEADD(quarter, ${Quarter_iterator}, current_date))))\n    ORDER BY investment_id, last_updated\n  ),\n\n  combined AS (\n    SELECT ad.Account_dep_inv_id, current_value, cb_last_updated as last_updated, ad.iaad_dates AS Date\n    FROM current_balances cb\n           RIGHT JOIN investments_accounts_all_dates ad\n                      ON ad.iaad_dates = cb.cb_last_updated AND ad.Account_dep_inv_id = cb.investment_id\n    ORDER BY ad.Account_dep_inv_id, ad.iaad_dates\n  ),\n\n  combined_with_filled_values AS (\n    SELECT Account_dep_inv_id,\n           (CASE\n              WHEN combined.current_value IS NULL\n                THEN FIRST_VALUE(combined.current_value::float)IGNORE NULLS OVER\n                (PARTITION BY Account_dep_inv_id ORDER BY Date DESC, Account_dep_inv_id DESC\n                ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)\n              WHEN combined.current_value IS NOT NULL\n                THEN combined.current_value::float END) AS cb_last,\n           Date\n    FROM combined ORDER BY Account_dep_inv_id, Date\n  ),\n     fee_history as (\n        SELECT TOP 1 fee_pct\n        ,INVESTMENT_ID,LAST_UPDATED\n        FROM web_db.investment_fee_history\n        WHERE last_updated::date <= (DATE_TRUNC(quarter, (DATEADD(quarter, ${Quarter_iterator}, current_date))) - 1)\n        ORDER BY LAST_UPDATED DESC\n     ),\n\n  investment_pwif_quart AS (\n    SELECT acc.id AS Account_Id,\n           inv.id AS Account_dep_inv_id,\n           acc.product_type AS Account_product_type,\n           acc.account_type_id AS Account_type_id,\n           inv.fund_id AS Investment_fund_id,\n           hist.fee_pct as fee_pct,\n           cb_last * hist.fee_pct AS total_fee,\n           c.Date\n\n    FROM combined_with_filled_values c\n    \t   INNER JOIN fee_history hist on hist.INVESTMENT_ID = c.Account_dep_inv_id\n           INNER JOIN web_db.investment inv ON inv.id = hist.INVESTMENT_ID\n           INNER JOIN web_db.account acc ON inv.account_id = acc.id\n           INNER JOIN edw.view_accounts_termination_dates atd ON atd.account_id = acc.id\n    WHERE\n      (atd.termination_date IS NULL\n        OR atd.termination_date::date > (DATE_TRUNC(quarter, (DATEADD(quarter, ${Quarter_iterator}, current_date))) - 1))\n      AND DATE_TRUNC(quarter, c.Date) = (DATE_TRUNC(quarter, DATEADD(quarter, -1, DATE_TRUNC(quarter, (DATEADD(quarter, ${Quarter_iterator}, current_date))))))\n  )\n\nSELECT\n      current_date() AS execution,\n      ua.user_id AS User_id,\n      q.Account_id AS Account_id,\n      NULL AS Depository_id,\n      q.Account_dep_inv_id AS Investment_id,\n      'Investment'::text AS Account_type,\n      (CASE\n         WHEN Account_type_id = 2 -- 'Individual'\n           AND q.Investment_fund_id = 1 -- 'Flagship'\n           THEN 'Flagship Individual'::text\n         WHEN Account_type_id = 2 -- 'Individual'\n           AND q.Investment_fund_id = 2 -- 'Redwood'\n           THEN 'Redwood Individual'::text\n         WHEN Account_type_id = 3 -- 'IRA'\n           AND q.Investment_fund_id = 1 -- 'Flagship'\n           THEN 'Flagship IRA'::text\n         WHEN Account_type_id = 3 -- 'IRA'\n           AND q.Investment_fund_id = 2 -- 'Redwood'\n           THEN 'Redwood IRA'::text\n         ELSE ''::text\n        END) AS Product_type,\n--       q.Account_product_type AS Account_product_type_id,\n--       'Investment'::text AS Account_product_type_name,\n--       q.ACCOUNT_TYPE_ID AS Account_type_id,\n--       (CASE\n--          WHEN Account_type_id = 2 THEN 'Individual'::text\n--          WHEN Account_type_id = 3 THEN 'IRA'::text\n--          ELSE ''\n--         END) AS Account_type_name,\n--       q.Investment_fund_id AS Account_investment_type_id,\n--       (CASE\n--          WHEN Account_investment_type_id = 1 THEN 'Flagship'::text\n--          WHEN Account_investment_type_id = 2 THEN 'Redwood'::text\n--          ELSE ''\n--         END) AS Account_investment_type_name,\n      FALSE AS Non_customer,\n      'n/a'::text AS Category,\n      'Gross Investment PWIF'::text AS Item,\n      q.Date AS Date,\n      (CASE WHEN q.total_fee IS NULL THEN 0\n            ELSE q.total_fee / (DATEDIFF(day, DATE_TRUNC(year, DATE_TRUNC(quarter, DATEADD(quarter, -1, DATE_TRUNC(quarter, (DATEADD(quarter, ${Quarter_iterator}, current_date)))))), DATE_TRUNC(year, DATEADD(quarter, 4, DATE_TRUNC(quarter, (DATEADD(quarter, ${Quarter_iterator}, current_date))))))) END) AS Value,\n      'n/a'::text AS Value_type\n\nFROM investment_pwif_quart as q\n       INNER JOIN web_db.user_account ua ON q.ACCOUNT_ID = ua.account_id;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[2962901]},"2962915":{"id":2962915,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-1456,"y":-240,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2962905,2962910],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962916":{"id":2962916,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":-1540940111,"x":-752,"y":-112,"width":32,"height":32,"inputConnectorIDs":[2962904],"outputSuccessConnectorIDs":[2962931],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Rollback 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962918":{"id":2962918,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-864,"y":-112,"width":32,"height":32,"inputConnectorIDs":[2962906,2962907],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2962904],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962919":{"id":2962919,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":977205684,"x":-720,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2962908],"outputSuccessConnectorIDs":[2962932],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Commit 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962933":{"id":2962933,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-816,"y":-368,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Execution old"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"set timezone to 'America/Los_Angeles';\n\nINSERT INTO edw.${Target_table}(execution,\n                                      User_id,\n                                      Account_id,\n                                      Depository_id,\n                                      Investment_id,\n                            \t\t  Account_type,\n                            \t\t  Product_type,\n                                      --Account_product_type_id,\n                                      --Account_product_type_name,\n                                      --Account_type_id,\n                                      --Account_type_name,\n                                      --Account_investment_type_id,\n                                      --Account_investment_type_name,\n                                      Non_customer,\n                                      Category,\n                                      Item,\n                                      Date,\n                                      Value,\n                                      Value_type)\n\nWITH\n  prev_quart_date AS (\n    SELECT DATEADD(quarter, ${Quarter_iterator}, current_date) AS pd\n  ),\n\n  quarter_dates AS (\n    SELECT DATE_TRUNC('quarter', (SELECT pd FROM prev_quart_date)) AS cur_quart_first,\n           DATE_TRUNC('quarter', DATE_ADD('quarter', -1, cur_quart_first)) AS prev_quart_first,\n           cur_quart_first - 1 AS prev_quart_last,\n           DATE_TRUNC('year', DATE_ADD('quarter', 4, cur_quart_first)) AS prev_quart_next_year,\n           DATEDIFF(day, DATE_TRUNC('year', prev_quart_first), prev_quart_next_year) AS days_in_year\n  ),\n\n  list_of_investments AS (\n    SELECT DISTINCT id::bigint AS Account_dep_inv_id\n    FROM web_db.investment\n    WHERE DATEDIFF(day, inception_date::date, (SELECT prev_quart_last FROM quarter_dates)) >= 20\n    ORDER BY id DESC\n  ),\n\n  date_gen AS (\n    SELECT DATE_ADD('day', i.i - 1, DATE_TRUNC('quarter', (SELECT prev_quart_first FROM quarter_dates) - 1)) AS Date\n    FROM (\n           SELECT ROW_NUMBER() OVER() i\n           FROM stl_scan\n           LIMIT 200\n         ) i\n    WHERE DATE_TRUNC('quarter', Date) < DATE_TRUNC('quarter', (SELECT cur_quart_first FROM quarter_dates))\n  ),\n\n  investments_accounts_all_dates AS (\n    SELECT Account_dep_inv_id, qd.Date::date FROM list_of_investments\n                                                    CROSS JOIN date_gen qd\n  ),\n\n  current_balances AS (\n    SELECT investment_id, current_value, last_updated::date\n    FROM web_db.investment_position\n    WHERE DATE_TRUNC('quarter', last_updated) >= DATE_TRUNC('quarter', (SELECT prev_quart_first FROM quarter_dates) - 1)\n      AND DATE_TRUNC('quarter', last_updated) < (SELECT cur_quart_first FROM quarter_dates)\n    ORDER BY investment_id, last_updated\n  ),\n\n  combined AS (\n    SELECT ad.Account_dep_inv_id, current_value, last_updated, ad.date AS Date\n    FROM current_balances cb\n           RIGHT JOIN investments_accounts_all_dates ad\n                      ON ad.date = cb.last_updated AND ad.Account_dep_inv_id = cb.investment_id\n    ORDER BY ad.Account_dep_inv_id, ad.date\n  ),\n\n  combined_with_filled_values AS (\n    SELECT Account_dep_inv_id,\n           (CASE\n              WHEN combined.current_value IS NULL\n                THEN FIRST_VALUE(combined.current_value::float IGNORE NULLS) OVER\n                (PARTITION BY Account_dep_inv_id ORDER BY Date DESC, Account_dep_inv_id DESC\n                ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)\n              WHEN combined.current_value IS NOT NULL\n                THEN combined.current_value::float END) AS cb_last,\n           Date\n    FROM combined ORDER BY Account_dep_inv_id, Date\n  ),\n\n  investment_pwif_quart AS (\n    SELECT acc.id AS Account_Id,\n           inv.id AS Account_dep_inv_id,\n           acc.product_type AS Account_product_type,\n           acc.account_type_id AS Account_type_id,\n           inv.fund_id AS Investment_fund_id,\n           (SELECT TOP 1 fee_pct\n            FROM web_db.investment_fee_history as hist\n            WHERE hist.investment_id = Account_dep_inv_id\n              AND hist.last_updated::date <= (SELECT prev_quart_last FROM quarter_dates)\n            ORDER BY hist.last_updated DESC) AS fee_pct,\n           cb_last * fee_pct AS total_fee,\n           c.Date\n\n    FROM combined_with_filled_values c\n           INNER JOIN web_db.investment inv ON inv.id = c.Account_dep_inv_id\n           INNER JOIN web_db.account acc ON inv.account_id = acc.id\n           INNER JOIN edw.view_accounts_termination_dates atd ON atd.account_id = acc.id\n    WHERE\n      (atd.termination_date IS NULL\n        OR atd.termination_date::date > (SELECT prev_quart_last FROM quarter_dates))\n      AND DATE_TRUNC('quarter', c.Date) = (SELECT prev_quart_first FROM quarter_dates)\n  )\n\nSELECT\n      getdate() AS execution,\n      ua.user_id AS User_id,\n      q.Account_id AS Account_id,\n      NULL AS Depository_id,\n      q.Account_dep_inv_id AS Investment_id,\n      'Investment'::text AS Account_type,\n      (CASE\n         WHEN Account_type_id = 2 -- 'Individual'\n           AND q.Investment_fund_id = 1 -- 'Flagship'\n           THEN 'Flagship Individual'::text\n         WHEN Account_type_id = 2 -- 'Individual'\n           AND q.Investment_fund_id = 2 -- 'Redwood'\n           THEN 'Redwood Individual'::text\n         WHEN Account_type_id = 3 -- 'IRA'\n           AND q.Investment_fund_id = 1 -- 'Flagship'\n           THEN 'Flagship IRA'::text\n         WHEN Account_type_id = 3 -- 'IRA'\n           AND q.Investment_fund_id = 2 -- 'Redwood'\n           THEN 'Redwood IRA'::text\n         ELSE ''::text\n        END) AS Product_type,\n--       q.Account_product_type AS Account_product_type_id,\n--       'Investment'::text AS Account_product_type_name,\n--       q.ACCOUNT_TYPE_ID AS Account_type_id,\n--       (CASE\n--          WHEN Account_type_id = 2 THEN 'Individual'::text\n--          WHEN Account_type_id = 3 THEN 'IRA'::text\n--          ELSE ''\n--         END) AS Account_type_name,\n--       q.Investment_fund_id AS Account_investment_type_id,\n--       (CASE\n--          WHEN Account_investment_type_id = 1 THEN 'Flagship'::text\n--          WHEN Account_investment_type_id = 2 THEN 'Redwood'::text\n--          ELSE ''\n--         END) AS Account_investment_type_name,\n      FALSE AS Non_customer,\n      'n/a'::text AS Category,\n      'Gross Investment PWIF'::text AS Item,\n      q.Date AS Date,\n      (CASE WHEN q.total_fee IS NULL THEN 0\n            ELSE q.total_fee / (SELECT days_in_year FROM quarter_dates) END) AS Value,\n      'n/a'::text AS Value_type\n\nFROM investment_pwif_quart as q\n       INNER JOIN web_db.user_account ua ON q.ACCOUNT_ID = ua.account_id;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962936":{"id":2962936,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1088,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2962911],"outputSuccessConnectorIDs":[2962934],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Quarters"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nimport datetime\nimport math\n\nnow = datetime.datetime.today() \nstart = datetime.datetime(2015, 1, 1)\n\ndelta = now - start\n\nquarterslist = []\n\nquartq = math.trunc(float((start.year - now.year) * 12 + start.month - now.month)/3)\n\nprint(quartq)\n\ni = quartq + 1\nwhile i < 0:\n quarterslist.append([i])\n i = i + 1\ncontext.updateGridVariable('Quarters', quarterslist)\nprint Quarters\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962937":{"id":2962937,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":-1785670938,"x":-1008,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2962934],"outputSuccessConnectorIDs":[2962928],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Begin 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962938":{"id":2962938,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-432,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2962932],"outputSuccessConnectorIDs":[2962930],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_exec_gross_investment_pwif"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_exec_gross_investment_pwif"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962939":{"id":2962939,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"ITERATE","implementationID":-424773870,"x":-816,"y":-272,"width":32,"height":16,"inputConnectorIDs":[2962929],"outputSuccessConnectorIDs":[2962908],"outputFailureConnectorIDs":[2962907],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Grid Iterator 0"}}}},"visible":true},"3":{"slot":3,"name":"Grid Variable","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Quarters"}}}},"visible":true},"4":{"slot":4,"name":"Grid Variable Mapping","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Quarter"},"2":{"slot":2,"type":"STRING","value":"Quarter_iterator"}}}},"visible":true},"5":{"slot":5,"name":"Break on Failure","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Yes"}}}},"visible":true},"6":{"slot":6,"name":"Concurrency","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Sequential"}}}},"visible":true},"999":{"slot":999,"name":"Record Values In Task History","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Yes"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[2962901],"inputIterationConnectorIDs":[]},"2962940":{"id":2962940,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-912,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2962928],"outputSuccessConnectorIDs":[2962929],"outputFailureConnectorIDs":[2962906],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Create\\Truncate"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"CREATE TABLE IF NOT EXISTS edw.${Target_table}(\n\t\t\t\t\t\t\t\t\t\t\t\t\tid bigint identity(1, 1),\n                                                    execution timestamp with time zone,\n                                                    User_id bigint not null,\n                                                    Account_id bigint not null,\n                                                    Depository_id bigint,\n                                                    Investment_id bigint,\n    \t\t\t\t\t\t\t\t\t\t\t \tAccount_type varchar(50),\n    \t\t\t\t\t\t\t\t\t\t \t\tProduct_type  varchar(50),\n                                                    --Account_product_type_id int, -- account.product_type\n                                                    --Account_product_type_name varchar(50), -- 1 = Investment, 2 = Depository\n                                                    --Account_product_id int, --<depository.product_id>\n                                                    --Account_product_name varchar(50), --3 = Summit , 4 = Spend, 5 = Save\n                                                    --Account_type_id int, --<account.account_type_id>\n                                                    --Account_type_name varchar(50), -- 2 = Individual, 3 = IRA\n                                                    --Account_investment_type_id int, -- <investment.fund_id>\n                                                    --Account_investment_type_name varchar(50), -- 1 = Flagship, 2 = Redwood\n                                                    Non_customer boolean not null, -- True for ZenDesk/False for others\n                                                    Category varchar(50) not null,\n                                                    Item varchar(50) not null,\n                                                    Date timestamp with time zone,\n                                                    Value numeric(38,8) not null,\n                                                    Value_type varchar(50),\n                                                    primary key(id));\n                                                \nTRUNCATE edw.${Target_table}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962941":{"id":2962941,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-432,"y":-144,"width":32,"height":32,"inputConnectorIDs":[2962930],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"TMP"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"spashchenko.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"ashumakov.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"vfigurkin.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"opetrova.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"idudkin.ctr\";\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962942":{"id":2962942,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":235671163,"x":-1168,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2962909,2962935],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2962911],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962943":{"id":2962943,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-1296,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2962910],"outputSuccessConnectorIDs":[2962909],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_init_view_unique_user_accounts"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_init_view_unique_user_accounts"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2962908":{"id":2962908,"sourceID":2962939,"targetID":2962919},"2962909":{"id":2962909,"sourceID":2962943,"targetID":2962942},"2962928":{"id":2962928,"sourceID":2962937,"targetID":2962940},"2962929":{"id":2962929,"sourceID":2962940,"targetID":2962939},"2962930":{"id":2962930,"sourceID":2962938,"targetID":2962941},"2962931":{"id":2962931,"sourceID":2962916,"targetID":2962913},"2962932":{"id":2962932,"sourceID":2962919,"targetID":2962938},"2962934":{"id":2962934,"sourceID":2962936,"targetID":2962937},"2962935":{"id":2962935,"sourceID":2962912,"targetID":2962942}},"failureConnectors":{"2962906":{"id":2962906,"sourceID":2962940,"targetID":2962918},"2962907":{"id":2962907,"sourceID":2962939,"targetID":2962918}},"unconditionalConnectors":{"2962904":{"id":2962904,"sourceID":2962918,"targetID":2962916},"2962905":{"id":2962905,"sourceID":2962915,"targetID":2962912},"2962910":{"id":2962910,"sourceID":2962915,"targetID":2962943},"2962911":{"id":2962911,"sourceID":2962942,"targetID":2962936}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{"2962901":{"id":2962901,"sourceID":2962939,"targetID":2962914}},"noteConnectors":{},"notes":{"2962917":{"id":2962917,"x":-480,"y":-184,"width":98,"height":86,"text":"for development","colour":"d60000"}},"variables":{"Consolidated_table":{"definition":{"name":"Consolidated_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"consolidated_pnl"},"Item_name":{"definition":{"name":"Item_name","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"'Gross Investment PWIF'"},"Pnl_schema":{"definition":{"name":"Pnl_schema","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"edw"},"Quarter_iterator":{"definition":{"name":"Quarter_iterator","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"-5"},"Target_table":{"definition":{"name":"Target_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"gross_investment_pwif"}},"grids":{"Quarters":{"definition":{"name":"Quarters","scope":"BRANCH","definitions":[{"name":"Quarter","type":"TEXT"}],"description":"","visibility":"PUBLIC"},"values":[]}}},"info":{"name":"pnl_init_gross_investment_pwif","description":"Initialization of Item in PnL Report schema and load all data incl historical","type":"ORCHESTRATION","tag":"8e93c685-58e9-4af5-815b-22d41bbb3a43"}}