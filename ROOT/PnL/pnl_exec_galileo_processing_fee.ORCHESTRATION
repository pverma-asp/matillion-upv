{"job":{"components":{"2964112":{"id":2964112,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":977205684,"x":-640,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964154],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Commit 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964113":{"id":2964113,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":-1785670938,"x":-1168,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964152],"outputSuccessConnectorIDs":[2964196],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Begin 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964114":{"id":2964114,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-928,"y":-368,"width":32,"height":32,"inputConnectorIDs":[2964173,2964194,2964195],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2964192],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964115":{"id":2964115,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":-1540940111,"x":-736,"y":-368,"width":32,"height":32,"inputConnectorIDs":[2964192],"outputSuccessConnectorIDs":[2964197],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Rollback 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964116":{"id":2964116,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1520,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964193],"outputSuccessConnectorIDs":[2964200],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Target table check"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\ncursor = context.cursor()\ntry:\n\tcursor.execute('select convert (integer, (select exists (select * from edw.'+Target_table+' limit 1)))')\n\tresult = cursor.fetchone()[0]\n\tcontext.updateVariable('Exist_check_Target_table', result)\nexcept:\n  \tcontext.updateVariable('Exist_check_Target_table', '0')\n    \nprint ('Variable value: '+str(Exist_check_Target_table))"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964117":{"id":2964117,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-1424,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964200],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[2964199],"outputFalseConnectorIDs":[2964198],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"If"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Exist_check_Target_table"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"1"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964118":{"id":2964118,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-544,"y":-64,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DROP"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop table ${Pnl_schema}.${Target_table};\n--truncate table ${Pnl_schema}.${Consolidated_table}\n\n--delete from ${Pnl_schema}.etl_${Target_table} where id ='2'\n--where \n--date_part(year, cast(${Pnl_schema}.${Target_table}.date as date)) = date_part(year, current_date)\n--and\n--date_part(month, cast(${Pnl_schema}.${Target_table}.date as date)) = date_part(month, current_date) - 1;\n--delete from ${Pnl_schema}.${Consolidated_table}\n--where \n--date_part(year, cast(${Pnl_schema}.${Consolidated_table}.date as date)) = date_part(year, current_date)\n--and\n--date_part(month, cast(${Pnl_schema}.${Consolidated_table}.date as date)) = date_part(month, current_date) - 1"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964119":{"id":2964119,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-1296,"y":-144,"width":32,"height":32,"inputConnectorIDs":[2964198],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_init_galileo_processing_fee"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_init_galileo_processing_fee"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964122":{"id":2964122,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-1040,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964196],"outputSuccessConnectorIDs":[2964151],"outputFailureConnectorIDs":[2964194],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Delete -1 month"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"delete from edw.${Target_table}\nwhere \ndate_part(year, cast(edw.${Target_table}.date as date)) = date_part(year, dateadd(month, -1, current_date))\nand\ndate_part(month, cast(edw.${Target_table}.date as date)) = date_part(month, dateadd(month, -1, current_date))"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964123":{"id":2964123,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-832,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964155],"outputSuccessConnectorIDs":[2964154],"outputFailureConnectorIDs":[2964173],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Consolidated"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"-- Delete existing data\nDELETE FROM edw.${Consolidated_table} \nWHERE Item = ${Item_name} \n\tand\ndate_part(year, cast(edw.${Consolidated_table}.date as date)) = date_part(year, dateadd(month, -1, current_date))\nand\ndate_part(month, cast(edw.${Consolidated_table}.date as date)) = date_part(month, dateadd(month, -1, current_date));\n\n-- Insert updated data\n\nINSERT INTO edw.${Consolidated_table}(execution,\n                                 User_id,\n                                 Account_id,\n                                 Depository_id,\n                                 Investment_id,\n                                 Account_type,\n                                 Product_type,\n                                 --Account_product_type_id,\n                                 --Account_product_type_name,\n                                 --Account_investment_type_id,\n                                 --Account_investment_type_name,\n                                 --Account_type_id,\n                                 --Account_type_name,\n                                 --Account_product_id,\n                                 --Account_product_name,\n                                 Non_customer,\n                                 Category,\n                                 Item,\n                                 Value_type,\n                                 Value,\n                                 Date)\n(SELECT execution,\n       User_id,\n       Account_id,\n       Depository_id,\n       Investment_id,\n       Account_type,\n       Product_type,\n       --Account_product_type_id,\n       --Account_product_type_name,\n       --Account_investment_type_id,\n       --Account_investment_type_name,\n       --Account_type_id,\n       --Account_type_name,\n       --Account_product_id,\n       --Account_product_name,\n       Non_customer,\n       Category,\n       Item,\n       Value_type,\n       Value,\n       Date\nFROM edw.${Target_table}\nwhere\t\ndate_part(year, cast(edw.${Target_table}.date as date)) = date_part(year, dateadd(month, -1, current_date))\nand\ndate_part(month, cast(edw.${Target_table}.date as date)) = date_part(month, dateadd(month, -1, current_date)));"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964153":{"id":2964153,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-544,"y":-128,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GRANT"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"spashchenko.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"ashumakov.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"vfigurkin.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"opetrova.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"idudkin.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Consolidated_table} TO \"spashchenko.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Consolidated_table} TO \"ashumakov.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Consolidated_table} TO \"vfigurkin.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Consolidated_table} TO \"opetrova.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Consolidated_table} TO \"idudkin.ctr\";\nGRANT SELECT ON ${Pnl_schema}.all_balances_with_transactions_count TO \"spashchenko.ctr\";\nGRANT SELECT ON ${Pnl_schema}.all_balances_with_transactions_count TO \"ashumakov.ctr\";\nGRANT SELECT ON ${Pnl_schema}.all_balances_with_transactions_count TO \"vfigurkin.ctr\";\nGRANT SELECT ON ${Pnl_schema}.all_balances_with_transactions_count TO \"opetrova.ctr\";\nGRANT SELECT ON ${Pnl_schema}.all_balances_with_transactions_count TO \"idudkin.ctr\";\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964156":{"id":2964156,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-1296,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964199],"outputSuccessConnectorIDs":[2964152],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_etl_email"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_etl_email"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964157":{"id":2964157,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":-656,"y":-368,"width":32,"height":32,"inputConnectorIDs":[2964197],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Failure 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964158":{"id":2964158,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-928,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2964151],"outputSuccessConnectorIDs":[2964155],"outputFailureConnectorIDs":[2964195],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Execution -1 month"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SET timezone TO 'America/Los_Angeles';\n\nINSERT INTO edw.${Target_table}(execution,\n                                       User_id,\n                                       Account_id,\n                                       Depository_id,\n                                       Investment_id,\n                                       Account_type,\n                                       Product_type,\n                                       Non_customer,\n                                       Category,\n                                       Item,\n                                       Date,\n                                       Value,\n                                       Value_type)\n\nWITH\n  month_dates AS (\n    SELECT DATE_TRUNC('month', DATEADD(month, -1, current_date))::date AS month_first_day,\n           LAST_DAY(month_first_day) AS month_last_day,\n           EXTRACT(day from month_last_day) AS days_in_month\n  ),\n\n  costs AS (\n    SELECT active_savings_account, active_account_on_file, inactive_account_on_file, additional_transactions, account_set_up,\n           subtotal - (active_savings_account + active_account_on_file + inactive_account_on_file + additional_transactions + account_set_up)\n             AS non_account_creation\n    FROM edw.etl_galileo_processing_fee gpf\n    WHERE processing_month = (SELECT month_first_day FROM month_dates)\n  ),\n\n  all_balances AS (\n    SELECT galileo_account_id::bigint AS Galileo_account_id, file_date::DATE, created_date,\n           ROW_NUMBER() OVER (PARTITION BY galileo_account_id::bigint ORDER BY file_date::date DESC) AS num,\n           (CASE WHEN current_balance_sign != '-' THEN 1 ELSE -1 END) * current_balance::numeric(38,4) AS current_balance\n    FROM rdl.raw_galileo_customer_master_data\n  ),\n\n  all_balances_last_value AS (\n    SELECT Galileo_account_id, current_balance, file_date::DATE,\n           to_date(created_date, 'MMDDYYYY') AS created_date\n    FROM all_balances ab\n    WHERE num = 1\n  ),\n\n  fitting_accounts AS (\n    SELECT gpt.galileo_account_id::bigint AS Galileo_account_id,\n           MAX(dep.id) AS depository_id\n    FROM web_db.galileo_posted_transaction gpt\n           JOIN web_db.posted_transaction pt ON gpt.posted_transaction_id = pt.id\n           JOIN web_db.depository dep ON pt.depository_id = dep.id\n           JOIN edw.view_accounts_termination_dates atd ON dep.account_id = atd.account_id\n    WHERE (atd.termination_date IS NULL OR atd.termination_date > (SELECT month_first_day FROM month_dates))\n    GROUP BY gpt.galileo_account_id\n  ),\n\n  transaction_counts AS (\n    SELECT galileo_account_id::bigint AS Galileo_account_id,\n           COUNT(CASE WHEN\n                          DATE_TRUNC('month', pt.post_date) = (SELECT month_first_day FROM month_dates)\n                        THEN 1 END) AS num_of_trans\n    FROM web_db.galileo_posted_transaction gpt\n           INNER JOIN web_db.posted_transaction pt ON gpt.posted_transaction_id = pt.id\n    GROUP BY Galileo_account_id\n  ),\n\n  galileo_fee_monthly_by_ga AS (\n    SELECT ablv.galileo_account_id, depository_id, dep.account_id, dep.product_id, ablv.created_date, atd.termination_date,\n           (SELECT active_savings_account FROM costs) * ratio_to_report\n             (CASE WHEN dep.product_id = 5 AND (tc.num_of_trans > 0 OR ablv.current_balance > 0) THEN 1 END) OVER () AS active_savings_account,\n           (SELECT active_account_on_file FROM costs) * ratio_to_report\n             (CASE WHEN dep.product_id = 4 AND (tc.num_of_trans > 0 OR ablv.current_balance > 0) THEN 1 END) OVER () AS active_account_on_file,\n           (SELECT inactive_account_on_file FROM costs) * ratio_to_report\n             (CASE WHEN tc.num_of_trans = 0 AND ablv.current_balance <= 0 THEN 1 END) OVER () AS inactive_account_on_file,\n           (SELECT additional_transactions FROM costs) * ratio_to_report\n             (CASE WHEN tc.num_of_trans > 15 THEN 1 END) OVER () AS additional_transactions,\n           (SELECT account_set_up FROM costs) * ratio_to_report\n             (CASE WHEN date_trunc('month', ablv.created_date) = (SELECT month_first_day FROM month_dates) THEN 1 END) OVER () AS account_set_up,\n           (SELECT non_account_creation FROM costs) * ratio_to_report(1) OVER () AS non_account_creation\n    FROM all_balances_last_value ablv\n           JOIN fitting_accounts fa ON ablv.Galileo_account_id = fa.Galileo_account_id\n           JOIN web_db.depository dep ON dep.id = fa.depository_id\n           JOIN edw.view_accounts_termination_dates atd ON dep.account_id = atd.account_id\n           JOIN transaction_counts tc ON tc.Galileo_account_id = fa.Galileo_account_id\n    WHERE dep.product_id IN (4, 5)\n      AND ablv.created_date <= (SELECT month_last_day FROM month_dates)\n      AND (atd.termination_date IS NULL\n      OR (atd.termination_date::date >= (SELECT month_first_day FROM month_dates)\n        AND ablv.created_date <= atd.termination_date))\n  ),\n\n  galileo_fee_monthly AS (\n    SELECT depository_id, account_id, product_id, created_date, termination_date,\n           SUM(coalesce(non_account_creation, 0)\n             + coalesce(account_set_up, 0)\n             + coalesce(active_account_on_file, 0)\n             + coalesce(inactive_account_on_file, 0)\n             + coalesce(active_savings_account, 0)\n             + coalesce(additional_transactions, 0)\n             ) AS monthly_fee\n    FROM galileo_fee_monthly_by_ga\n    GROUP BY depository_id, account_id, product_id, created_date, termination_date\n  ),\n\n  date_gen AS (\n    SELECT DATE_ADD('day', i.i - 1, (SELECT month_first_day FROM month_dates)) AS DATE\n    FROM (\n           SELECT ROW_NUMBER() OVER() i\n           FROM stl_scan\n           LIMIT 31\n         ) i\n    WHERE DATE_TRUNC('month', Date) = (SELECT month_first_day FROM month_dates)\n  ),\n\n  galileo_fee_daily AS (\n    SELECT depository_id, account_id, product_id, md.Date,\n           monthly_fee * ratio_to_report\n             (CASE WHEN md.date >= created_date AND (termination_date IS NULL OR md.date <= termination_date)\n                     THEN 1 ELSE 0 END) OVER (PARTITION BY depository_id) as fee\n    FROM galileo_fee_monthly gfm\n           CROSS JOIN date_gen md\n  )\n\nSELECT getdate() AS execution,\n           uau.user_id as User_id,\n           uau.account_id as Account_id,\n           Depository_id,\n           NULL AS Investment_id,\n           'Depository'::text AS Account_type,\n           (CASE\n              WHEN product_id = 3 THEN 'Summit'::text\n              WHEN product_id = 4 THEN 'Spend'::text\n              WHEN product_id = 5 THEN 'Save'::text\n              ELSE ''::text\n             END) AS Product_type,\n           FALSE AS Non_customer,\n           'Indirect'::text AS Category,\n           'Galileo Processing Fee'::text AS Item,\n           Date,\n           (-1) * fee AS Value,\n           'Cost'::text AS Value_type\n    FROM galileo_fee_daily gfd\n           JOIN edw.view_unique_user_accounts uau ON uau.account_id = gfd.account_id"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964159":{"id":2964159,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-1600,"y":-240,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2964193],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2964151":{"id":2964151,"sourceID":2964122,"targetID":2964158},"2964152":{"id":2964152,"sourceID":2964156,"targetID":2964113},"2964154":{"id":2964154,"sourceID":2964123,"targetID":2964112},"2964155":{"id":2964155,"sourceID":2964158,"targetID":2964123},"2964196":{"id":2964196,"sourceID":2964113,"targetID":2964122},"2964197":{"id":2964197,"sourceID":2964115,"targetID":2964157},"2964200":{"id":2964200,"sourceID":2964116,"targetID":2964117}},"failureConnectors":{"2964173":{"id":2964173,"sourceID":2964123,"targetID":2964114},"2964194":{"id":2964194,"sourceID":2964122,"targetID":2964114},"2964195":{"id":2964195,"sourceID":2964158,"targetID":2964114}},"unconditionalConnectors":{"2964192":{"id":2964192,"sourceID":2964114,"targetID":2964115},"2964193":{"id":2964193,"sourceID":2964159,"targetID":2964116}},"trueConnectors":{"2964199":{"id":2964199,"sourceID":2964117,"targetID":2964156}},"falseConnectors":{"2964198":{"id":2964198,"sourceID":2964117,"targetID":2964119}},"iterationConnectors":{},"noteConnectors":{},"notes":{"2964120":{"id":2964120,"x":-587,"y":-168,"width":87,"height":140,"text":"for development","colour":"d60000"}},"variables":{"Consolidated_table":{"definition":{"name":"Consolidated_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"consolidated_pnl"},"Exist_check_Target_table":{"definition":{"name":"Exist_check_Target_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"Item_name":{"definition":{"name":"Item_name","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"'Galileo Processing Fee'"},"Month_iterator":{"definition":{"name":"Month_iterator","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"Pnl_schema":{"definition":{"name":"Pnl_schema","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"edw"},"Target_table":{"definition":{"name":"Target_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":"galileo_processing_fee"}},"grids":{}},"info":{"name":"pnl_exec_galileo_processing_fee","description":"Script for updating item on regular basis","type":"ORCHESTRATION","tag":"7652c1a0-5d09-4288-8781-31bcd79e787d"}}