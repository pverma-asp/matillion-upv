{"job":{"components":{"2962880":{"id":2962880,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-960,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2962944],"outputSuccessConnectorIDs":[2962946],"outputFailureConnectorIDs":[2962920],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Delete -1 quarter"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"delete from edw.${Target_table}\nwhere \ndate_part(year, cast(edw.${Target_table}.date as date)) = date_part(year, dateadd(quarter, -1, current_date))\nand\ndate_part(quarter, cast(edw.${Target_table}.date as date)) = date_part(quarter, dateadd(quarter, -1, current_date))"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962881":{"id":2962881,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-544,"y":-128,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GRANT"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"GRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"spashchenko.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"ashumakov.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"vfigurkin.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"opetrova.ctr\";\nGRANT SELECT ON ${Pnl_schema}.${Target_table} TO \"idudkin.ctr\";\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962882":{"id":2962882,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":-1376,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2962926],"outputSuccessConnectorIDs":[2962947],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Target table check"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\ncursor = context.cursor()\ntry:\n\tcursor.execute('select cast(exists(select * from edw.'+Target_table+' limit 1) as integer)')\n\tresult = cursor.fetchone()[0]\n\tcontext.updateVariable('Exist_check_Target_table', result)\nexcept:\n  \tcontext.updateVariable('Exist_check_Target_table', '0')\n    \nprint ('Variable value: '+str(Exist_check_Target_table))"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962883":{"id":2962883,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"CONDITIONAL","executionHint":"FLOW","implementationID":-1357378929,"x":-1280,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2962947],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[2962924],"outputFalseConnectorIDs":[2962927],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"If"}}}},"visible":true},"2":{"slot":2,"name":"Mode","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Simple"}}}},"visible":true},"3":{"slot":3,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Exist_check_Target_table"},"2":{"slot":2,"type":"STRING","value":"Is"},"3":{"slot":3,"type":"STRING","value":"Equal to"},"4":{"slot":4,"type":"STRING","value":"1"}}}},"visible":true},"4":{"slot":4,"name":"Combine Conditions","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"And"}}}},"visible":true},"5":{"slot":5,"name":"Condition","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":""}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962886":{"id":2962886,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-848,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2962946],"outputSuccessConnectorIDs":[2962925],"outputFailureConnectorIDs":[2962923],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Execution -1 quarter"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"set timezone = 'America/Los_Angeles';\n\nINSERT INTO edw.${Target_table}(execution,\n                                      User_id,\n                                      Account_id,\n                                      Depository_id,\n                                      Investment_id,\n                                      Account_type,\n                            \t\t  Product_type,\n                                      --Account_product_type_id,\n                                      --Account_product_type_name,\n                                      --Account_type_id,\n                                      --Account_type_name,\n                                      --Account_investment_type_id,\n                                      --Account_investment_type_name,\n                                      Non_customer,\n                                      Category,\n                                      Item,\n                                      Date,\n                                      Value,\n                                      Value_type)\n\nWITH\n\n  quarter_dates AS (\n    SELECT DATE_TRUNC(quarter, current_date) AS cur_quart_first,\n           DATE_TRUNC(quarter, DATEADD(quarter, -1, cur_quart_first)) AS prev_quart_first,\n           cur_quart_first - 1 AS prev_quart_last,\n           DATE_TRUNC(year, DATEADD(quarter, 4, cur_quart_first)) AS prev_quart_next_year,\n           DATEDIFF(day, DATE_TRUNC(year, prev_quart_first), prev_quart_next_year) AS days_in_year\n  ),\n\n  list_of_investments AS (\n    SELECT DISTINCT id::bigint AS Account_dep_inv_id\n    FROM web_db.investment\n    WHERE DATEDIFF(day, inception_date::date, (DATE_TRUNC(quarter, current_date) - 1)) >= 20\n    ORDER BY Account_dep_inv_id DESC\n  ),\n\n  date_gen AS (\n    SELECT DATEADD('day', i.i - 1, DATE_TRUNC(quarter, (DATE_TRUNC(quarter, DATEADD(quarter, -1, DATE_TRUNC(quarter, current_date)))) - 1)) AS Date\n    FROM (\n           SELECT ROW_NUMBER() OVER(ORDER BY SEQ4()) i\n           FROM TABLE (\n                    GENERATOR(\n                            ROWCOUNT => 200\n                        )\n               )\n         ) i\n    WHERE DATE_TRUNC(quarter, Date) < (DATE_TRUNC(quarter, current_date))\n  ),\n\n  investments_accounts_all_dates AS (\n    SELECT Account_dep_inv_id, qd.Date::date as iaad_date FROM list_of_investments\n                                                    CROSS JOIN date_gen qd\n  ),\n\n  current_balances AS (\n    SELECT investment_id, current_value, last_updated::date as cb_last_updated\n    FROM web_db.investment_position\n    WHERE DATE_TRUNC(quarter, last_updated) >= DATE_TRUNC(quarter, (DATE_TRUNC(quarter, DATEADD(quarter, -1, DATE_TRUNC(quarter, current_date)))) - 1)\n      AND DATE_TRUNC(quarter, last_updated) < (DATE_TRUNC(quarter, current_date))\n    ORDER BY investment_id, last_updated\n  ),\n\n  combined AS (\n    SELECT ad.Account_dep_inv_id, current_value, cb_last_updated as last_updated, ad.iaad_date AS Date\n    FROM current_balances cb\n           RIGHT JOIN investments_accounts_all_dates ad\n                      ON ad.iaad_date = cb.cb_last_updated AND ad.Account_dep_inv_id = cb.investment_id\n    ORDER BY ad.Account_dep_inv_id, ad.iaad_date\n  ),\n\n  combined_with_filled_values AS (\n    SELECT Account_dep_inv_id,\n           (CASE\n              WHEN combined.current_value IS NULL\n                THEN FIRST_VALUE(combined.current_value::float IGNORE NULLS) OVER\n                (PARTITION BY Account_dep_inv_id ORDER BY Date DESC, Account_dep_inv_id DESC\n                ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)\n              WHEN combined.current_value IS NOT NULL\n                THEN combined.current_value::float END) AS cb_last,\n           Date\n    FROM combined ORDER BY Account_dep_inv_id, Date\n  ),\n     fee_hist as (\n         SELECT TOP 1 fee_pct,\n         INVESTMENT_ID\n            FROM web_db.investment_fee_history as hist\n            WHERE hist.last_updated::date <= (DATE_TRUNC(quarter, current_date) - 1)\n            ORDER BY hist.last_updated DESC\n     ),\n\n  investment_pwif_quart AS (\n    SELECT acc.id AS Account_Id,\n           inv.id AS Account_dep_inv_id,\n           acc.product_type AS Account_product_type,\n           acc.account_type_id AS Account_type_id,\n           inv.fund_id AS Investment_fund_id,\n           fh.fee_pct,\n           cb_last * fh.fee_pct AS total_fee,\n           c.Date\n\n    FROM combined_with_filled_values c\n           INNER JOIN fee_hist fh on fh.INVESTMENT_ID = c.Account_dep_inv_id\n           INNER JOIN web_db.investment inv ON inv.id = fh.INVESTMENT_ID\n           INNER JOIN web_db.account acc ON inv.account_id = acc.id\n           INNER JOIN edw.view_accounts_termination_dates atd ON atd.account_id = acc.id\n    WHERE\n      (atd.termination_date IS NULL\n        OR atd.termination_date::date > (DATE_TRUNC(quarter, current_date) - 1))\n      AND DATE_TRUNC(quarter, c.Date) = (DATE_TRUNC(quarter, DATEADD(quarter, -1, DATE_TRUNC(quarter, current_date))))\n  )\n\nSELECT current_date() AS execution,\n      ua.user_id AS User_id,\n      q.Account_id AS Account_id,\n      NULL AS Depository_id,\n      q.Account_dep_inv_id AS Investment_id,\n      'Investment'::text AS Account_type,\n      (CASE\n         WHEN Account_type_id = 2 -- 'Individual'\n           AND q.Investment_fund_id = 1 -- 'Flagship'\n           THEN 'Flagship Individual'::text\n         WHEN Account_type_id = 2 -- 'Individual'\n           AND q.Investment_fund_id = 2 -- 'Redwood'\n           THEN 'Redwood Individual'::text\n         WHEN Account_type_id = 3 -- 'IRA'\n           AND q.Investment_fund_id = 1 -- 'Flagship'\n           THEN 'Flagship IRA'::text\n         WHEN Account_type_id = 3 -- 'IRA'\n           AND q.Investment_fund_id = 2 -- 'Redwood'\n           THEN 'Redwood IRA'::text\n         ELSE ''::text\n        END) AS Product_type,\n\n--       q.Account_product_type AS Account_product_type_id,\n--       'Investment'::text AS Account_product_type_name,\n--       q.ACCOUNT_TYPE_ID AS Account_type_id,\n--       (CASE\n--          WHEN Account_type_id = 2 THEN 'Individual'::text\n--          WHEN Account_type_id = 3 THEN 'IRA'::text\n--          ELSE ''\n--         END) AS Account_type_name,\n--       q.Investment_fund_id AS Account_investment_type_id,\n--       (CASE\n--          WHEN Account_investment_type_id = 1 THEN 'Flagship'::text\n--          WHEN Account_investment_type_id = 2 THEN 'Redwood'::text\n--          ELSE ''\n--         END) AS Account_investment_type_name,\n      FALSE AS Non_customer,\n      'n/a'::text AS Category,\n      'Gross Investment PWIF'::text AS Item,\n      q.Date AS Date,\n      (CASE WHEN q.total_fee IS NULL THEN 0\n            ELSE q.total_fee / (DATEDIFF(day, DATE_TRUNC(year, DATE_TRUNC(quarter, DATEADD(quarter, -1, DATE_TRUNC(quarter, current_date)))), DATE_TRUNC(year, DATEADD(quarter, 4, DATE_TRUNC(quarter, current_date))))) END) AS Value,\n      'n/a'::text AS Value_type\n\nFROM investment_pwif_quart as q\n       INNER JOIN web_db.user_account ua ON q.ACCOUNT_ID = ua.account_id;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962887":{"id":2962887,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-1472,"y":-240,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2962926],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962896":{"id":2962896,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":-1785670938,"x":-1072,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2962924],"outputSuccessConnectorIDs":[2962944],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Begin 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962897":{"id":2962897,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-544,"y":-64,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"DROP"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop table ${Pnl_schema}.${Target_table};\n\n\n--delete from ${Pnl_schema}.${Target_table}\n--where \n--date_part(year, cast(${Pnl_schema}.${Target_table}.date as date)) = date_part(year, current_date)\n--and\n--date_part(month, cast(${Pnl_schema}.${Target_table}.date as date)) = date_part(month, current_date) - 1;\n--delete from ${Pnl_schema}.${Consolidated_table}\n--where \n--date_part(year, cast(${Pnl_schema}.${Consolidated_table}.date as date)) = date_part(year, current_date)\n--and\n--date_part(month, cast(${Pnl_schema}.${Consolidated_table}.date as date)) = date_part(month, current_date) - 1"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"DISABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962898":{"id":2962898,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":-1540940111,"x":-736,"y":-368,"width":32,"height":32,"inputConnectorIDs":[2962921],"outputSuccessConnectorIDs":[2962945],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Rollback 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962899":{"id":2962899,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSACTION","implementationID":977205684,"x":-640,"y":-240,"width":32,"height":32,"inputConnectorIDs":[2962925],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Commit 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962900":{"id":2962900,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"TRANSFORM","implementationID":1785813072,"x":-1152,"y":-160,"width":32,"height":32,"inputConnectorIDs":[2962927],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_init_gross_investment_pwif"}}}},"visible":true},"2":{"slot":2,"name":"Orchestration Job","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"pnl_init_gross_investment_pwif"}}}},"visible":true},"3":{"slot":3,"name":"","elements":{},"visible":false},"4":{"slot":4,"name":"Set Scalar Variables","elements":{},"visible":true},"5":{"slot":5,"name":"Set Grid Variables","elements":{},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962948":{"id":2962948,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":-656,"y":-368,"width":32,"height":32,"inputConnectorIDs":[2962945],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"End Failure 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962949":{"id":2962949,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-848,"y":-320,"width":32,"height":32,"inputConnectorIDs":[2962920,2962923],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2962921],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2962950":{"id":2962950,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-848,"y":-144,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Execution -1 quarter old"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"set timezone to 'America/Los_Angeles';\n\nINSERT INTO edw.${Target_table}(execution,\n                                      User_id,\n                                      Account_id,\n                                      Depository_id,\n                                      Investment_id,\n                                      Account_type,\n                            \t\t  Product_type,\n                                      --Account_product_type_id,\n                                      --Account_product_type_name,\n                                      --Account_type_id,\n                                      --Account_type_name,\n                                      --Account_investment_type_id,\n                                      --Account_investment_type_name,\n                                      Non_customer,\n                                      Category,\n                                      Item,\n                                      Date,\n                                      Value,\n                                      Value_type)\n\nWITH\n\n  quarter_dates AS (\n    SELECT DATE_TRUNC('quarter', current_date) AS cur_quart_first,\n           DATE_TRUNC('quarter', DATE_ADD('quarter', -1, cur_quart_first)) AS prev_quart_first,\n           cur_quart_first - 1 AS prev_quart_last,\n           DATE_TRUNC('year', DATE_ADD('quarter', 4, cur_quart_first)) AS prev_quart_next_year,\n           DATEDIFF(day, DATE_TRUNC('year', prev_quart_first), prev_quart_next_year) AS days_in_year\n  ),\n\n  list_of_investments AS (\n    SELECT DISTINCT id::bigint AS Account_dep_inv_id\n    FROM web_db.investment\n    WHERE DATEDIFF(day, inception_date::date, (SELECT prev_quart_last FROM quarter_dates)) >= 20\n    ORDER BY id DESC\n  ),\n\n  date_gen AS (\n    SELECT DATE_ADD('day', i.i - 1, DATE_TRUNC('quarter', (SELECT prev_quart_first FROM quarter_dates) - 1)) AS Date\n    FROM (\n           SELECT ROW_NUMBER() OVER() i\n           FROM stl_scan\n           LIMIT 200\n         ) i\n    WHERE DATE_TRUNC('quarter', Date) < (SELECT cur_quart_first FROM quarter_dates)\n  ),\n\n  investments_accounts_all_dates AS (\n    SELECT Account_dep_inv_id, qd.Date::date FROM list_of_investments\n                                                    CROSS JOIN date_gen qd\n  ),\n\n  current_balances AS (\n    SELECT investment_id, current_value, last_updated::date\n    FROM web_db.investment_position\n    WHERE DATE_TRUNC('quarter', last_updated) >= DATE_TRUNC('quarter', (SELECT prev_quart_first FROM quarter_dates) - 1)\n      AND DATE_TRUNC('quarter', last_updated) < (SELECT cur_quart_first FROM quarter_dates)\n    ORDER BY investment_id, last_updated\n  ),\n\n  combined AS (\n    SELECT ad.Account_dep_inv_id, current_value, last_updated, ad.date AS Date\n    FROM current_balances cb\n           RIGHT JOIN investments_accounts_all_dates ad\n                      ON ad.date = cb.last_updated AND ad.Account_dep_inv_id = cb.investment_id\n    ORDER BY ad.Account_dep_inv_id, ad.date\n  ),\n\n  combined_with_filled_values AS (\n    SELECT Account_dep_inv_id,\n           (CASE\n              WHEN combined.current_value IS NULL\n                THEN FIRST_VALUE(combined.current_value::float IGNORE NULLS) OVER\n                (PARTITION BY Account_dep_inv_id ORDER BY Date DESC, Account_dep_inv_id DESC\n                ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)\n              WHEN combined.current_value IS NOT NULL\n                THEN combined.current_value::float END) AS cb_last,\n           Date\n    FROM combined ORDER BY Account_dep_inv_id, Date\n  ),\n\n  investment_pwif_quart AS (\n    SELECT acc.id AS Account_Id,\n           inv.id AS Account_dep_inv_id,\n           acc.product_type AS Account_product_type,\n           acc.account_type_id AS Account_type_id,\n           inv.fund_id AS Investment_fund_id,\n           (SELECT TOP 1 fee_pct\n            FROM web_db.investment_fee_history as hist\n            WHERE hist.investment_id = Account_dep_inv_id\n              AND hist.last_updated::date <= (SELECT prev_quart_last FROM quarter_dates)\n            ORDER BY hist.last_updated DESC) AS fee_pct,\n           cb_last * fee_pct AS total_fee,\n           c.Date\n\n    FROM combined_with_filled_values c\n           INNER JOIN web_db.investment inv ON inv.id = c.Account_dep_inv_id\n           INNER JOIN web_db.account acc ON inv.account_id = acc.id\n           INNER JOIN edw.view_accounts_termination_dates atd ON atd.account_id = acc.id\n    WHERE\n      (atd.termination_date IS NULL\n        OR atd.termination_date::date > (SELECT prev_quart_last FROM quarter_dates))\n      AND DATE_TRUNC('quarter', c.Date) = (SELECT prev_quart_first FROM quarter_dates)\n  )\n\nSELECT\n      getdate() AS execution,\n      ua.user_id AS User_id,\n      q.Account_id AS Account_id,\n      NULL AS Depository_id,\n      q.Account_dep_inv_id AS Investment_id,\n      'Investment'::text AS Account_type,\n      (CASE\n         WHEN Account_type_id = 2 -- 'Individual'\n           AND q.Investment_fund_id = 1 -- 'Flagship'\n           THEN 'Flagship Individual'::text\n         WHEN Account_type_id = 2 -- 'Individual'\n           AND q.Investment_fund_id = 2 -- 'Redwood'\n           THEN 'Redwood Individual'::text\n         WHEN Account_type_id = 3 -- 'IRA'\n           AND q.Investment_fund_id = 1 -- 'Flagship'\n           THEN 'Flagship IRA'::text\n         WHEN Account_type_id = 3 -- 'IRA'\n           AND q.Investment_fund_id = 2 -- 'Redwood'\n           THEN 'Redwood IRA'::text\n         ELSE ''::text\n        END) AS Product_type,\n\n--       q.Account_product_type AS Account_product_type_id,\n--       'Investment'::text AS Account_product_type_name,\n--       q.ACCOUNT_TYPE_ID AS Account_type_id,\n--       (CASE\n--          WHEN Account_type_id = 2 THEN 'Individual'::text\n--          WHEN Account_type_id = 3 THEN 'IRA'::text\n--          ELSE ''\n--         END) AS Account_type_name,\n--       q.Investment_fund_id AS Account_investment_type_id,\n--       (CASE\n--          WHEN Account_investment_type_id = 1 THEN 'Flagship'::text\n--          WHEN Account_investment_type_id = 2 THEN 'Redwood'::text\n--          ELSE ''\n--         END) AS Account_investment_type_name,\n      FALSE AS Non_customer,\n      'n/a'::text AS Category,\n      'Gross Investment PWIF'::text AS Item,\n      q.Date AS Date,\n      (CASE WHEN q.total_fee IS NULL THEN 0\n            ELSE q.total_fee / (SELECT days_in_year FROM quarter_dates) END) AS Value,\n      'n/a'::text AS Value_type\n\nFROM investment_pwif_quart as q\n       INNER JOIN web_db.user_account ua ON q.ACCOUNT_ID = ua.account_id;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2962925":{"id":2962925,"sourceID":2962886,"targetID":2962899},"2962944":{"id":2962944,"sourceID":2962896,"targetID":2962880},"2962945":{"id":2962945,"sourceID":2962898,"targetID":2962948},"2962946":{"id":2962946,"sourceID":2962880,"targetID":2962886},"2962947":{"id":2962947,"sourceID":2962882,"targetID":2962883}},"failureConnectors":{"2962920":{"id":2962920,"sourceID":2962880,"targetID":2962949},"2962923":{"id":2962923,"sourceID":2962886,"targetID":2962949}},"unconditionalConnectors":{"2962921":{"id":2962921,"sourceID":2962949,"targetID":2962898},"2962926":{"id":2962926,"sourceID":2962887,"targetID":2962882}},"trueConnectors":{"2962924":{"id":2962924,"sourceID":2962883,"targetID":2962896}},"falseConnectors":{"2962927":{"id":2962927,"sourceID":2962883,"targetID":2962900}},"iterationConnectors":{},"noteConnectors":{},"notes":{"2962884":{"id":2962884,"x":-587,"y":-168,"width":87,"height":140,"text":"for development","colour":"d60000"}},"variables":{"Consolidated_table":{"definition":{"name":"Consolidated_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"consolidated_pnl"},"Exist_check_Target_table":{"definition":{"name":"Exist_check_Target_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":null},"Item_name":{"definition":{"name":"Item_name","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"'Gross Investment PWIF'"},"Month_iterator":{"definition":{"name":"Month_iterator","type":"DECIMAL","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"Pnl_schema":{"definition":{"name":"Pnl_schema","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"edw"},"Target_table":{"definition":{"name":"Target_table","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PRIVATE"},"value":"gross_investment_pwif"}},"grids":{}},"info":{"name":"pnl_exec_gross_investment_pwif","description":"Script for updating item on regular basis","type":"ORCHESTRATION","tag":"5976416d-f040-415a-a2f2-ef210970491d"}}