{"job":{"components":{"2964464":{"id":2964464,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":716056355,"x":16,"y":0,"width":32,"height":32,"inputConnectorIDs":[2964525],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2964466],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of extract plaid_data"}}}},"visible":true},"2":{"slot":2,"name":"","elements":{},"visible":false},"3":{"slot":3,"name":"Database Type","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"postgresql"}}}},"visible":true},"4":{"slot":4,"name":"RDS Endpoint","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"prod-web-db-analytics.ctawxryivyva.us-west-2.rds.amazonaws.com:5432"}}}},"visible":true},"5":{"slot":5,"name":"Database Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"web_db"}}}},"visible":true},"6":{"slot":6,"name":"Username","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"data_readonly"}}}},"visible":true},"7":{"slot":7,"name":"Password","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dA3j3RWFpzzo38LL"}}}},"visible":true},"8":{"slot":8,"name":"SQL Query","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"with attributes (service_name, internal_name, source_type,  stage,  data_type,  description,  name, display_name, selector, data_source)\n   as ( VALUES\n('Plaid Identity','Plaid Identity','asp','response','string','plaid identity name','name','name','identity.names','raw'),\n('Plaid Identity','Plaid Identity','asp','response','string','plaid identity phone number','phone_number','phone_number','identity.phone_numbers','raw'),\n('Plaid Identity','Plaid Identity','asp','response','string','plaid identity email','email','email','identity.emails','raw'),\n('Plaid Identity','Plaid Identity','asp','response','string','plaid identity address','address','address','identity.addresses','raw'),\n('Plaid Identity','Plaid Identity','asp','response','string','accounts','account','account','accounts','raw'),\n('Plaid Identity','Plaid Identity','asp','response','string','plaid identity error','error','error','error','raw')\n)\n --select * from attributes\n\n    , eval_services AS (\n    SELECT ev.user_payment_account_id as user_payment_account_id,\n           a.service_name AS service_name,\n           a.service_name as service_id,\n           original_plaid_data as alloy_result\n    FROM bank_account_plaid_identity_info ev \n        cross join (select distinct service_name\n                    from attributes) a\n    where 1=1\n--       and last_updated::date >= now()::date - 1\n--       and ev.id = 10\n    ) \n    --select * from eval_services where user_payment_account_id = 10\n    \n\n    , service_selector AS (\n    SELECT a.service_name,\n           a.selector,\n           replace(replace(replace(a.selector, '.', ', '), '[', ', '), ']', '') AS selector_path,\n           a.data_type,\n           a.display_name AS field_display_name,\n           a.name AS field_name,\n           a.description AS field_description,\n           a.data_source,\n           a.source_type\n    FROM attributes a\n    WHERE a.display_name NOT LIKE '%Reason Codes%'\n    )\n    --select * from  service_selector   \n\n    , reasoncode_selectors AS (\n    SELECT a.service_name,\n           a.selector,\n           replace(replace(replace(a.selector, '.', ', '), '[', ', '), ']', '') AS selector_path,\n           a.data_type,\n           a.display_name AS field_display_name,\n           a.name AS field_name,\n           a.description AS field_description,\n           a.data_source\n    FROM attributes a\n    WHERE (a.display_name LIKE '%Reason Codes%' OR a.display_name = 'Risk Codes')\n      AND a.data_source = 'formatted'\n    )\n    --select * from  reasoncode_selectors \n    \n    , raw_eval_fields AS (\n    SELECT es.user_payment_account_id,\n           es.service_id,\n           es.service_name,\n           ss.field_name,\n           ss.field_display_name,\n           es.alloy_result #>> format('{formatted_responses, %s, %s}' :: text, es.service_name, ss.selector_path) :: text [] AS extracted,\n           ss.field_description,\n           ss.data_source,\n           ss.data_type,\n           'raw atttrs' :: text AS provenance\n    FROM eval_services es\n           JOIN service_selector ss USING (service_name)\n    WHERE ss.data_source = 'raw'\n    )\n    --select * from raw_eval_fields where user_payment_account_id = 10\n    \n    , asp AS (\n    SELECT es.user_payment_account_id,\n           es.service_id,\n           es.service_name,\n           ss.field_name,\n           ss.field_display_name,\n           es.alloy_result #>> format('{%s}' :: text, ss.selector_path) :: text [] AS extracted,\n           ss.field_description,\n           ss.data_source,\n           ss.data_type,\n           'asp_atttrs' :: text AS provenance\n    FROM eval_services es\n           JOIN service_selector ss USING (service_name)\n    WHERE ss.source_type = 'asp'\n    )\n\n\n    , formatted_eval_fields AS (\n    SELECT es.user_payment_account_id,\n           es.service_id,\n           es.service_name,\n           ss.field_name,\n           ss.field_display_name,\n           es.alloy_result #>> format('{formatted_responses, %s, %s}' :: text, es.service_name, ss.selector_path) :: text [] AS extracted,\n           ss.field_description,\n           ss.data_source,\n           ss.data_type,\n           'formatted_attrs' :: text AS provenance\n    FROM eval_services es\n           JOIN service_selector ss USING (service_name)\n    WHERE ss.data_source = 'formatted'\n    )\n    --select * from formatted_eval_fields where user_payment_account_id = 10\n    \n\n    \n    , non_reasoncodes AS (\n        SELECT *\n        FROM formatted_eval_fields\n        UNION ALL\n        SELECT *\n        FROM raw_eval_fields\n        UNION ALL\n        SELECT *\n        FROM asp\n    )\n    \n    \n    ,disambig_attrs AS (\n    SELECT nrc.*,\n           ROW_NUMBER () OVER (\n             PARTITION BY field_name\n             ORDER BY CASE WHEN extracted IS NOT NULL THEN 0 ELSE 1 END DESC\n             ) AS rn\n    FROM non_reasoncodes nrc\n    --WHERE service_id IN (80)\n    )\n    \n    \n    , dedupe_attrs AS (\n    SELECT user_payment_account_id,\n           service_id,\n           service_name,\n           field_name,\n           field_display_name,\n           extracted,\n           field_description,\n           data_source,\n           data_type,\n           'deduped attrs' :: text AS provenance\n    FROM disambig_attrs\n    WHERE rn = 1\n    )\n    \n    \n    , reasoncode_eval_fields AS (\n    SELECT es.user_payment_account_id,\n           es.service_id,\n           es.service_name,\n           rcs.field_name,\n           rcs.field_display_name,\n           (es.alloy_result #> format('{formatted_responses, %s, %s}' :: text, es.service_name, rcs.selector_path) :: text []) :: json AS extracted,\n           rcs.field_description,\n           rcs.data_source,\n           rcs.data_type\n    FROM eval_services es\n           JOIN reasoncode_selectors rcs USING (service_name)\n    WHERE rcs.data_source = 'formatted'\n    )\n    \n    \n    , rc_long AS (\n    SELECT user_payment_account_id,\n           service_id,\n           service_name,\n           replace(json_array_elements(extracted) :: text, '\"', '') :: text AS field_name,\n           data_source,\n           data_type,\n           'reasoncodes' :: text AS provenance\n    FROM reasoncode_eval_fields\n    )\n    \n    \n    , rc_descriptions AS (\n    SELECT DISTINCT rc_long.*\n    FROM rc_long\n    )\n    \n    \n    , rc_final AS (\n    SELECT user_payment_account_id,\n           service_id,\n           service_name,\n           field_name,\n           null::text AS field_display_name,\n           null::text AS extracted,\n           data_source,\n           data_type,\n           provenance\n    FROM rc_descriptions\n    )\n    \n    \n    , combined AS (\n    SELECT user_payment_account_id,\n           service_id,\n           service_name,\n           field_name,\n           field_display_name,\n           extracted,\n           field_description,\n           data_source,\n           data_type,\n           provenance\n    FROM non_reasoncodes\n    --WHERE service_id NOT IN (80)\n      UNION ALL\n      -- raw AND formatted attributes that get run 2x, deduped\n      SELECT user_payment_account_id,\n           service_id,\n           service_name,\n           field_name,\n           field_display_name,\n           extracted,\n           field_description,\n           data_source,\n           data_type,\n           provenance\n      FROM dedupe_attrs\n      UNION ALL\n      --reasoncode descriptions long\n      SELECT user_payment_account_id,\n           service_id,\n           service_name,\n           field_name,\n           field_display_name,\n           extracted,\n           null as field_description,\n           data_source,\n           data_type,\n           provenance\n      FROM rc_final\n    )\n\n\nSELECT distinct \n       ev.user_payment_account_id,\n       field_name,\n       field_display_name,\n       extracted,\n       field_description,\n       data_source,\n       data_type\nFROM combined\n       JOIN bank_account_plaid_identity_info ev ON combined.user_payment_account_id = ev.user_payment_account_id\nwhere 1=1\n--   and service_name ilike '%alloy%'\n  and extracted is not null\n--   and field_name = 'result'\n--   and user_payment_account_id = 10\n-- limit 100\n;\n\n\n"}}}},"visible":true},"11":{"slot":11,"name":"JDBC Options","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"ssl"},"2":{"slot":2,"type":"STRING","value":"true"}}}},"visible":true},"13":{"slot":13,"name":"Schema","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"dev_zendesk"}}}},"visible":true},"14":{"slot":14,"name":"Target Table","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"plaid_identities_parsed"}}}},"visible":true},"16":{"slot":16,"name":"S3 Staging Area","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"aspiration-etl-staging"}}}},"visible":true},"1001":{"slot":1001,"name":"","elements":{},"visible":false},"40000":{"slot":40000,"name":"Encryption","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SSE KMS"}}}},"visible":true},"40001":{"slot":40001,"name":"KMS Key ID","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"${kms_s3_key}"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964465":{"id":2964465,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-160,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2964525],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964467":{"id":2964467,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":208,"y":0,"width":32,"height":32,"inputConnectorIDs":[2964466],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of expand array column into table"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"CREATE TEMPORARY TABLE tmp AS(\n\tSELECT user_payment_account_id,\n    field_name,\n    extracted\n    FROM dev_zendesk.plaid_identities_parsed\n    --where user_payment_account_id = 919214\n    where extracted LIKE '[%]' and extracted != '[]'\n  );      \n                                                                                                                                                                                                                                                                                                                                 \n--select * from tmp \n                                                                                                                                                                                      \nupdate tmp\n-- set extracted = replace(replace(replace(replace(extracted, '\"', ''), '[', ''), ']', ''), '}, {', '},,, {');                                                                                                                \nset extracted = replace(replace(replace(replace(extracted, '\"accounts\": [], ', ''), '[', ''), ']', ''), '}, {', '},,, {');                                                                                                                \n-- set extracted = replace(extracted, '}, {', '},,, {');                                                                                                                \n                                                                                                                                                                                \ncreate temporary table numbers as (\nselect 1 as n union all\nselect 2 union all\nselect 3 union all\nselect 4 union all\nselect 5 union all\nselect 6 union all\nselect 7 union all\nselect 8 union all\n\nselect 9 union all\nselect 10 union all\nselect 11 union all\nselect 12 union all\nselect 13 union all\nselect 14 union all\nselect 15 union all\nselect 16 union all\nselect 17 union all\nselect 18 \nunion all\nselect 19 union all\nselect 20 union all\nselect 21 union all\nselect 22 union all\nselect 23 union all\nselect 24 union all\nselect 25\nunion all\nselect 26 union all\nselect 27 union all\nselect 28 union all\nselect 29 union all\nselect 30 union all\nselect 31 union all\nselect 32)  ;                                                   \n     \n--select * from numbers\n\n\ndrop table if exists  dev_zendesk.plaid_identities_array;                                                                                                                                                                           \ncreate table dev_zendesk.plaid_identities_array  as (\n  select tmp.user_payment_account_id\n     ,tmp.field_name\n    ,trim(replace(split_part(extracted, ',', n), '\"', '')) as array_value\n  from tmp\n    cross join numbers\n  where split_part(extracted, ',', n) is not null\n    and split_part(extracted, ',' ,n) != ''     \n    and field_name='name'\n) ;   \n\n\ndrop table if exists  dev_zendesk.plaid_identities_array_1;                                                                                                                                                                           \ncreate table dev_zendesk.plaid_identities_array_1  as (\n  select tmp.user_payment_account_id\n     ,tmp.field_name\n    ,trim(split_part(extracted, ',,,', n))  as array_value\n  from tmp\n    cross join numbers\n  where split_part(extracted, ',,,', n) is not null\n    and split_part(extracted, ',,,' ,n) != ''     \n\tand field_name !='name'\n) ;\n\n\ninsert into dev_zendesk.plaid_identities_array (\nSELECT\n  user_payment_account_id,\n  field_name,\n  array_value\nFROM dev_zendesk.plaid_identities_array_1\nWHERE 1=1\n  -- AND user_payment_account_id=919214\n  AND field_name!='name'\n);\n\ninsert into dev_zendesk.plaid_identities_array (\nSELECT\n  user_payment_account_id,\n  field_name,\n  extracted\nFROM dev_zendesk.plaid_identities_parsed\nWHERE 1=1\n  -- AND user_payment_account_id=919214\n  AND field_name='error'\n);\n\n\ndrop table if exists dev_zendesk.plaid_identities_array_1;                                                                                                                                                                           \n\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{},"failureConnectors":{},"unconditionalConnectors":{"2964466":{"id":2964466,"sourceID":2964464,"targetID":2964467},"2964525":{"id":2964525,"sourceID":2964465,"targetID":2964464}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{}},"info":{"name":"plaid identity parsing test","description":"","type":"ORCHESTRATION","tag":"0b5bf5fb-9f76-445b-a267-fff8b14e3af4"}}