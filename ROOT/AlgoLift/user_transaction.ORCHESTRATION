{"job":{"components":{"2964540":{"id":2964540,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-560,"y":64,"width":32,"height":32,"inputConnectorIDs":[2964543],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"SQL Script 0"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"copy into @public.algolift/daily_data/transaction/transaction_date_${current_year}-${current_month}-${current_day}/purchase_${current_year}-${current_month}-${current_day}.csv\nfrom (with js_segment as (\n        select user_id\n            ,anonymous_id\n        from segment_events.prod_segment_js.tracks\n        where received_at::date between '${current_year}-${current_month}-${current_day}' -30 and '${current_year}-${current_month}-${current_day}'\n        )\n    ,\n    segment_ios as (\n        select user_id\n            ,anonymous_id\n        from segment_events.prod_segment_ios.tracks\n        where received_at::date between '${current_year}-${current_month}-${current_day}' -30 and '${current_year}-${current_month}-${current_day}'\n        union all\n        select user_id\n            ,anonymous_id\n        from segment_events.prod_segment_ios.install_attributed\n        where received_at::date between '${current_year}-${current_month}-${current_day}' -30 and '${current_year}-${current_month}-${current_day}'\n        )\n    ,\n    segment_android as (\n        select user_id\n            ,anonymous_id\n        from segment_events.prod_segment_android.tracks\n        where received_at::date between '${current_year}-${current_month}-${current_day}' and '${current_year}-${current_month}-${current_day}'\n        union all\n        select user_id\n            ,anonymous_id\n        from segment_events.prod_segment_android.install_attributed\n        where received_at::date between '${current_year}-${current_month}-${current_day}'-30 and '${current_year}-${current_month}-${current_day}'\n        )\n    ,\n    segment_tracker_service as (\n        select user_id\n            ,NULL as anonymous_id\n        from segment_events.prod_segment_tracker_service.tracks\n        where received_at::date between '${current_year}-${current_month}-${current_day}' - 30 and '${current_year}-${current_month}-${current_day}'\n        )\n    ,\n    segment_data as (\n        select *\n        from js_segment jss\n        union all\n        select *\n        from segment_ios\n        union all\n        select *\n        from segment_android\n        union all\n        select *\n        from segment_tracker_service\n        ),\n    anon_id as (\n        select sd.user_id as external_user_id\n            ,dtu.user_id as internal_user_id\n            ,row_number() over (partition by anonymous_id order by anonymous_id) as rn\n        from segment_data sd\n        left join bi.dt_users dtu on sd.user_id = dtu.external_user_id\n        )\nselect coalesce(nullif(aid.external_user_id,''),cp.user_id::varchar || coalesce('_a_' || account_id::varchar, '_u_' || cp.user_id::varchar) , account_id::varchar || '_a_' || account_id::varchar) as user_id\n,case when lower(cp.item) = 'interest revenue' then 'interest'\nwhen lower(cp.item) = 'billed depository pwif' then 'gratuity'\nelse 'fee' end as transaction_type\n,sum(cp.value)::numeric(38,8) as purchase_amount\n,count(*) as transaction_count\n,NULL as parcel_name\nfrom edw.consolidated_pnl cp\nleft join anon_id aid on cp.user_id = aid.internal_user_id\nwhere value_type = 'Revenue' and aid.rn = 1 and cp.date::date = '${current_year}-${current_month}-${current_day}'\n    group by aid.external_user_id,cp.user_id,cp.account_id,cp.item,cp.date)\nfile_format = (type=csv, field_optionally_enclosed_by='\"')\nheader = true;\n\n\n\n---tests---\n---Back tracked ids and got the right $ amount the right amount of transactions\n-- select top 100 *\n-- from edw.consolidated_pnl\n-- where user_id = 39660\n-- and value_type = 'Revenue' and date::date = '2020-04-11';\n--\n-- select top 100 user_id , external_user_id\n-- from bi.dt_users\n-- where user_id = 39660;\n--\n-- select top 100 *\n-- from prod_segment_js.tracks\n-- where user_id = '0fae3bd22bb945599c398f65101771d1';\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2964541":{"id":2964541,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-768,"y":64,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2964543],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{},"failureConnectors":{},"unconditionalConnectors":{"2964543":{"id":2964543,"sourceID":2964541,"targetID":2964540}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{"2964514":{"id":2964514,"x":-767,"y":-417,"width":568,"height":363,"text":"CSV file formatting:\n- Headers should be present\n- All field entries should be in double quotes\n- Lines terminated by \\r\\n\n- NULL text fields should be delivered as NULL(empty field)\n- Revenue fields should never be NULL. If NULL in your dataset, pass 0\n- Engagement/Transaction counts should never be NULL. If NULL pass 0\n- Any other numerical field can be passed as NULL\n- Date format for all dates should be: YYYY-MM-DD hh:mm:ss\n- All times are assumed as UTC\n-Install and transaction files should be free from duplicates\n\nFile names should be named consistently with the following format:\n{date}_install_{titlename/identifier}.csv\n{date}_transaction_{titlename/identifier}.csv\n{date}_engagement_{titlename/identifier}.csv\n\nExample, 2017-10-01_install_your_company_name.csv\nAll CSVs should be delivered daily around midnight to an s3 bucket that will be assigned to you","colour":"e6e63c"}},"variables":{"current_day":{"definition":{"name":"current_day","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"22"},"current_month":{"definition":{"name":"current_month","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"02"},"current_year":{"definition":{"name":"current_year","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"2018"},"file_date":{"definition":{"name":"file_date","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""},"target_s3_bucket":{"definition":{"name":"target_s3_bucket","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":""}},"grids":{}},"info":{"name":"user_transaction","description":null,"type":"ORCHESTRATION","tag":"980c0739-ccb5-40aa-9d26-00d110a35705"}}