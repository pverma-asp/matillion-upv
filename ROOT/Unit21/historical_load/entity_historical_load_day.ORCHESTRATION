{"job":{"components":{"2966601":{"id":2966601,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":0,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2966620],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2966602":{"id":2966602,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":0,"y":208,"width":32,"height":32,"inputConnectorIDs":[2966621],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Copy of extract entities"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"use warehouse unit_21;\n\n\ncreate or replace file format UNIT21_JSON_FORMAT \n  type = 'JSON'\n  comment = 'JSON format for unit21 export files'\n;\n\n\ncopy into @public.DATATEAM/dump/jchen/unit21/historical_load/entity_extract_historical_${current_year}${current_month}${current_day}.json\nfrom (\n\nwith email_data as (\n    select USER_ID,\n           array_agg(EMAIL) as emails\n    from WEB_DB.USER_EMAIL\n    where 1 = 1\n    group by USER_ID\n)\n, phone_data as (\n    select USER_ID,\n           array_agg('+1' || PHONE_NUMBER) as phone_numbers\n    from WEB_DB.USER_PROFILE\n    where 1 = 1\n    group by USER_ID\n)\n, address_data as (\n    select up.USER_ID,\n           array_agg(\n                   object_construct(\n                           'street_name', left(a.STREET1 || COALESCE(a.STREET2, ''), 128),\n                           'city', a.CITY,\n                           'state', s.CODE,\n                           'postal_code', a.ZIP_OR_POSTAL_CODE,\n                           'country', c.CODE\n                       )\n               ) as address_json_array\n    from WEB_DB.ADDRESS a\n             join WEB_DB.USER_PROFILE up on (up.ADDRESS_ID = a.ID or up.MAILING_ADDRESS_ID = a.ID)\n             join WEB_DB.STATE s on a.STATE_ID = s.ID\n             join WEB_DB.COUNTRY c on a.COUNTRY_ID = c.ID\n    where 1 = 1\n--   and up.USER_ID = 605772\n--   and up.USER_ID=1111966\n    group by up.USER_ID\n)\n, application_ip_addresses_raw as (\n    select USER_ID,\n           row_number() over (partition by USER_ID order by DATE_CREATED) as rn,\n           IP_ADDRESS,\n           DATE_CREATED\n    from WEB_DB.USER_PRODUCT_APPLICATION\n    where 1 = 1\n--       and USER_ID = 2192747\n)\n\n, application_ip_addresses as (\n    select USER_ID,\n           array_agg(\n                   object_construct(\n                           'ip_address', IP_ADDRESS,\n                           'first_seen', DATE_PART(EPOCH_SECOND, CONVERT_TIMEZONE('America/Los_Angeles', 'UTC',\n                                                                                  DATE_CREATED::timestamp)),\n                           'last_seen', DATE_PART(EPOCH_SECOND, CONVERT_TIMEZONE('America/Los_Angeles', 'UTC',\n                                                                                 DATE_CREATED::timestamp))\n                       )\n               ) as ip_addresses\n    from application_ip_addresses_raw\n    where 1 = 1\n      and rn = 1\n      and IP_ADDRESS is not null\n    group by USER_ID\n)\n\nselect\narray_agg(objs) from (\n        select\n            object_construct(\n                'general_data', object_construct(\n                    'entity_id', u.UUID,\n                    'entity_type', 'user',\n                    'entity_subtype', '',\n                    'status', case\n                        when u.ENABLED then 'active'\n                        else 'suspended' end,\n                    'registered_at', DATE_PART(EPOCH_SECOND, CONVERT_TIMEZONE('America/Los_Angeles', 'UTC', u.DATE_CREATED::timestamp ))\n                )\n                ,'user_data', object_construct(\n                    'first_name', up.FIRST_NAME,\n                    'middle_name', up.MIDDLE_NAME,\n                    'last_name', up.LAST_NAME,\n--                     'date_of_birth', up.DATE_OF_BIRTH,\n                    'day_of_birth', DATE_PART(DAY, up.DATE_OF_BIRTH),\n                    'month_of_birth', DATE_PART(MONTH, up.DATE_OF_BIRTH),\n                    'year_of_birth', DATE_PART(YEAR, up.DATE_OF_BIRTH),\n                    'gender', case\n                        when up.GENDER_TYPE=1 then 'male'\n                        when up.GENDER_TYPE=2 then 'female'\n                        else 'other' end,\n                    'ssn', substr(TAX_IDENTIFICATION_NUMBER, 1, 3) || '-' || substr(TAX_IDENTIFICATION_NUMBER, 4, 2) || '-' || substr(TAX_IDENTIFICATION_NUMBER, 6, 4)\n                )\n                ,'communication_data', object_construct(\n                    'email_addresses', ed.emails,\n                    'phone_numbers', pd.phone_numbers\n                )\n                , 'location_data', ad.address_json_array\n                , 'digital_data', object_construct(\n                    'ip_addresses', aia.ip_addresses\n                )\n            ) as objs\n        from WEB_DB._USER u\n        join WEB_DB.USER_PROFILE up on u.id=up.USER_ID\n        join email_data ed on u.id=ed.USER_ID\n        join phone_data pd on u.id=pd.USER_ID\n        join PCI.USER_PROFILE upsin on u.id=upsin.USER_ID and upsin.TAX_IDENTIFICATION_NUMBER is not null and upsin.TAX_IDENTIFICATION_NUMBER != ''\n        left join address_data ad on u.id=ad.USER_ID\n        left join application_ip_addresses aia on u.id=aia.USER_ID\n        where 1=1\n--           and u.UUID='df0c40c91dc645b0a06c266c247f8448'\n--           and u.id in (605772, 1111966)\n--           and u.id=2449314  -- hacked client\n          and date_trunc('day',up.DATE_CREATED)='${current_year}-${current_month}-${current_day}'\n          and u.id not in (4085023)\n    )\n\n)\nfile_format = (format_name = UNIT21_JSON_FORMAT, compression = NONE)\nSINGLE=true\n;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2966603":{"id":2966603,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-1773186960,"x":0,"y":96,"width":32,"height":32,"inputConnectorIDs":[2966620],"outputSuccessConnectorIDs":[2966621],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"check variables"}}}},"visible":true},"2":{"slot":2,"name":"Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"###\n# Variables are directly accessible: \n#   print myvar\n# Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n# Grid Variables are accessible via the context:\n#   print context.getGridVariable('mygridvar')\n# Updating a grid variable:\n#   context.updateGridVariable('mygridvar', [['list','of'],['lists','!']])\n# A database cursor can be accessed from the context (Jython only):\n#   cursor = context.cursor()\n#   cursor.execute('select count(*) from mytable')\n#   rowcount = cursor.fetchone()[0]\n###\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom dateutil.relativedelta import relativedelta\nfrom pytz import timezone\n\n# print 'current time in PST: ', datetime.now(timezone('US/Pacific'))\n\n# today=datetime.now(timezone('US/Pacific')).strftime(\"%Y-%m-%d\")\n# print 'today: ', today\n\nprint '${current_year}-${current_month}-${current_day}'\n\n#context.updateVariable('file_date', file_date)\n\n\n"}}}},"visible":true},"3":{"slot":3,"name":"Interpreter","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Jython"}}}},"visible":true},"4":{"slot":4,"name":"Timeout","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"INTEGER","value":"360"}}}},"visible":false}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2966621":{"id":2966621,"sourceID":2966603,"targetID":2966602}},"failureConnectors":{},"unconditionalConnectors":{"2966620":{"id":2966620,"sourceID":2966601,"targetID":2966603}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{"current_day":{"definition":{"name":"current_day","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"24"},"current_month":{"definition":{"name":"current_month","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"01"},"current_year":{"definition":{"name":"current_year","type":"TEXT","scope":"TASKBATCH","description":"","visibility":"PUBLIC"},"value":"2018"}},"grids":{}},"info":{"name":"entity_historical_load_day","description":null,"type":"ORCHESTRATION","tag":"abd847b1-42b5-4863-8503-a0e7cc2969fc"}}