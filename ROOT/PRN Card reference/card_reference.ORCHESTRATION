{"job":{"components":{"2967680":{"id":2967680,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1946388514,"x":-66,"y":-29,"width":32,"height":32,"inputConnectorIDs":[2967683],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"end success"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967681":{"id":2967681,"inputCardinality":"ONE","outputCardinality":"ZERO","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":515156205,"x":16,"y":64,"width":32,"height":32,"inputConnectorIDs":[2967697],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"end failure"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967684":{"id":2967684,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-181,"y":-30,"width":32,"height":32,"inputConnectorIDs":[2967682],"outputSuccessConnectorIDs":[2967683],"outputFailureConnectorIDs":[2967698],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"log duplicate card_id"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--log import error\ninsert into etl.issue_log\n(issue_program, issue_description, issue_count, issue_object, issue_identifier, issue_priority)\nselect\n       'Card Reference Table',\n       'Duplicate card_id values exist in rdl.card_reference',\n        count(*) as count_card_id,\n       'rdl.card_reference',\n       null,\n       'high'\nfrom (\n         select card_id\n         from rdl.card_reference\n         group by 1\n         having count(*) > 1\n     )\nhaving count_card_id > 0;\n "}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967685":{"id":2967685,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-310,"y":-28,"width":32,"height":32,"inputConnectorIDs":[2967696],"outputSuccessConnectorIDs":[2967682],"outputFailureConnectorIDs":[2967699],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"rdl.card_reference"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop table if exists tmp_card;\ncreate temp table tmp_card as\nwith raw_galileo_account_card_data as (\n    select *,\n           row_number() over (partition by CARD_ID order by file_date desc) rn\n    from rdl.raw_galileo_account_card_data\n)\n, cust_master as (\n    select a.GALILEO_ACCOUNT_ID,\n           S.DESCRIPTION as account_status,\n           row_number() over (partition by a.GALILEO_ACCOUNT_ID order by a.FILE_DATE desc) rn\n    from rdl.RAW_GALILEO_CUSTOMER_MASTER_DATA a\n    join WEB_DB.GALILEO_LOOKUP s on a.STATUS = s.CODE and s.FILE = 'C' and s.FIELD_NAME = 'STATUS'\n    where a.TYPE_OF_ACCOUNT in ('6','8')\n)\n, ga as (\n    select ga.ASPIRATION_USER_ID,\n           case ga.PMT_REF_NO\n               when 'XXXXXXXXXXXX'\n                   then case ga.GALILEO_ACCOUNT_NUMBER\n                            when '1388396' then '223111874903'\n                            when '1388400' then '223111874945'\n                            when '1388401' then '223111874952'\n                            when '1388399' then '223111874937'\n                            when '1388397' then '223111874911'\n                            when '1388395' then '223111874895'\n                            when '1388398' then '223111874929'\n                            when '1388394' then '223111874887'\n                            else ga.PMT_REF_NO\n                   end\n               else ga.PMT_REF_NO\n             end as PMT_REF_NO,\n             GALILEO_ACCOUNT_NUMBER,\n             ASPIRATION_ACCOUNT_NUMBER,\n             CARD_ID\n    from aog_db.galileo_accounts ga\n)\n, user_galileo_account_id as (\n    select a.ASPIRATION_USER_ID as user_id,\n           a.GALILEO_ACCOUNT_NUMBER as galileo_account_id,\n           a.PMT_REF_NO as prn,\n           a.CARD_ID\n    from ga a\n    union\n    select dc.USER_ID,\n           c.GALILEO_ACCOUNT_ID,\n           dc.PRN,\n           c.CARD_ID\n    from BANK_DB.DEBIT_CARD dc\n    join raw_galileo_account_card_data c on dc.GALILEO_CARD_ID = c.CARD_ID and c.rn = 1\n    left join ga on dc.GALILEO_CARD_ID = ga.CARD_ID\n    where dc.USER_ID > 0\n    and ga.CARD_ID is null\n    and not (user_id = 2534192 and GALILEO_CARD_ID = '126350')\n    and not (user_id = 2601429 and GALILEO_CARD_ID = '275637')\n)\n, asp_acct_num as (\n    select ASPIRATION_ACCOUNT_NUMBER, ASPIRATION_USER_ID as user_id --GALILEO_ACCOUNT_NUMBER as galileo_account_id\n    from ga\n    union\n    select a.ACCOUNT_NUMBER, p.user_id--NEW_SPEND_BALANCE_ID as galileo_account_id\n    from WEB_DB.ACCOUNT_ROTATION_PRN_HISTORY p\n    join WEB_DB.USER_ACCOUNT ua on p.USER_ID = ua.USER_ID\n    join WEB_DB.ACCOUNT a on ua.ACCOUNT_ID = a.ID\n    where p.NEW_SPEND_PRN is not null\n    and a.ACCOUNT_TYPE_ID = 2\n    and exists (select 1 from WEB_DB.DEPOSITORY d where a.ID = d.ACCOUNT_ID and d.PRODUCT_ID in (4,5))\n)\n, alternate_user_id as (\n    select g.galileo_account_id, g.user_id\n    from user_galileo_account_id g\n    union\n    select NEW_SPEND_BALANCE_ID, USER_ID\n    from WEB_DB.ACCOUNT_ROTATION_PRN_HISTORY\n    where NEW_SPEND_BALANCE_ID is not null\n)\n, primary_users as (\n    select au.*\n    from alternate_user_id au\n    join bi.DT_ACCOUNTS a on au.user_id = a.USER_ID\n    where a.ACCOUNT_TYPE = 'Checking'\n    and a.IS_JOINT_ACCOUNT = false\n)\n, third_user_id_attempt as (\n    select galileo_account_id, max(user_id) as user_id\n    from user_galileo_account_id\n    where user_id is not null\n    group by 1\n    having count(distinct user_id) = 1\n)\n, result as (\n    select distinct\n           z.CARD_ID,\n           z.PRN as card_prn,\n           z.file_date as card_file_date,\n           coalesce(ga.user_id, ga2.user_id, tua.user_id) as user_id,\n           z.GALILEO_ACCOUNT_ID,\n           (right(z.EXPIRATION_DATE,4) || '-' || left(z.EXPIRATION_DATE,2) || '-' ||\n                substring(z.EXPIRATION_DATE,3,2))::date as expiration_date,\n           l1.DESCRIPTION as type_of_card,\n           l.DESCRIPTION as card_status,\n           cm.account_status as spend_account_status,\n           coalesce(a.IS_JOINT_ACCOUNT::varchar(10),a2.IS_JOINT_ACCOUNT::varchar(10),'Unknown') as IS_JOINT_ACCOUNT,\n           case when a.USER_ID is not null then 'Primary'\n                when a2.JOINT_ACCOUNT_SECONDARY_USER_ID is not null then 'Secondary'\n                else 'Unknown' end as account_holder_type,\n           case when coalesce(ga.user_id, ga2.user_id, tua.user_id) is null and gid.galileo_account_id is null\n                then 'cannot tie to user_id - no record in aog_db.galileo_accounts, bank_db.debit_card or WEB_DB.ACCOUNT_ROTATION_PRN_HISTORY'\n                when coalesce(ga.user_id, ga2.user_id, tua.user_id) is null and gid.galileo_account_id is not null\n                then 'cannot determine which account user is attached to this card; likely joint account'\n                when a.USER_ID is null and a2.JOINT_ACCOUNT_SECONDARY_USER_ID is null\n                    and acc.ACCOUNT_NUMBER is null then 'web_db.account account_number missing'\n                when ua.USER_ID is null then 'no record for user_id in web_db.user_account'\n                when (a.USER_ID is not null or a2.JOINT_ACCOUNT_SECONDARY_USER_ID is not null)\n                    and ua.USER_ID is not null and coalesce(ga.user_id, ga2.user_id, tua.user_id) is not null then 'none'\n                else 'unknown issue' end as data_issue,\n           row_number() over (partition by z.GALILEO_ACCOUNT_ID, coalesce(ga.user_id, ga2.user_id, tua.user_id) order by z.prn, z.FILE_DATE desc) as rn_prn\n    from raw_galileo_account_card_data z\n    left join user_galileo_account_id ga ON ga.galileo_account_id = z.galileo_account_id and z.CARD_ID = ga.CARD_ID\n    --join below is used to get users on primary accounts for rows where we can't link card_id to a user\n    left join primary_users ga2 ON ga2.galileo_account_id = z.galileo_account_id\n    left join WEB_DB.GALILEO_LOOKUP l on z.STATUS = l.code and l.FIELD_NAME = 'CARD STATUS'\n    left join WEB_DB.GALILEO_LOOKUP l1 on z.TYPE_OF_CARD = l1.code and l1.FIELD_NAME = 'TYPE OF CARD'\n    left join third_user_id_attempt tua on z.GALILEO_ACCOUNT_ID = tua.GALILEO_ACCOUNT_ID\n    left join bi.DT_ACCOUNTS a on coalesce(ga.user_id, ga2.user_id, tua.user_id) = a.USER_ID and a.ACCOUNT_TYPE = 'Checking'\n    left join bi.DT_ACCOUNTS a2 on coalesce(ga.user_id, ga2.user_id, tua.user_id) = a2.JOINT_ACCOUNT_SECONDARY_USER_ID and a2.ACCOUNT_TYPE = 'Checking'\n    left join asp_acct_num aan on coalesce(ga.user_id, ga2.user_id, tua.user_id)  = aan.user_id\n    left join WEB_DB.ACCOUNT acc on aan.ASPIRATION_ACCOUNT_NUMBER = ACCOUNT_NUMBER\n    left join (select distinct user_id from WEB_DB.USER_ACCOUNT) ua on coalesce(ga.user_id, ga2.user_id, tua.user_id)  = ua.USER_ID\n    left join cust_master cm on z.GALILEO_ACCOUNT_ID = cm.GALILEO_ACCOUNT_ID and cm.rn = 1\n    left join (select distinct galileo_account_id from alternate_user_id) gid on z.GALILEO_ACCOUNT_ID = gid.galileo_account_id\n    where z.rn = 1\n)\nselect distinct\n    a.CARD_ID,\n    a.card_prn,\n    a.card_file_date,\n    a.user_id,\n    a.GALILEO_ACCOUNT_ID,\n    a.expiration_date,\n    a.type_of_card,\n    a.card_status,\n    a.spend_account_status,\n    case when a.type_of_card != 'Virtual Card' then a.card_prn else b.card_prn end as spend_prn,\n    a.IS_JOINT_ACCOUNT,\n    a.account_holder_type,\n    a.data_issue\nfrom result a\nleft join result b on a.user_id = b.user_id\n                  and a.GALILEO_ACCOUNT_ID = b.GALILEO_ACCOUNT_ID\n                  and a.CARD_ID != b.CARD_ID\n                  and b.type_of_card != 'Virtual Card'\n                  and b.rn_prn = 1;\n\n--create table used to fill in spend_prn\ndrop table if exists tmp_spend_prn;\ncreate temp table tmp_spend_prn as\nwith a as (\n    select distinct GALILEO_ACCOUNT_ID\n    from tmp_card\n    where spend_prn is null\n)\n, b as (\n    select c.GALILEO_ACCOUNT_ID\n    from tmp_card c\n    join a on c.GALILEO_ACCOUNT_ID = a.GALILEO_ACCOUNT_ID\n    group by 1\n    having count(distinct ifnull(c.user_id, 0)) = 1\n    and count(distinct c.type_of_card) > 1\n)\nselect c.*\nfrom tmp_card c\njoin b on b.GALILEO_ACCOUNT_ID = c.GALILEO_ACCOUNT_ID\nwhere c.spend_prn is not null;\n\nupdate tmp_card\nset spend_prn = src.spend_prn\nfrom tmp_spend_prn src\nwhere tmp_card.GALILEO_ACCOUNT_ID = src.GALILEO_ACCOUNT_ID\nand tmp_card.spend_prn is null\nand tmp_card.type_of_card = 'Virtual Card';\n\n--create table to edit data_issue for orphaned virtual cards\ndrop table if exists tmp_orphan_virtual_card;\ncreate temp table tmp_orphan_virtual_card as\nwith a as (\n    select distinct GALILEO_ACCOUNT_ID\n    from tmp_card\n    where spend_prn is null\n)\n, b as (\n    select c.GALILEO_ACCOUNT_ID\n    from tmp_card c\n    join a on c.GALILEO_ACCOUNT_ID = a.GALILEO_ACCOUNT_ID\n    group by 1\n    having count(distinct ifnull(c.user_id, 0)) = 1\n    and count(distinct c.type_of_card) = 1\n)\nselect c.*\nfrom tmp_card c\njoin b on b.GALILEO_ACCOUNT_ID = c.GALILEO_ACCOUNT_ID\nwhere c.spend_prn is null;\n\nalter table tmp_card alter column data_issue varchar(300);\n\nupdate tmp_card\nset tmp_card.data_issue = case when tmp_card.data_issue != 'none'\n                               then tmp_card.data_issue || '; ' else '' end || 'no known related spend prn'\nfrom tmp_orphan_virtual_card src\nwhere tmp_card.GALILEO_ACCOUNT_ID = src.GALILEO_ACCOUNT_ID\nand tmp_card.spend_prn is null\nand tmp_card.type_of_card = 'Virtual Card';\n\n--create table to update user_id and data_issue where it can be filled in from user_profile\ndrop table if exists tmp_user_id_fourth_try;\ncreate temp table tmp_user_id_fourth_try as\nwith cust_master_grouped as (\n    select GALILEO_ACCOUNT_ID,\n           ifnull(nullif(ifnull(PRIMARY_CARDHOLDER_FIRST_NAME,'') || ifnull(PRIMARY_CARDHOLDER_LAST_NAME,'')\n               || ifnull(PRIMARY_PHONE_NUMBER,''),''),GALILEO_ACCOUNT_ID) as identifier\n    from rdl.RAW_GALILEO_CUSTOMER_MASTER_DATA\n    group by 1,2\n    having count(distinct identifier) = 1\n)\n, cust_master as (\n    select *, row_number() over (partition by GALILEO_ACCOUNT_ID order by file_date desc) as rn\n    from rdl.RAW_GALILEO_CUSTOMER_MASTER_DATA\n)\n, valid_joint_accounts AS (\n     SELECT ua.account_id\n          , count(1) cnt\n     FROM web_db.user_account ua\n     JOIN web_db.depository d ON ua.account_id = d.account_id\n     JOIN web_db.account a ON ua.account_id = a.id\n     WHERE product_id IN (4,5)\n       AND ua.user_account_type = 2\n     GROUP BY ua.account_id\n     HAVING cnt >= 2\n )\n , joint_users as (\n    select ua.USER_ID\n    from valid_joint_accounts a\n    join WEB_DB.USER_ACCOUNT ua on a.ACCOUNT_ID = ua.ACCOUNT_ID\n )\nselect distinct a.CARD_ID, up.USER_ID\nfrom tmp_card a\njoin cust_master b on a.GALILEO_ACCOUNT_ID = b.GALILEO_ACCOUNT_ID\njoin cust_master_grouped c on b.GALILEO_ACCOUNT_ID = c.GALILEO_ACCOUNT_ID\njoin WEB_DB.USER_PROFILE up on upper(trim(b.PRIMARY_CARDHOLDER_FIRST_NAME)) = upper(trim(up.FIRST_NAME))\n                           and upper(trim(b.PRIMARY_CARDHOLDER_LAST_NAME)) = upper(trim(up.LAST_NAME))\n                           and trim(b.PRIMARY_PHONE_NUMBER) = trim(up.PHONE_NUMBER)\nleft join joint_users ja on up.USER_ID = ja.USER_ID\nwhere a.user_id is null\nand b.rn = 1\nand ja.USER_ID is null;\n\nupdate tmp_card\nset tmp_card.user_id = src.USER_ID,\n    tmp_card.IS_JOINT_ACCOUNT = coalesce(a.IS_JOINT_ACCOUNT::varchar(10),a2.IS_JOINT_ACCOUNT::varchar(10),'Unknown'),\n    tmp_card.account_holder_type = case when a.USER_ID is not null then 'Primary'\n                                        when a2.JOINT_ACCOUNT_SECONDARY_USER_ID is not null then 'Secondary'\n                                        else 'Unknown' end,\n    tmp_card.data_issue = case when a.USER_ID is not null or a2.USER_ID is not null then 'none'\n                               else 'no record for user_id in web_db.user_account' end\nfrom tmp_user_id_fourth_try src\nleft join bi.DT_ACCOUNTS a on src.USER_ID = a.USER_ID and a.ACCOUNT_TYPE = 'Checking'\nleft join bi.DT_ACCOUNTS a2 on src.USER_ID = a2.JOINT_ACCOUNT_SECONDARY_USER_ID and a2.ACCOUNT_TYPE = 'Checking'\nwhere tmp_card.CARD_ID = src.CARD_ID\nand tmp_card.user_id is null;\n\ndrop table if exists rdl.card_reference_new;\ncreate table rdl.card_reference_new as\nwith raw_galileo_account_card_data as (\n    select *,\n           row_number() over (partition by CARD_ID order by file_date desc) rn\n    from rdl.raw_galileo_account_card_data\n)\n, raw_galileo_account_card_data_asc as (\n    select *,\n           row_number() over (partition by CARD_ID order by file_date asc) rn\n    from rdl.raw_galileo_account_card_data\n)\nselect a.*, b.PRODUCT_ID, gl.DESCRIPTION as product_id_description, c.FILE_DATE as card_create_date\nfrom tmp_card a\nleft join raw_galileo_account_card_data b on a.CARD_ID = b.CARD_ID and b.rn = 1\nleft join WEB_DB.GALILEO_LOOKUP gl on b.PRODUCT_ID = gl.code\n                                  and gl.file = 'C'\n                                  and gl.FIELD_NAME = 'UNIQUE PRODUCT ID'\nleft join raw_galileo_account_card_data_asc c on a.CARD_ID = c.CARD_ID and c.rn = 1\n;\n\nALTER TABLE IF EXISTS rdl.card_reference RENAME TO rdl.card_reference_old;\nALTER TABLE IF EXISTS rdl.card_reference_new RENAME TO rdl.card_reference;\nDROP TABLE IF EXISTS rdl.card_reference_old;\n\ngrant select on rdl.card_reference to role looker_role;\ngrant select on rdl.card_reference to role data_engineering_group;\ngrant select on rdl.card_reference to role data_science_analytics;\ngrant select on rdl.card_reference to role read_only_internal_users;\n\n\n--add unique_account_id\nalter table rdl.CARD_REFERENCE add unique_account_id varchar(50) null;\n\ndrop table if exists tmp_id_list;\ncreate temp table tmp_id_list as\nselect USER_ID, UNIQUE_ACCOUNT_ID, SPEND_GALILEO_PRN as prn, 'Spend' as type\nfrom bi.DT_ACCOUNTS\nwhere ACCOUNT_TYPE = 'Checking'\nand GALILEO_ID is not null\nand USER_ID != 902610\nunion\n--USER_ID = 902610 has two rows in dt_accounts due to spend and save being under different account_id's\nselect USER_ID, UNIQUE_ACCOUNT_ID, SPEND_GALILEO_PRN as prn, 'Spend' as type\nfrom bi.DT_ACCOUNTS\nwhere ACCOUNT_TYPE = 'Checking'\nand GALILEO_ID is not null\nand USER_ID = 902610\nand GALILEO_ACCOUNT_ID = 2341951\nunion\nselect USER_ID, UNIQUE_ACCOUNT_ID, SAVE_GALILEO_PRN as prn, 'Save' as type\nfrom bi.DT_ACCOUNTS\nwhere ACCOUNT_TYPE = 'Checking'\nand DT_ACCOUNTS.GALILEO_SAVE_ID is not null\nand USER_ID != 902610\nunion\n--USER_ID = 902610 has two rows in dt_accounts due to spend and save being under different account_id's\nselect USER_ID, UNIQUE_ACCOUNT_ID, SAVE_GALILEO_PRN as prn, 'Save' as type\nfrom bi.DT_ACCOUNTS\nwhere ACCOUNT_TYPE = 'Checking'\nand DT_ACCOUNTS.GALILEO_SAVE_ID is not null\nand USER_ID = 902610\nand GALILEO_ACCOUNT_ID = 2340171\nunion\nselect JOINT_ACCOUNT_SECONDARY_USER_ID, UNIQUE_ACCOUNT_ID, JOINT_ACCOUNT_SECONDARY_SPEND_GALILEO_PRN as prn, 'Spend' as type\nfrom bi.DT_ACCOUNTS\nwhere ACCOUNT_TYPE = 'Checking'\nand GALILEO_ID is not null\nand JOINT_ACCOUNT_SECONDARY_USER_ID is not null\nunion\nselect JOINT_ACCOUNT_SECONDARY_USER_ID, UNIQUE_ACCOUNT_ID, JOINT_ACCOUNT_SECONDARY_SAVE_GALILEO_PRN as prn, 'Save' as type\nfrom bi.DT_ACCOUNTS\nwhere ACCOUNT_TYPE = 'Checking'\nand GALILEO_SAVE_ID is not null\nand JOINT_ACCOUNT_SECONDARY_USER_ID is not null;\n\n--prn to prn match\nupdate rdl.CARD_REFERENCE\nset unique_account_id = src.UNIQUE_ACCOUNT_ID\nfrom tmp_id_list src\nwhere rdl.CARD_REFERENCE.USER_ID = src.USER_ID\nand rdl.CARD_REFERENCE.card_prn = src.prn;\n\n--spend prn to prn match -- to catch virtual cards\nupdate rdl.CARD_REFERENCE\nset unique_account_id = src.UNIQUE_ACCOUNT_ID\nfrom tmp_id_list src\nwhere rdl.CARD_REFERENCE.USER_ID = src.USER_ID\nand rdl.CARD_REFERENCE.SPEND_PRN = src.prn\nand rdl.CARD_REFERENCE.unique_account_id is null;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967686":{"id":2967686,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-112,"y":64,"width":32,"height":32,"inputConnectorIDs":[2967700],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2967697],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"log error"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--log error\ninsert into etl.issue_log\n(issue_program, issue_description, issue_count, issue_object, issue_identifier, issue_priority)\nselect\n       'Card Reference Table',\n       'An error occurred during creation of rdl.card_reference - please check the Matillion job history',\n        null,\n       'rdl.card_reference',\n        null,\n       'high';"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967687":{"id":2967687,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":-240,"y":64,"width":32,"height":32,"inputConnectorIDs":[2967698,2967699],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2967700],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"or"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967690":{"id":2967690,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-400,"y":-32,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2967696],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"start"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2967682":{"id":2967682,"sourceID":2967685,"targetID":2967684},"2967683":{"id":2967683,"sourceID":2967684,"targetID":2967680}},"failureConnectors":{"2967698":{"id":2967698,"sourceID":2967684,"targetID":2967687},"2967699":{"id":2967699,"sourceID":2967685,"targetID":2967687}},"unconditionalConnectors":{"2967696":{"id":2967696,"sourceID":2967690,"targetID":2967685},"2967697":{"id":2967697,"sourceID":2967686,"targetID":2967681},"2967700":{"id":2967700,"sourceID":2967687,"targetID":2967686}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{}},"info":{"name":"card_reference","description":"","type":"ORCHESTRATION","tag":"685045c3-5ef3-4aaf-964b-37b4966cdbd8"}}