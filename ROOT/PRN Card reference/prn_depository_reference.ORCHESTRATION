{"job":{"components":{"2967652":{"id":2967652,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":98,"y":35,"width":32,"height":32,"inputConnectorIDs":[2967651],"outputSuccessConnectorIDs":[2967678],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"unique_account_id"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"alter table rdl.PRN_DEPOSITORY_REFERENCE add unique_account_id varchar(50) null;\n\ndrop table if exists tmp_id_list;\ncreate temp table tmp_id_list as\nselect USER_ID, UNIQUE_ACCOUNT_ID, SPEND_GALILEO_PRN as prn, 'Spend' as type\nfrom bi.DT_ACCOUNTS\nwhere ACCOUNT_TYPE = 'Checking'\nand GALILEO_ID is not null\nand USER_ID != 902610\nunion\n--USER_ID = 902610 has two rows in dt_accounts due to spend and save being under different account_id's\nselect USER_ID, UNIQUE_ACCOUNT_ID, SPEND_GALILEO_PRN as prn, 'Spend' as type\nfrom bi.DT_ACCOUNTS\nwhere ACCOUNT_TYPE = 'Checking'\nand GALILEO_ID is not null\nand USER_ID = 902610\nand GALILEO_ACCOUNT_ID = 2341951\nunion\nselect USER_ID, UNIQUE_ACCOUNT_ID, SAVE_GALILEO_PRN as prn, 'Save' as type\nfrom bi.DT_ACCOUNTS\nwhere ACCOUNT_TYPE = 'Checking'\nand DT_ACCOUNTS.GALILEO_SAVE_ID is not null\nand USER_ID != 902610\nunion\n--USER_ID = 902610 has two rows in dt_accounts due to spend and save being under different account_id's\nselect USER_ID, UNIQUE_ACCOUNT_ID, SAVE_GALILEO_PRN as prn, 'Save' as type\nfrom bi.DT_ACCOUNTS\nwhere ACCOUNT_TYPE = 'Checking'\nand DT_ACCOUNTS.GALILEO_SAVE_ID is not null\nand USER_ID = 902610\nand GALILEO_ACCOUNT_ID = 2340171\nunion\nselect JOINT_ACCOUNT_SECONDARY_USER_ID, UNIQUE_ACCOUNT_ID, JOINT_ACCOUNT_SECONDARY_SPEND_GALILEO_PRN as prn, 'Spend' as type\nfrom bi.DT_ACCOUNTS\nwhere ACCOUNT_TYPE = 'Checking'\nand GALILEO_ID is not null\nand JOINT_ACCOUNT_SECONDARY_USER_ID is not null\nunion\nselect JOINT_ACCOUNT_SECONDARY_USER_ID, UNIQUE_ACCOUNT_ID, JOINT_ACCOUNT_SECONDARY_SAVE_GALILEO_PRN as prn, 'Save' as type\nfrom bi.DT_ACCOUNTS\nwhere ACCOUNT_TYPE = 'Checking'\nand GALILEO_SAVE_ID is not null\nand JOINT_ACCOUNT_SECONDARY_USER_ID is not null;\n\n--prn to prn match\nupdate rdl.PRN_DEPOSITORY_REFERENCE\nset unique_account_id = src.UNIQUE_ACCOUNT_ID\nfrom tmp_id_list src\nwhere rdl.PRN_DEPOSITORY_REFERENCE.USER_ID = src.USER_ID \nand rdl.PRN_DEPOSITORY_REFERENCE.prn = src.prn;  \n\n--current_prn to prn match - these would be extra prn's\nupdate rdl.PRN_DEPOSITORY_REFERENCE\nset unique_account_id = src.UNIQUE_ACCOUNT_ID\nfrom tmp_id_list src\nwhere rdl.PRN_DEPOSITORY_REFERENCE.USER_ID = src.USER_ID\nand rdl.PRN_DEPOSITORY_REFERENCE.CURRENT_PRN = src.prn\nand rdl.PRN_DEPOSITORY_REFERENCE.unique_account_id is null;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967653":{"id":2967653,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":224,"y":32,"width":32,"height":32,"inputConnectorIDs":[2967654],"outputSuccessConnectorIDs":[2967651],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"reporting categories"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--reporting categories\n\nalter table rdl.PRN_DEPOSITORY_REFERENCE add report_category varchar(50) null;\n\n--acount mgmt manual review\nupdate rdl.PRN_DEPOSITORY_REFERENCE\nset report_category = 'Account Management - Manual Review'\nwhere CUST_MASTER_BALANCE != 0\nand (prn != CURRENT_PRN or CURRENT_PRN is null or DEPOSITORY_ID is null);\n\n--close the one that is not the current PRN (potentially not perfect)\n--most of these are account rotations\ndrop table if exists tmp_multiple_prn;\ncreate temp table tmp_multiple_prn as\nwith a as (\n    select USER_ID,\n           TYPE_OF_ACCOUNT,\n           sum(case when CUST_MASTER_BALANCE != 0 then 1 else 0 end) num_non_zero_balances,\n           min(ACCOUNT_HOLDER_TYPE) as ACCOUNT_HOLDER_TYPE,\n           min(IS_GALILEO_ACCOUNT_ID_SHARED) as IS_GALILEO_ACCOUNT_ID_SHARED,\n           min(IS_JOINT_ACCOUNT) as IS_JOINT_ACCOUNT\n    from rdl.PRN_DEPOSITORY_REFERENCE\n    where PRN_STATUS not ilike '%cancel%'\n      and PRN_STATUS not ilike '%charge%'\n      and user_id is not null\n    group by 1, 2\n    having count(distinct prn) > 1\n)\nselect a.*,\n       case when b.USER_ID is not null or d.JOINT_ACCOUNT_SECONDARY_USER_ID is not null\n            then true else false end as account_rotated\nfrom a\nleft join WEB_DB.ACCOUNT_ROTATION_PRN_HISTORY b on a.USER_ID = b.USER_ID\nleft join (select distinct b.JOINT_ACCOUNT_SECONDARY_USER_ID\n           from WEB_DB.ACCOUNT_ROTATION_PRN_HISTORY c\n           join bi.DT_ACCOUNTS b on c.USER_ID = b.USER_ID\n           where b.IS_JOINT_ACCOUNT = true\n           and b.ACCOUNT_TYPE = 'Checking') d on a.USER_ID = d.JOINT_ACCOUNT_SECONDARY_USER_ID\n;\n\nupdate rdl.PRN_DEPOSITORY_REFERENCE\nset report_category = 'Surplus Accounts from Account Rotation'\nfrom (\n         select b.USER_ID, b.PRN\n         from tmp_multiple_prn a\n                  join rdl.PRN_DEPOSITORY_REFERENCE b on a.USER_ID = b.USER_ID and a.TYPE_OF_ACCOUNT = b.TYPE_OF_ACCOUNT\n         where a.account_rotated = true\n           and b.PRN_STATUS not ilike '%cancel%'\n           and b.PRN_STATUS not ilike '%charge%'\n           and prn not in (select prn\n                           from rdl.PRN_DEPOSITORY_REFERENCE\n                           where prn is not null\n                             and CUST_MASTER_BALANCE != 0\n                             and (prn != CURRENT_PRN or CURRENT_PRN is null or DEPOSITORY_ID is null))\n     ) src\nwhere rdl.PRN_DEPOSITORY_REFERENCE.USER_ID = src.USER_ID \nand rdl.PRN_DEPOSITORY_REFERENCE.PRN = src.PRN\nand rdl.PRN_DEPOSITORY_REFERENCE.PRN != rdl.PRN_DEPOSITORY_REFERENCE.CURRENT_PRN;      \n\nupdate rdl.PRN_DEPOSITORY_REFERENCE\nset report_category = 'Surplus Accounts from Unknown Cause'\nfrom (\n         select b.USER_ID, b.PRN\n         from tmp_multiple_prn a\n                  join rdl.PRN_DEPOSITORY_REFERENCE b on a.USER_ID = b.USER_ID and a.TYPE_OF_ACCOUNT = b.TYPE_OF_ACCOUNT\n         where a.account_rotated = false\n           and b.PRN_STATUS not ilike '%cancel%'\n           and b.PRN_STATUS not ilike '%charge%'\n           and prn not in (select prn\n                           from rdl.PRN_DEPOSITORY_REFERENCE\n                           where prn is not null\n                             and CUST_MASTER_BALANCE != 0\n                             and (prn != CURRENT_PRN or CURRENT_PRN is null or DEPOSITORY_ID is null))\n     ) src\nwhere rdl.PRN_DEPOSITORY_REFERENCE.USER_ID = src.USER_ID \nand rdl.PRN_DEPOSITORY_REFERENCE.PRN = src.PRN\nand rdl.PRN_DEPOSITORY_REFERENCE.PRN != rdl.PRN_DEPOSITORY_REFERENCE.CURRENT_PRN;    "}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967655":{"id":2967655,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-64,"y":32,"width":32,"height":32,"inputConnectorIDs":[2967678],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"clean up"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--cleaning up wrong depository reference\ndelete\nfrom rdl.PRN_DEPOSITORY_REFERENCE\nwhere PRN = '223101774782'\nand DEPOSITORY_ID = 822028;\n\n--clean up wrong current prn\n--this user has multiple spend PRN's in user_payment_account causing the issue\ndelete\nfrom rdl.PRN_DEPOSITORY_REFERENCE\nwhere PRN = '223105510828'\nand current_prn = '223105510810';"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967656":{"id":2967656,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":32,"y":-80,"width":32,"height":32,"inputConnectorIDs":[2967677],"outputSuccessConnectorIDs":[2967679],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"fill in missing depository_id's"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"update rdl.PRN_DEPOSITORY_REFERENCE\nset DEPOSITORY_ID = src.DEPOSITORY_ID\nfrom (select a.prn, b.DEPOSITORY_ID\n      from rdl.PRN_DEPOSITORY_REFERENCE a\n      join BANK_DB.DEBIT_CARD b on a.PRN = b.PRN\n      where a.DEPOSITORY_ID is null\n      and b.DEPOSITORY_ID != 0) src\nwhere rdl.PRN_DEPOSITORY_REFERENCE.prn = src.prn\nand rdl.PRN_DEPOSITORY_REFERENCE.DEPOSITORY_ID is null;\n\n\ndrop table if exists tmp_data;\ncreate temp table tmp_data as\nwith card as (\n    select *,\n           l.DESCRIPTION as card_status,\n           row_number() over (partition by GALILEO_ACCOUNT_ID order by FILE_DATE desc) as rn\n    from rdl.RAW_GALILEO_ACCOUNT_CARD_DATA c\n    join WEB_DB.GALILEO_LOOKUP l on c.STATUS = l.code and l.FIELD_NAME = 'CARD STATUS'\n    where nullif(trim(c.PRN),'') is not null --only excludes one account (656910) with no PRN in AOG_DB.GALILEO_ACCOUNTS either\n)\n, card_non_shared_galileo_account_id as (\n    select GALILEO_ACCOUNT_ID\n    from card\n    where rn = 1\n    group by 1\n    having count(distinct CARD_ID) = 1\n)\nselect r.GALILEO_ACCOUNT_ID, \n       c.PRN as prn_c, \n       dc.prn as prn_dc,\n       dc.DEPOSITORY_ID as depository_id_dc,\n       dc.USER_ID as user_id_dc\nfrom rdl.PRN_DEPOSITORY_REFERENCE r\njoin card_non_shared_galileo_account_id cn on r.GALILEO_ACCOUNT_ID = cn.GALILEO_ACCOUNT_ID\njoin card c on cn.GALILEO_ACCOUNT_ID = c.GALILEO_ACCOUNT_ID\nleft join BANK_DB.DEBIT_CARD dc on c.CARD_ID = dc.GALILEO_CARD_ID and dc.DEPOSITORY_ID != 0\nwhere (r.PRN is null or r.DEPOSITORY_ID is null)\nand c.rn = 1\nand (prn_dc is not null or depository_id_dc is not null or user_id_dc is not null);\n\nupdate rdl.PRN_DEPOSITORY_REFERENCE\nset DEPOSITORY_ID = case when rdl.PRN_DEPOSITORY_REFERENCE.DEPOSITORY_ID is null \n                         then src.depository_id_dc end,\n    PRN = case when rdl.PRN_DEPOSITORY_REFERENCE.PRN is null \n               then ifnull(src.prn_c, src.prn_dc) end,\n    USER_ID = case when rdl.PRN_DEPOSITORY_REFERENCE.USER_ID is null \n               then src.user_id_dc end                                     \nfrom tmp_data src\nwhere rdl.PRN_DEPOSITORY_REFERENCE.GALILEO_ACCOUNT_ID = src.GALILEO_ACCOUNT_ID\nand (rdl.PRN_DEPOSITORY_REFERENCE.DEPOSITORY_ID is null\n     or rdl.PRN_DEPOSITORY_REFERENCE.prn is null);"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967657":{"id":2967657,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-160,"y":-80,"width":32,"height":32,"inputConnectorIDs":[2967676],"outputSuccessConnectorIDs":[2967677],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"depository_id correction"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop table if exists tmp_correction;\ncreate temp table tmp_correction as\nselect 651853 as depository_id, 441767 as galileo_account_id\nunion select 651854, 441766\nunion select 272950, 62075\nunion select 619062, 408915\nunion select 619064, 408941\nunion select 618905, 408765\nunion select 615663, 405529\nunion select 615664, 405530\nunion select 651826, 441730\nunion select 211680, 39\n;\n\nupdate rdl.PRN_DEPOSITORY_REFERENCE\nset DEPOSITORY_ID = c.depository_id\nfrom tmp_correction c \nwhere rdl.PRN_DEPOSITORY_REFERENCE.GALILEO_ACCOUNT_ID = c.galileo_account_id;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967658":{"id":2967658,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":368,"y":32,"width":32,"height":32,"inputConnectorIDs":[2967672],"outputSuccessConnectorIDs":[2967654],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"missing current prn"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--current prn - spend\nupdate rdl.PRN_DEPOSITORY_REFERENCE\nset CURRENT_PRN = src.new_current_prn\nfrom (select a.PRN, b.ACCOUNT_NUMBER as new_current_prn\n        from rdl.PRN_DEPOSITORY_REFERENCE a\n        join WEB_DB.USER_PAYMENT_ACCOUNT b on a.USER_ID = b.USER_ID\n        where a.CURRENT_PRN is null and a.prn is not null\n        and a.TYPE_OF_ACCOUNT = 'Spend'\n        and b.NAME = 'Aspiration Spend') src\nwhere rdl.PRN_DEPOSITORY_REFERENCE.PRN = src.prn\nand rdl.PRN_DEPOSITORY_REFERENCE.CURRENT_PRN is null;\n\n--current prn - save\nupdate rdl.PRN_DEPOSITORY_REFERENCE\nset CURRENT_PRN = src.new_current_prn\nfrom (select a.PRN, b.ACCOUNT_NUMBER as new_current_prn\n        from rdl.PRN_DEPOSITORY_REFERENCE a\n        join WEB_DB.USER_PAYMENT_ACCOUNT b on a.USER_ID = b.USER_ID\n        where a.CURRENT_PRN is null and a.prn is not null\n        and a.TYPE_OF_ACCOUNT = 'Save'\n        and b.NAME = 'Aspiration Save') src\nwhere rdl.PRN_DEPOSITORY_REFERENCE.PRN = src.prn\nand rdl.PRN_DEPOSITORY_REFERENCE.CURRENT_PRN is null;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967659":{"id":2967659,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":208,"y":-80,"width":32,"height":32,"inputConnectorIDs":[2967679],"outputSuccessConnectorIDs":[2967673],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"fill in missing depository_id's - balances considered"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--fill in missing dep_id's where there are no differing balances\ndrop table if exists tmp_more_depository_id;\ncreate temp table tmp_more_depository_id as\nwith depository_user as (\n    select distinct ua.user_id,\n                    d.id as depository_id,\n                    case d.PRODUCT_ID when 4 then 'Spend' when 5 then 'Save' end as TYPE_OF_ACCOUNT\n    from WEB_DB.DEPOSITORY d\n    join WEB_DB.ACCOUNT a on d.ACCOUNT_ID = a.id\n    join WEB_DB.USER_ACCOUNT ua on a.id = ua.ACCOUNT_ID\n    where product_id in (4,5)\n)\n, single_user_per_depository as (\n    select depository_id\n    from depository_user\n    group by 1\n    having count(distinct USER_ID) = 1\n)\n, single_type_of_depository as (\n    select USER_ID, TYPE_OF_ACCOUNT\n    from depository_user\n    group by 1,2\n    having count(distinct depository_id) = 1\n)\n, balance_count as (\n    select USER_ID, TYPE_OF_ACCOUNT,\n           sum(case when CUST_MASTER_BALANCE = 0 then 0 else 1 end) num_balances\n    from rdl.PRN_DEPOSITORY_REFERENCE\n    group by 1,2\n)\nselect a.GALILEO_ACCOUNT_ID, a.user_id, a.TYPE_OF_ACCOUNT,\n       b.depository_id\nfrom rdl.PRN_DEPOSITORY_REFERENCE a\njoin depository_user c on a.USER_ID = c.USER_ID and a.TYPE_OF_ACCOUNT = c.TYPE_OF_ACCOUNT\njoin single_user_per_depository b on c.depository_id = b.depository_id\njoin single_type_of_depository d on c.USER_ID = d.USER_ID and c.TYPE_OF_ACCOUNT = d.TYPE_OF_ACCOUNT\njoin balance_count e on c.USER_ID = e.USER_ID and c.TYPE_OF_ACCOUNT = e.TYPE_OF_ACCOUNT\nwhere a.DEPOSITORY_ID is null\nand e.num_balances <= 1\n;\n\nupdate rdl.PRN_DEPOSITORY_REFERENCE\nset DEPOSITORY_ID = src.depository_id\nfrom tmp_more_depository_id src\nwhere rdl.PRN_DEPOSITORY_REFERENCE.GALILEO_ACCOUNT_ID = src.GALILEO_ACCOUNT_ID\nand rdl.PRN_DEPOSITORY_REFERENCE.USER_ID = src.user_id\nand rdl.PRN_DEPOSITORY_REFERENCE.TYPE_OF_ACCOUNT = src.TYPE_OF_ACCOUNT\nand rdl.PRN_DEPOSITORY_REFERENCE.DEPOSITORY_ID is null;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967660":{"id":2967660,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":-512,"y":-80,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2967675],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Start","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967662":{"id":2967662,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":368,"y":-80,"width":32,"height":32,"inputConnectorIDs":[2967673],"outputSuccessConnectorIDs":[2967672],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"fill in missing user_id's"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--more user_ids via name/phone match\ndrop table if exists tmp_user_id;\ncreate temp table tmp_user_id as\nwith cust_master_grouped as (\n    select GALILEO_ACCOUNT_ID,\n           ifnull(nullif(ifnull(PRIMARY_CARDHOLDER_FIRST_NAME,'') || ifnull(PRIMARY_CARDHOLDER_LAST_NAME,'')\n               || ifnull(PRIMARY_PHONE_NUMBER,''),''),GALILEO_ACCOUNT_ID) as identifier\n    from rdl.RAW_GALILEO_CUSTOMER_MASTER_DATA\n    group by 1,2\n    having count(distinct identifier) = 1\n)\n, cust_master as (\n    select *, row_number() over (partition by GALILEO_ACCOUNT_ID order by file_date desc) as rn\n    from rdl.RAW_GALILEO_CUSTOMER_MASTER_DATA\n)\n, valid_joint_accounts AS (\n     SELECT ua.account_id\n          , count(1) cnt\n     FROM web_db.user_account ua\n     JOIN web_db.depository d ON ua.account_id = d.account_id\n     JOIN web_db.account a ON ua.account_id = a.id\n     WHERE product_id IN (4,5)\n       AND ua.user_account_type = 2\n     GROUP BY ua.account_id\n     HAVING cnt >= 2\n )\n , joint_users as (\n    select ua.USER_ID\n    from valid_joint_accounts a\n    join WEB_DB.USER_ACCOUNT ua on a.ACCOUNT_ID = ua.ACCOUNT_ID\n )\nselect distinct a.GALILEO_ACCOUNT_ID, up.USER_ID\nfrom rdl.PRN_DEPOSITORY_REFERENCE a\njoin cust_master b on a.GALILEO_ACCOUNT_ID = b.GALILEO_ACCOUNT_ID\njoin cust_master_grouped c on b.GALILEO_ACCOUNT_ID = c.GALILEO_ACCOUNT_ID\njoin WEB_DB.USER_PROFILE up on upper(trim(b.PRIMARY_CARDHOLDER_FIRST_NAME)) = upper(trim(up.FIRST_NAME))\n                           and upper(trim(b.PRIMARY_CARDHOLDER_LAST_NAME)) = upper(trim(up.LAST_NAME))\n                           and trim(b.PRIMARY_PHONE_NUMBER) = trim(up.PHONE_NUMBER)\nleft join joint_users ja on up.USER_ID = ja.USER_ID\nwhere a.user_id is null\nand b.rn = 1\nand ja.USER_ID is null;\n\nupdate rdl.PRN_DEPOSITORY_REFERENCE \nset user_id = src.USER_ID,\n    IS_JOINT_ACCOUNT = coalesce(a.IS_JOINT_ACCOUNT,a2.IS_JOINT_ACCOUNT),\n    account_holder_type = case when a.USER_ID is not null then 'Primary'\n                                        when a2.JOINT_ACCOUNT_SECONDARY_USER_ID is not null then 'Secondary'\n                                        else 'Unknown' end\nfrom tmp_user_id src\nleft join bi.DT_ACCOUNTS a on src.USER_ID = a.USER_ID and a.ACCOUNT_TYPE = 'Checking'\nleft join bi.DT_ACCOUNTS a2 on src.USER_ID = a2.JOINT_ACCOUNT_SECONDARY_USER_ID and a2.ACCOUNT_TYPE = 'Checking'\nwhere rdl.PRN_DEPOSITORY_REFERENCE.GALILEO_ACCOUNT_ID = src.GALILEO_ACCOUNT_ID\nand rdl.PRN_DEPOSITORY_REFERENCE.user_id is null;\n\n\n--get more users with depository_id's\ndrop table if exists tmp_depository_user;\ncreate temp table tmp_depository_user as\nwith depository_user as (\n    select distinct ua.user_id,\n                    d.id as depository_id\n    from WEB_DB.DEPOSITORY d\n    join WEB_DB.ACCOUNT a on d.ACCOUNT_ID = a.id\n    join WEB_DB.USER_ACCOUNT ua on a.id = ua.ACCOUNT_ID\n    where d.id in (select depository_id from rdl.PRN_DEPOSITORY_REFERENCE where DEPOSITORY_ID is not null and USER_ID is null)\n    and product_id in (4,5)\n)\n, single_user_per_depository as (\n    select depository_id\n    from depository_user\n    group by 1\n    having count(distinct USER_ID) = 1\n)\nselect a.DEPOSITORY_ID, c.USER_ID\nfrom rdl.PRN_DEPOSITORY_REFERENCE a\njoin single_user_per_depository b on a.DEPOSITORY_ID = b.depository_id\njoin depository_user c on b.depository_id = c.depository_id\nwhere a.USER_ID is null;\n\nupdate rdl.PRN_DEPOSITORY_REFERENCE\nset USER_ID = src.USER_ID\nfrom tmp_depository_user src\nwhere rdl.PRN_DEPOSITORY_REFERENCE.DEPOSITORY_ID = src.DEPOSITORY_ID\nand rdl.PRN_DEPOSITORY_REFERENCE.USER_ID is null;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2967663":{"id":2967663,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":-368,"y":-80,"width":32,"height":32,"inputConnectorIDs":[2967675],"outputSuccessConnectorIDs":[2967676],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"rdl.prn_depository_reference"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"--PRN reference table - https://aspirationpartners.atlassian.net/browse/DATA-1125\n\nuse warehouse looker;\n\ndrop table if exists tmp_prn;\ncreate temp table tmp_prn as\nwith master_prn as (\n    select a.GALILEO_ACCOUNT_ID,\n           case b.DESCRIPTION\n            when 'Savings Account' then 'Save'\n            when 'Spending Account' then 'Spend'\n           end as TYPE_OF_ACCOUNT,\n           a.FILE_DATE,\n           c.DESCRIPTION as prn_status,\n           CONCAT(current_balance_sign,current_balance::decimal(13,2))::DEC(18,2) as cust_master_balance,\n           row_number() over (partition by a.GALILEO_ACCOUNT_ID order by FILE_DATE desc) as rn\n    from rdl.RAW_GALILEO_CUSTOMER_MASTER_DATA a\n    join WEB_DB.GALILEO_LOOKUP b on a.TYPE_OF_ACCOUNT = b.CODE and b.FILE = 'C' and b.FIELD_NAME = 'TYPE OF ACCOUNT'\n    left join WEB_DB.GALILEO_LOOKUP c on a.STATUS = c.code and c.file = 'C' and c.FIELD_NAME = 'STATUS'\n    where a.TYPE_OF_ACCOUNT in ('6','8')\n)\n, rotated as (\n    select\n        p.USER_ID,\n        p.NEW_SPEND_PRN as PRN,\n        p.NEW_SPEND_BALANCE_ID::varchar(50) as galileo_account_id,\n        a.ACCOUNT_NUMBER as ASPIRATION_ACCOUNT_NUMBER,\n        'Spend' as type_of_account\n    from WEB_DB.ACCOUNT_ROTATION_PRN_HISTORY p\n    join WEB_DB.USER_ACCOUNT ua on p.USER_ID = ua.USER_ID\n    join WEB_DB.ACCOUNT a on ua.ACCOUNT_ID = a.ID\n    where p.NEW_SPEND_PRN is not null\n    and a.ACCOUNT_TYPE_ID = 2\n    and exists (select 1 from WEB_DB.DEPOSITORY d where a.ID = d.ACCOUNT_ID and d.PRODUCT_ID in (4,5))\n    union\n    select\n        p.USER_ID,\n        p.NEW_SAVE_PRN as PRN,\n        p.NEW_SAVE_BALANCE_ID::varchar(50) as galileo_account_id,\n        a.ACCOUNT_NUMBER as ASPIRATION_ACCOUNT_NUMBER,\n        'Save' as type_of_account\n    from WEB_DB.ACCOUNT_ROTATION_PRN_HISTORY p\n    join WEB_DB.USER_ACCOUNT ua on p.USER_ID = ua.USER_ID\n    join WEB_DB.ACCOUNT a on ua.ACCOUNT_ID = a.ID and a.ACCOUNT_TYPE_ID = 2\n    where p.NEW_SAVE_PRN is not null\n    and a.ACCOUNT_TYPE_ID = 2\n    and exists (select 1 from WEB_DB.DEPOSITORY d where a.ID = d.ACCOUNT_ID and d.PRODUCT_ID in (4,5))\n)\n, card as (\n    select *,\n           l.DESCRIPTION as card_status,\n           row_number() over (partition by GALILEO_ACCOUNT_ID order by FILE_DATE desc) as rn\n    from rdl.RAW_GALILEO_ACCOUNT_CARD_DATA c\n    join WEB_DB.GALILEO_LOOKUP l on c.STATUS = l.code and l.FIELD_NAME = 'CARD STATUS'\n    where nullif(trim(c.PRN),'') is not null --only excludes one account (656910) with no PRN in AOG_DB.GALILEO_ACCOUNTS either\n    and c.TYPE_OF_CARD != '25' --excluding virtual cards\n)\n, balance as (\n    select b.PMT_REF_NO as prn,\n           b.FILE_DATE,\n           b.BAL_ID as GALILEO_ACCOUNT_ID,\n           b.BALANCE,\n           b.BALANCE_ASOF_DATE,\n           l.DESCRIPTION as product,\n           row_number() over (partition by PMT_REF_NO order by FILE_DATE desc) as rn\n    from rdl.BALANCE_REPORT_ACCT_PRN b\n    join WEB_DB.GALILEO_LOOKUP l on b.PROD_ID = l.code and l.FILE = 'T'\n    where l.DESCRIPTION not ilike '%virtual%' --eliminate virtual cards\n)\n, debit_card as (\n    select distinct prn, DEPOSITORY_ID, GALILEO_CARD_ID, USER_ID\n    from BANK_DB.DEBIT_CARD\n    where VIRTUAL = false\n    and DEPOSITORY_ID != 0\n)\n, upa as (\n    select ACCOUNT_NUMBER as prn, min(DEPOSITORY_ID) as DEPOSITORY_ID, min(USER_ID) as user_id\n    from WEB_DB.USER_PAYMENT_ACCOUNT\n    where NAME in ('Aspiration Save','Aspiration Spend')\n    and ACCOUNT_NUMBER != 'XXXXXXXXXXXX'\n    group by 1\n    --having count(distinct DEPOSITORY_ID) = 1\n)\n, galileo_accounts as (\n    select ga.GALILEO_ACCOUNT_NUMBER,\n           ga.ASPIRATION_USER_ID,\n           ga.CARD_ID,\n           ga.ASPIRATION_ACCOUNT_NUMBER,\n           ga.ASPIRATION_APPLICATION_ID,\n           case ga.PMT_REF_NO\n              when 'XXXXXXXXXXXX'\n              then case ga.GALILEO_ACCOUNT_NUMBER\n                    when '1388396' then '223111874903'\n                    when '1388400' then '223111874945'\n                    when '1388401' then '223111874952'\n                    when '1388399' then '223111874937'\n                    when '1388397' then '223111874911'\n                    when '1388395' then '223111874895'\n                    when '1388398' then '223111874929'\n                    when '1388394' then '223111874887'\n                    else ga.PMT_REF_NO\n                   end\n              else ga.PMT_REF_NO\n           end as PMT_REF_NO,\n           row_number() over (partition by GALILEO_ACCOUNT_NUMBER order by CREATED_AT) as rn\n    from AOG_DB.GALILEO_ACCOUNTS ga\n)\n, result as (\n    select\n        mp.GALILEO_ACCOUNT_ID,\n        mp.prn_status,\n        mp.cust_master_balance,\n        mp.FILE_DATE as cust_master_file_date,\n        mp.TYPE_OF_ACCOUNT,\n        ga.PMT_REF_NO as prn_ga,\n        r.PRN as prn_rotated,\n        c.prn as prn_card,\n        b.prn as prn_balance,\n        b.BALANCE,\n        b.BALANCE_ASOF_DATE,\n        dc.DEPOSITORY_ID as DEPOSITORY_ID_DC,\n        coalesce(prn_ga, prn_rotated, prn_card, prn_balance)::numeric(20,0) as prn,\n        ga.ASPIRATION_USER_ID as user_id_ga,\n        r.USER_ID as user_id_rotated,\n        dc.user_id as user_id_dc\n    from master_prn mp\n    left join galileo_accounts ga on mp.GALILEO_ACCOUNT_ID = ga.GALILEO_ACCOUNT_NUMBER --and ga.rn = 1\n    left join rotated r on mp.GALILEO_ACCOUNT_ID = r.galileo_account_id\n    left join card c on mp.GALILEO_ACCOUNT_ID = c.GALILEO_ACCOUNT_ID and c.rn = 1\n    left join balance b on mp.GALILEO_ACCOUNT_ID = b.GALILEO_ACCOUNT_ID and b.rn = 1\n    left join debit_card dc on c.CARD_ID = dc.GALILEO_CARD_ID\n    where mp.rn = 1\n    --and mp.GALILEO_ACCOUNT_ID = '1513495'\n)\n, txn as (\n    select prn::bigint as prn, max(TRANSACTION_DATE::date) as MOST_RECENT_TRANSACTION_DATE\n    from bi.DT_DEPOSITORY_TRANSACTIONS\n    group by 1\n)\n, result2 as (\n    select distinct\n           r.GALILEO_ACCOUNT_ID,\n           r.prn,\n           r.cust_master_balance,\n           r.cust_master_file_date,\n           r.prn_status,\n           r.TYPE_OF_ACCOUNT,\n           coalesce(upa.DEPOSITORY_ID, DEPOSITORY_ID_DC) as DEPOSITORY_ID,\n           coalesce(user_id_ga, user_id_rotated, upa.user_id, user_id_dc) as user_id,\n           case when upa.prn is not null then upa.prn else null end as current_prn\n    from result r\n    left join upa on r.prn = upa.prn\n    --where r.prn = '223101464657'\n)\n, final as (\n    select f.*,\n           case when a1.IS_JOINT_ACCOUNT = true\n                then true\n                when a2.IS_JOINT_ACCOUNT = true\n                then true\n                else false\n           end as IS_JOINT_ACCOUNT,\n           case when a1.IS_JOINT_ACCOUNT = true\n                then 'Primary'\n                when a2.IS_JOINT_ACCOUNT = true\n                then 'Secondary'\n                else 'Primary'\n           end as account_holder_type,\n           t.MOST_RECENT_TRANSACTION_DATE\n    from result2 f\n    left join bi.DT_ACCOUNTS a1 on f.user_id = a1.USER_ID and a1.ACCOUNT_TYPE = 'Checking'\n    left join bi.DT_ACCOUNTS a2 on f.user_id = a2.JOINT_ACCOUNT_SECONDARY_USER_ID and a2.ACCOUNT_TYPE = 'Checking'\n    left join txn t on f.prn = t.prn\n)\nselect distinct f.GALILEO_ACCOUNT_ID, f.prn, f.cust_master_balance, f.cust_master_file_date,\n           f.prn_status, f.TYPE_OF_ACCOUNT, f.DEPOSITORY_ID, f.user_id,\n           f.IS_JOINT_ACCOUNT, f.account_holder_type, f.MOST_RECENT_TRANSACTION_DATE,\n           coalesce(cp.current_prn, cp2.current_prn, f.prn)::bigint as current_prn\nfrom final f\nleft join final cp on f.GALILEO_ACCOUNT_ID = cp.GALILEO_ACCOUNT_ID\n                  and f.TYPE_OF_ACCOUNT = cp.TYPE_OF_ACCOUNT\n                  and f.IS_JOINT_ACCOUNT = cp.IS_JOINT_ACCOUNT\n                  and ifnull(f.user_id,-99999) = ifnull(cp.user_id,-99999)\n                  and cp.current_prn is not null\nleft join final cp2 on f.user_id = cp2.user_id\n                  and f.TYPE_OF_ACCOUNT = cp2.TYPE_OF_ACCOUNT\n                  and f.IS_JOINT_ACCOUNT = cp2.IS_JOINT_ACCOUNT\n                  and f.GALILEO_ACCOUNT_ID != cp2.GALILEO_ACCOUNT_ID\n                  and cp2.current_prn is not null\n--where f.user_id =  503882\n;\n\n--looks like there are some joint accounts not being designated as such via accounts/account_user data\n--they share a galileo_account_id; update below will set one user as primary/one as secondary\nupdate tmp_prn\nset account_holder_type = case when tmp_prn.prn = src.max_prn then 'secondary' else 'primary' end\nfrom (\n      SELECT d.GALILEO_ACCOUNT_ID,\n             MAX(prn) AS max_prn,\n             min(prn) AS min_prn\n      FROM tmp_prn d\n      GROUP BY 1\n     ) src\nwhere tmp_prn.GALILEO_ACCOUNT_ID = src.GALILEO_ACCOUNT_ID\nand tmp_prn.GALILEO_ACCOUNT_ID in\n(\n    select GALILEO_ACCOUNT_ID\n    from tmp_prn\n    where IS_JOINT_ACCOUNT = false\n    group by 1\n    having count(distinct user_id)>1\n);\n\n\n--note shared balance_id's\nalter table tmp_prn add is_galileo_account_id_shared boolean default false;\n\nupdate tmp_prn\nset is_galileo_account_id_shared = true\nwhere GALILEO_ACCOUNT_ID in (\n    select GALILEO_ACCOUNT_ID\n    from tmp_prn\n    group by 1\n    having count(distinct user_id) > 1\n);\n\n--try to fill in missing depository id's from most transaction data\nupdate tmp_prn\nset tmp_prn.DEPOSITORY_ID = src.DEPOSITORY_ID\nfrom (\n    select a.GALILEO_ACCOUNT_ID, b.DEPOSITORY_ID, max(b.TRANSACTION_DATE) as max_txn_dt,\n           row_number() over (partition by a.GALILEO_ACCOUNT_ID order by max_txn_dt desc) as rn\n    from WEB_DB.GALILEO_POSTED_TRANSACTION a\n    join WEB_DB.POSTED_TRANSACTION b on a.POSTED_TRANSACTION_ID = b.id\n    where b.DEPOSITORY_ID != 0\n    group by 1,2) src\nwhere tmp_prn.GALILEO_ACCOUNT_ID = src.GALILEO_ACCOUNT_ID\nand src.rn = 1\nand tmp_prn.DEPOSITORY_ID is null;\n\n\n\n\n\ndrop table if exists rdl.prn_depository_reference_new;\ncreate table rdl.prn_depository_reference_new as\nselect p.*, u.uuid\nfrom tmp_prn p\nleft join web_db._user u on p.user_id = u.id;\n\n\nALTER TABLE IF EXISTS rdl.prn_depository_reference RENAME TO rdl.prn_depository_reference_old;\nALTER TABLE IF EXISTS rdl.prn_depository_reference_new RENAME TO rdl.prn_depository_reference;\nDROP TABLE IF EXISTS rdl.prn_depository_reference_old;\n\ngrant select on rdl.prn_depository_reference to role looker_role;\ngrant select on rdl.prn_depository_reference to role data_engineering_group;\ngrant select on rdl.prn_depository_reference to role data_science_analytics;\ngrant select on rdl.prn_depository_reference to role read_only_internal_users;\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2967651":{"id":2967651,"sourceID":2967653,"targetID":2967652},"2967654":{"id":2967654,"sourceID":2967658,"targetID":2967653},"2967672":{"id":2967672,"sourceID":2967662,"targetID":2967658},"2967673":{"id":2967673,"sourceID":2967659,"targetID":2967662},"2967676":{"id":2967676,"sourceID":2967663,"targetID":2967657},"2967677":{"id":2967677,"sourceID":2967657,"targetID":2967656},"2967678":{"id":2967678,"sourceID":2967652,"targetID":2967655},"2967679":{"id":2967679,"sourceID":2967656,"targetID":2967659}},"failureConnectors":{},"unconditionalConnectors":{"2967675":{"id":2967675,"sourceID":2967660,"targetID":2967663}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{}},"info":{"name":"prn_depository_reference","description":"","type":"ORCHESTRATION","tag":"234ccb50-5b11-4a5f-9aac-9d2b8b5684d4"}}