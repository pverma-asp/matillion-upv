{"job":{"components":{"2966565":{"id":2966565,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":16,"y":240,"width":32,"height":32,"inputConnectorIDs":[2966564],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"swap"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"ALTER TABLE rdl.dt_account_rev_cogs_monthly\n  SWAP WITH etl.dt_account_rev_cogs_monthly_staging;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2966570":{"id":2966570,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":0,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2966567],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2966571":{"id":2966571,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":16,"y":144,"width":32,"height":32,"inputConnectorIDs":[2966567],"outputSuccessConnectorIDs":[2966564],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"create revenue cogs table - staging"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop table if exists etl.dt_account_rev_cogs_monthly_staging;\n\ncreate table etl.dt_account_rev_cogs_monthly_staging as\nwith months as (\n    select distinct date_trunc('month', date) as month\n    from dw.date_dim\n    where 1 = 1\n      and date >= '2019-01-01'\n      and date <= current_date\n)\n, r_dates as (\n    select DATE\n    from dw.DATE_DIM\n    where 1 = 1\n      and date >= '2019-01-01'\n      and date <= current_date\n)\n\n, valid_joint_accounts AS (\n     SELECT ua.account_id\n          , count(1) cnt\n     FROM web_db.user_account ua\n     JOIN web_db.depository d ON ua.account_id = d.account_id\n     JOIN web_db.account a ON ua.account_id = a.id\n     WHERE product_id IN (4,5)\n       AND ua.user_account_type = 2\n     GROUP BY ua.account_id\n     HAVING cnt >= 2\n)\n\n, joint_account_secondary_holders AS (\n     SELECT d.id AS depository_id\n          , ua.account_id\n          , ua.user_id\n          , ga.pmt_ref_no AS spend_galileo_prn\n          , row_number() OVER (PARTITION BY ua.user_id ORDER BY ga.created_at ASC NULLS LAST) AS row_num\n     FROM web_db.depository d\n     JOIN web_db.user_account ua ON d.account_id = ua.account_id\n     JOIN aog_db.galileo_accounts ga ON ga.aspiration_user_id = ua.user_id\n     JOIN web_db.user_product_application upa ON upa.id = ga.aspiration_application_id\n     WHERE d.account_id IN (\n        SELECT account_id\n        FROM valid_joint_accounts\n        )\n       AND ua.user_account_type = 2\n       AND upa.account_type_id = 5\n       AND d.product_id = 4 --spend\n)\n\n, users as (\n    select distinct USER_ID\n    from web_db.user_account\n    where 1=1\n      and USER_ID not in (\n          select USER_ID from joint_account_secondary_holders\n        )\n)\n-- select *\n-- from users\n-- cross join months\n\n, ua_sec_rem AS (\n    SELECT ua.*\n    FROM (\n             SELECT account_id\n                  , MIN(date_created) AS min_date\n             FROM web_db.user_account\n             GROUP BY 1\n         ) a\n             INNER JOIN web_db.user_account ua ON a.account_id = ua.account_id AND a.min_date = ua.date_created\n)\n, galileo_accounts AS (\n    SELECT ua.user_id\n         , d.id                 AS spend_depository_id\n         , 'g' || d.id          AS unique_account_id\n         , depo.galileo_save_id AS save_depository_id\n         , d.inception_date     AS galileo_inception_date\n\n    FROM (\n             SELECT id\n                  , account_id\n                  , product_id\n                  , min(inception_date)\n                        OVER (PARTITION BY account_id ORDER BY inception_date asc nulls last) AS inception_date\n                  , row_number() OVER (PARTITION BY account_id ORDER BY product_id, id)       AS rowNum\n             FROM web_db.depository\n             WHERE product_id IN (4, 5)\n         ) AS d\n             INNER JOIN ua_sec_rem ua ON ua.account_id = d.account_id\n             INNER JOIN web_db.account a ON a.id = d.account_id\n             LEFT JOIN (\n        SELECT id                                                      AS galileo_save_id\n             , account_id\n             , inception_date\n             , row_number() OVER (PARTITION BY account_id ORDER BY id) AS rowNum\n        FROM web_db.depository\n        WHERE product_id = 5\n    ) depo ON depo.account_id = d.account_id AND depo.rowNum = 1\n    WHERE a.custodian_id = 3\n      AND d.rowNum = 1\n)\n, galileo_accounts_dates as (\n    select ga.USER_ID,\n           ga.unique_account_id,\n           dates.date\n    from galileo_accounts ga\n             join r_dates dates on dates.date >= ga.galileo_inception_date\n    where 1 = 1\n--   and galileo_inception_date is null\n--   and USER_ID=823931\n--   and USER_ID = 829625\n--       and USER_ID=819802\n--     and USER_ID in (829625, 819802)\n-- limit 50\n-- order by dates.date desc\n)\n-- select *\n-- from galileo_accounts_dates\n, g_depository_balances AS (\n    SELECT ad.unique_account_id\n      , ad.USER_ID\n      , COALESCE(rgcmd.spend_current_balance, LAG(rgcmd.spend_current_balance) IGNORE NULLS OVER (PARTITION BY ad.unique_account_id ORDER BY ad.date), 0.0) AS spend_current_balance\n      , COALESCE(rgcmd.save_current_balance, LAG(rgcmd.save_current_balance) IGNORE NULLS OVER (PARTITION BY ad.unique_account_id ORDER BY ad.date), 0.0) AS save_current_balance\n      , ad.date AS balance_date\n    FROM galileo_accounts_dates ad\n--     JOIN bi_new.dt_accounts dta ON ad.unique_account_id = dta.unique_account_id\n    LEFT JOIN (\n      SELECT ga.aspiration_user_id\n        , t.file_date\n        , MAX(CASE WHEN t.type_of_account = '6' THEN CONCAT(t.current_balance_sign, t.current_balance::decimal(18,2))::dec(18,2) END) AS spend_current_balance\n        , MAX(CASE WHEN t.type_of_account = '8' THEN CONCAT(t.current_balance_sign, t.current_balance::decimal(18,2))::dec(18,2) END) AS save_current_balance\n      FROM rdl.raw_galileo_customer_master_data t\n      JOIN aog_db.galileo_accounts ga ON (ga.galileo_account_number = t.galileo_account_id)\n      JOIN web_db.user_product_application upa ON (upa.id = ga.aspiration_application_id)\n      WHERE ga.active = true\n        AND upa.account_type_id = 2\n      GROUP BY ga.aspiration_user_id, t.file_date\n      ) AS rgcmd ON (rgcmd.aspiration_user_id = ad.user_id AND ad.date = rgcmd.file_date)\n    )\n, depository_balances as (\n  SELECT g_db.USER_ID\n    , g_db.unique_account_id\n    , g_db.balance_date as FILE_DATE\n    , ifnull(g_db.spend_current_balance, 0) + ifnull(g_db.save_current_balance, 0) AS current_balance\n    , ifnull(g_db.spend_current_balance, 0) AS spend_current_balance\n    , ifnull(g_db.save_current_balance, 0) AS save_current_balance\n\n    FROM g_depository_balances g_db\n)\n\n, average_monthly_balance as (\n    select user_id,\n           date_trunc('month', FILE_DATE)                    as month,\n\n           avg(zeroifnull(spend_current_balance)) as average_spend_balance_uncensored,\n           avg(zeroifnull(save_current_balance)) as average_save_balance_uncensored,\n           average_spend_balance_uncensored + average_save_balance_uncensored as average_combined_balance_uncensored,\n\n           greatest(0,\n               avg(zeroifnull(spend_current_balance))\n           ) as average_spend_balance_censored,\n           greatest(0,\n               avg(zeroifnull(save_current_balance))\n           ) as average_save_balance_censored,\n           average_spend_balance_censored + average_save_balance_censored as average_combined_balance_censored\n    from depository_balances\n    group by user_id, month\n)\n\n, total_monthly_balance as (\n    select month,\n           sum(average_combined_balance_censored) as total_balance\n    from average_monthly_balance\n    group by month\n)\n\n, prorated_balance_ratio as (\n    select\n        amb.user_id,\n        amb.month,\n        amb.average_combined_balance_censored,\n        tmb.total_balance,\n        amb.average_combined_balance_censored / tmb.total_balance as balance_ratio\n    from average_monthly_balance amb\n    join total_monthly_balance tmb on amb.month = tmb.month\n)\n\n, purchase as (\n    select ua.USER_ID,\n           date_trunc('month', pt.POST_DATE) as month,\n           count(1)                          as total_purchase_count,\n           sum(-pt.AMOUNT)                   as total_purchase_amount\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      -- and ua.USER_ID = 583247\n      and gl.DESCRIPTION in (\n                             'Purchase', 'Purchase with PIN', 'Debit Card - No PIN',\n                             'Debit Card - PIN', 'Retail Sale', 'Unique Transactions', 'Pre-auth completion'\n        )\n    group by ua.USER_ID, month\n)\n\n, deposit as (\n    select ua.USER_ID,\n           date_trunc('month', pt.POST_DATE) as month,\n           count(1)                          as total_deposit_count,\n           sum(pt.AMOUNT)                    as total_deposit_amount\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      -- and ua.USER_ID = 230786\n      and pt.AMOUNT > 0\n      and gl.DESCRIPTION in ('Paypal Deposit', 'Coastal ACH Deposit', 'E-Check', 'RDC Other Check Deposit', 'Maestro Load')\n    group by ua.USER_ID, month\n)\n\n, direct_deposit as (\n    select ua.USER_ID,\n           date_trunc('month', pt.POST_DATE) as month,\n           count(1)                          as total_direct_deposit_count,\n           sum(pt.AMOUNT)                    as total_direct_deposit_amount\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      -- and ua.USER_ID = 230786\n      and gl.DESCRIPTION in ('Coastal ACH Deposit', 'ACH Deposit')\n      and pt.AMOUNT > 0\n      AND (pt.description ILIKE '%ANNUITY%'\n        OR pt.description ILIKE '%CHILD SUP%'\n        OR pt.description ILIKE '%COMMON OF MASS%'\n        OR pt.description ILIKE '%DD PR%'\n        OR pt.description ILIKE '%DIRECT%'\n        OR pt.description ILIKE '%DIR%DEP%'\n        OR pt.description ILIKE '%DIR%PAY%'\n        OR pt.description ILIKE '%DISABILITY%'\n        OR pt.description ILIKE '%DFAS%'\n        OR pt.description ILIKE '%EMPLOYEE P%'\n        OR pt.description ILIKE '%FED SAL%'\n        OR pt.description ILIKE '%GUSTO%PAY%'\n        OR pt.description ILIKE '%P%YR%L%'\n        OR pt.description ILIKE '%PAY-ADP%'\n        OR pt.description ILIKE '%PAYDEPOSIT%'\n        OR pt.description ILIKE '%PEN%'\n        OR pt.description ILIKE '%PR DEP%'\n        OR pt.description ILIKE '%PR PAYMENT%'\n        OR pt.description ILIKE '%SALARY%'\n        OR pt.description ILIKE '%SOC%SEC%'\n        OR pt.description ILIKE '%SSI%'\n        OR pt.description ILIKE '%TREA%'\n        OR pt.description ILIKE '%UI%'\n        OR pt.description ILIKE '%U%EMPLOYMEN%'\n        OR pt.description ilike '%BIWEEKLY'\n        OR pt.description ilike '%PPD'\n        OR pt.description ilike '%NET=PAY'\n        OR pt.description ilike '%DIRECT PAY'\n        OR pt.description ilike '%NET PAY'\n        OR pt.description ilike '%RETIRE%')\n    group by ua.USER_ID, month\n)\n\n-- aplus revenue\n, aplus_ordered_transactions as (\n    select pt.DEPOSITORY_ID,\n           ua.USER_ID,\n           pt.POST_DATE,\n           pt.DESCRIPTION,\n           -pt.AMOUNT as amount,\n           row_number() OVER (partition by pt.DEPOSITORY_ID order by pt.POST_DATE) row_num\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and pt.DESCRIPTION in\n          ('Monthly Planet Protection Charge', 'Annual Planet Protection Charge', 'Planet Protection Refund',\n           'Monthly Aspiration Plus Charge', 'Annual Aspiration Plus Charge', 'Aspiration Plus Refund')\n--       and pt.DEPOSITORY_ID = 740574  -- annual with refund\n--       and pt.DEPOSITORY_ID = 679541  -- monthly with refund\n--       and pt.DEPOSITORY_ID=437222  -- annual\n--       and pt.DEPOSITORY_ID=546292  -- monthly\n)\n-- select *\n-- from aplus_ordered_transactions;\n, aplus_txn_removals as (\n    select DEPOSITORY_ID,\n           row_num - 1 as remove_row\n    from aplus_ordered_transactions\n    where DESCRIPTION in ('Planet Protection Refund', 'Aspiration Plus Refund')\n)\n, aplus_txn_filtered as (\n      select a.*\n           , DATE_TRUNC('month', POST_DATE)::date as post_month\n           , b.remove_row\n      from aplus_ordered_transactions a\n               left join aplus_txn_removals b on a.DEPOSITORY_ID = b.DEPOSITORY_ID and a.row_num = b.remove_row\n           -- where a.UNIQUE_ACCOUNT_ID in ('g437222')\n      where b.remove_row is null\n        and DESCRIPTION not ilike '%refund%'\n  )\n, aplus_revenue_non_amortized_raw as (\n    select USER_ID,\n           date_trunc('month', POST_DATE) as month,\n           AMOUNT                         as aplus_revenue_non_amortized\n    from aplus_txn_filtered\n)\n, aplus_revenue_amortized_raw as (\n    -- monthly\n    select USER_ID,\n           post_month as month,\n           AMOUNT     as aplus_revenue_amortized,\n           DESCRIPTION\n    from aplus_txn_filtered\n    where 1 = 1\n      and DESCRIPTION ilike '%monthly%'\n\n    union all\n\n    -- annual\n    select USER_ID,\n           dm.date     as month,\n           AMOUNT / 12 as aplus_revenue_amortized,\n           DESCRIPTION\n    from aplus_txn_filtered af\n             inner join dw.DATE_DIM dm on dm.day = 1\n        and dm.date >= post_month\n        and dm.date < dateadd('month', 12, post_month)\n    where 1 = 1\n      and DESCRIPTION ilike '%annual%'\n)\n, aplus_revenue_non_amortized as (\n    select\n        USER_ID,\n        month,\n        sum(aplus_revenue_non_amortized) as aplus_revenue_non_amortized\n    from aplus_revenue_non_amortized_raw\n    group by USER_ID, month\n)\n, aplus_revenue_amortized as (\n    select\n        USER_ID,\n        month,\n        sum(aplus_revenue_amortized) as aplus_revenue_amortized\n    from aplus_revenue_amortized_raw\n    group by USER_ID, month\n)\n\n, cte_carbon_offset as (\n       select\n          posted_transaction_id,\n          subscribed,\n          emissions_amount,\n          row_number() over(partition by posted_transaction_id order by created_at desc nulls last) as row_num\n       from web_db.posted_transaction_carbon_offset\n)\n, aplus_cost as (\n    select ua.USER_ID,\n--     pt.POST_DATE,\n           date_trunc('month', pt.POST_DATE)                       as month,\n--     pt.DESCRIPTION,\n--     gpt.TRANSACTION_DESCRIPTION\n           sum(-carbon.EMISSIONS_AMOUNT) * 0.001 * 3.3             as aplus_cost\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n             join cte_carbon_offset carbon on pt.id = carbon.posted_transaction_id\n        AND carbon.row_num = 1\n    where 1 = 1\n      and gl.DESCRIPTION in (\n                             'Purchase', 'Purchase with PIN', 'Debit Card - No PIN',\n                             'Debit Card - PIN', 'Retail Sale', 'Unique Transactions', 'Pre-auth completion'\n        )\n      and carbon.SUBSCRIBED = TRUE\n      -- and USER_ID = 1898122\n--   and pt.DESCRIPTION like 'Planted%Tree%'\n--    or gpt.TRANSACTION_DESCRIPTION != 'Plant Your Change Transfer'\n    group by ua.USER_ID, month\n)\n, depository_pwif_revenue as (\n    select ua.USER_ID,\n           -- pt.POST_DATE,\n           dateadd('month', -1, date_trunc('month', pt.POST_DATE)) as month,\n           sum(-pt.AMOUNT)                                         as depository_pwif_revenue\n--     pt.DESCRIPTION\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and gl.DESCRIPTION in (\n                             'PWIF Monthly Summit Tip Fee',\n                             'PWIF Payment',\n                             'Aspiration Pay What is Fair'\n        )\n      -- and ua.USER_ID = 1509348\n    group by ua.USER_ID, month\n)\n, interest_cost as (\n    select ua.USER_ID,\n--     pt.POST_DATE,\n           dateadd('month', -1, date_trunc('month', pt.POST_DATE)) as month,\n           sum(pt.AMOUNT)                                          as interest_paid\n--     pt.DESCRIPTION\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and pt.DESCRIPTION in ('Interest Posting', 'Interest posting', 'Interest Earned')\n--   and pt.id=37941279\n      -- and pt.DEPOSITORY_ID = 643824\n    group by ua.USER_ID, month\n)\n\n, investment_pwif_revenue as (\n    select ua.USER_ID,\n           -- if.DATE_CREATED,\n           date_trunc('month', if.DATE_CREATED) as month,\n           sum(if.FEE_AMOUNT) as investment_pwif_revenue\n    from WEB_DB.INVESTMENT_FEE if\n             join WEB_DB.INVESTMENT i on if.INVESTMENT_ID = i.ID\n             join WEB_DB.USER_ACCOUNT ua on i.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n--   and if.DATE_CREATED='2020-10-09'\n--   and if.ID=516566\n      -- and ua.USER_ID = 206547\n    group by ua.USER_ID, month\n)\n\n, interchange_revenue as (\n    select ua.USER_ID,\n           date_trunc('month', pt.POST_DATE) as month,\n           sum(gpt.INTERCHANGE_FEE_AMOUNT) as interchange_revenue\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and gl.DESCRIPTION in (\n                             'Purchase', 'Purchase with PIN', 'Debit Card - No PIN',\n                             'Debit Card - PIN', 'Retail Sale', 'Unique Transactions', 'Pre-auth completion'\n        )\n      -- and USER_ID = 818500\n    group by USER_ID, month\n)\n\n, interchange_rewards as (\n    select\n        ua.USER_ID,\n        dateadd('month', -1, date_trunc('month', pt.POST_DATE)) as month,\n        sum(pt.AMOUNT)                                          as interchange_reward\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n--   and date_trunc('month', pt.POST_DATE) = '2020-09-01'\n      and gl.DESCRIPTION in (\n        'Cashback Rewards'\n        )\n      -- and USER_ID = 818500\n      group by USER_ID, month\n)\n\n, pyc_revenue as (\n    select\n        ua.USER_ID,\n        date_trunc('month', pt.POST_DATE) as month,\n        sum(-pt.AMOUNT)                                         as pyc_revenue\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and gl.DESCRIPTION in (\n        'Web Service Adjustment'\n        )\n      and (pt.DESCRIPTION like 'Planted%Tree%'\n       or pt.DESCRIPTION = 'Plant Your Change Transfer'\n      )\n      -- and ua.USER_ID=1036385\n    group by ua.USER_ID, month\n)\n\n, cte_plant_your_change as (\n    select gat.child_posted_transaction_id,\n           'p' || gpt.posted_transaction_id as plant_your_change_transfer_id\n    from web_db.galileo_adjustment_transactions gat\n    join web_db.galileo_posted_transaction gpt on gpt.authorization_code = gat.galileo_adjustment_transaction_id::varchar(50)\n    where gat.type = 'plant-your-change'\n    and gpt.transaction_code_type = 'ADF'\n)\n\n, pyc_enabled_purchase as (\n    select ua.USER_ID,\n           date_trunc('month', pt.POST_DATE) as month,\n           count(1) as total_pyc_enabled_purchase_count,\n           sum(-pt.AMOUNT) as total_pyc_enabled_purchase_amount\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n             LEFT JOIN cte_plant_your_change pyc ON pt.id = pyc.child_posted_transaction_id\n    where 1 = 1\n      and gl.DESCRIPTION in (\n                             'Purchase', 'Purchase with PIN', 'Debit Card - No PIN',\n                             'Debit Card - PIN', 'Retail Sale', 'Unique Transactions', 'Pre-auth completion'\n        )\n      and pyc.plant_your_change_transfer_id is not null\n      -- and ua.USER_ID=230786\n    group by ua.user_id, month\n)\n\n, pyc_rewards_cashback as (\n    select ua.USER_ID,\n           date_trunc('month', pt.POST_DATE) as month,\n           sum(pt.AMOUNT)                    as pyc_rewards_cashback\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and UPPER(pt.DESCRIPTION) = UPPER('Plant Your Change - Reward')\n      -- and ua.USER_ID = 701878\n    group by ua.user_ID, month\n)\n\n, atm_reimbursement as (\n    select ua.USER_ID,\n           date_trunc('month', pt.POST_DATE)                       as month,\n           sum(pt.AMOUNT)                                          as atm_reimbursement\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and (\n                gl.DESCRIPTION in\n                ('Academy Credit', 'ATM Fee Refund', 'Fee Rebate', 'Domestic ATM Fee Rebate', 'ATM Intl. Fee')\n            or\n                gl.DESCRIPTION ilike 'Int%l ATM Fee Rebate'\n            or\n                pt.DESCRIPTION = 'ATM Fee Reimbursement'\n        )\n      and pt.AMOUNT > 0\n      -- and ua.USER_ID=1806506\n    group by USER_ID, month\n)\n\n, atm_interchange_network_fee as (\n    select ua.USER_ID,\n--     pt.POST_DATE,\n           date_trunc('month', pt.POST_DATE) as month,\n--     pt.DESCRIPTION,\n--     gpt.TRANSACTION_DESCRIPTION\n           sum(-gpt.INTERCHANGE_FEE_AMOUNT)  as atm_interchange_network_fee\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and gl.DESCRIPTION = 'ATM Withdrawal'\n      and gpt.INTERCHANGE_FEE_AMOUNT < 0\n      -- and ua.USER_ID = 583247\n    group by user_id, month\n)\n\nselect\n    users.USER_ID,\n    months.MONTH,\n    p.total_purchase_amount,\n    p.total_purchase_count,\n    d.total_deposit_count,\n    d.total_deposit_amount,\n    dp.total_direct_deposit_amount,\n    dp.total_direct_deposit_count,\n    amb.average_spend_balance_uncensored,\n    amb.average_save_balance_uncensored,\n    amb.average_combined_balance_uncensored,\n    amb.average_spend_balance_censored,\n    amb.average_save_balance_censored,\n    amb.average_combined_balance_censored,\n    pbr.balance_ratio,\n    pbr.balance_ratio * ir1.INTEREST_REVENUE as promotory_prorated_interest_revenue,\n    pbr.balance_ratio * ir2.INTEREST_REVENUE as nano_prorated_interest_revenue,\n    zeroifnull(promotory_prorated_interest_revenue) + zeroifnull(nano_prorated_interest_revenue) as total_prorated_interest_revenue,\n    arn.aplus_revenue_non_amortized,\n    ara.aplus_revenue_amortized,\n    ac.aplus_cost,\n    dpr.depository_pwif_revenue,\n    ipr.investment_pwif_revenue,\n    ic.interest_paid,\n    irv.interchange_revenue,\n    irw.interchange_reward,\n    pr.pyc_revenue,\n    pep.total_pyc_enabled_purchase_count,\n    pep.total_pyc_enabled_purchase_amount,\n    pep.total_pyc_enabled_purchase_count * 0.1 as pyc_tree_cost,\n    prc.pyc_rewards_cashback,\n    atmr.atm_reimbursement,\n    atmf.atm_interchange_network_fee\nfrom users\ncross join months\nleft join purchase p on users.USER_ID=p.USER_ID and months.month=p.month\nleft join deposit d on users.USER_ID=d.USER_ID and months.month=d.month\nleft join direct_deposit dp on users.USER_ID=dp.USER_ID and months.month=dp.month\nleft join average_monthly_balance amb on users.USER_ID=amb.user_id and months.month=amb.month\nleft join prorated_balance_ratio pbr on users.USER_ID=pbr.user_id and months.month=pbr.month\nleft join edw.ETL_INTEREST_REVENUE ir1 on months.month=ir1.DATE\nleft join rdl.NON_PROM_NANO_INTEREST_REVENUE ir2 on months.month=ir2.DATE\nleft join aplus_revenue_non_amortized arn on users.USER_ID=arn.USER_ID and months.MONTH=arn.month\nleft join aplus_revenue_amortized ara on users.USER_ID=ara.USER_ID and months.MONTH=ara.month\nleft join aplus_cost ac on users.USER_ID=ac.USER_ID and months.month=ac.month\nleft join depository_pwif_revenue dpr on users.USER_ID=dpr.USER_ID and months.MONTH=dpr.month\nleft join investment_pwif_revenue ipr on users.USER_ID=ipr.USER_ID and months.MONTH=ipr.month\nleft join interest_cost ic on users.USER_ID=ic.USER_ID and months.MONTH=ic.month\nleft join interchange_revenue irv on users.USER_ID=irv.USER_ID and months.MONTH=irv.month\nleft join interchange_rewards irw on users.USER_ID=irw.USER_ID and months.MONTH=irw.month\nleft join pyc_revenue pr on users.USER_ID=pr.USER_ID and months.MONTH=pr.month\nleft join pyc_enabled_purchase pep on users.USER_ID=pep.USER_ID and months.MONTH=pep.month\nleft join pyc_rewards_cashback prc on users.USER_ID=prc.USER_ID and months.MONTH=prc.month\nleft join atm_reimbursement atmr on users.USER_ID=atmr.USER_ID and months.MONTH=atmr.month\nleft join atm_interchange_network_fee atmf on users.USER_ID=atmf.USER_ID and months.MONTH=atmf.month\n\norder by users.USER_ID, months.MONTH\n;\n\n\n\n\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2966564":{"id":2966564,"sourceID":2966571,"targetID":2966565}},"failureConnectors":{},"unconditionalConnectors":{"2966567":{"id":2966567,"sourceID":2966570,"targetID":2966571}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{}},"info":{"name":"process_revenue_cogs_backup_20210421","description":"","type":"ORCHESTRATION","tag":"d2253b5f-f1a6-409f-8c68-3719966bcd95"}}