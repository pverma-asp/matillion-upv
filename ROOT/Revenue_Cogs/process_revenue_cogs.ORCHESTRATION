{"job":{"components":{"2966512":{"id":2966512,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":16,"y":240,"width":32,"height":32,"inputConnectorIDs":[2966573],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[2966569],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"swap"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"ALTER TABLE rdl.dt_account_rev_cogs_monthly\n  SWAP WITH etl.dt_account_rev_cogs_monthly_staging;\nGRANT SELECT ON ADW.RDL.dt_account_rev_cogs_monthly  TO ROLE SVC_SEGMENT;\nGRANT SELECT ON ADW.RDL.dt_account_rev_cogs_monthly  TO ROLE Exactius;"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2966513":{"id":2966513,"inputCardinality":"ZERO","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":444132438,"x":0,"y":0,"width":32,"height":32,"inputConnectorIDs":[],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2966572],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Start 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2966514":{"id":2966514,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":438858066,"x":336,"y":240,"width":32,"height":32,"inputConnectorIDs":[2966575],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Send Alert to Pager Duty"}}}},"visible":true},"2":{"slot":2,"name":"AWS Region","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"us-west-2"}}}},"visible":true},"3":{"slot":3,"name":"Topic Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"data-alerts-pagerduty-prod"}}}},"visible":true},"4":{"slot":4,"name":"Subject","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"AWS Notification Message"}}}},"visible":true},"5":{"slot":5,"name":"Message","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"\"process_revenue_cogs\" job failed"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2966515":{"id":2966515,"inputCardinality":"MANY","outputCardinality":"MANY","connectorHint":"UNCONDITIONAL","executionHint":"FLOW","implementationID":-1343684451,"x":192,"y":190,"width":32,"height":32,"inputConnectorIDs":[2966569,2966574],"outputSuccessConnectorIDs":[],"outputFailureConnectorIDs":[],"outputUnconditionalConnectorIDs":[2966575],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"Or 0"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]},"2966518":{"id":2966518,"inputCardinality":"ONE","outputCardinality":"MANY","connectorHint":"SUCCESS_FAIL","executionHint":"EXECUTE","implementationID":-798585337,"x":16,"y":144,"width":32,"height":32,"inputConnectorIDs":[2966572],"outputSuccessConnectorIDs":[2966573],"outputFailureConnectorIDs":[2966574],"outputUnconditionalConnectorIDs":[],"outputTrueConnectorIDs":[],"outputFalseConnectorIDs":[],"exportMappings":{},"parameters":{"1":{"slot":1,"name":"Name","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"create revenue cogs table - staging"}}}},"visible":true},"2":{"slot":2,"name":"SQL Script","elements":{"1":{"slot":1,"values":{"1":{"slot":1,"type":"STRING","value":"drop table if exists tmp_galileo_termination; \ncreate temp table tmp_galileo_termination as  \nwith customer_master as ( \n    SELECT ga.aspiration_account_number \n         , rgcmd.galileo_account_id \n         , ga.pmt_ref_no as prn \n         , rgcmd.type_of_account  \n         , rgcmd.file_date  \n         , rgcmd.status \n         , row_number() over (partition by rgcmd.galileo_account_id \n                                order by rgcmd.file_date desc) as rn  \n         , row_number() over (partition by ga.aspiration_account_number \n                                  order by ga.galileo_account_number::bigint, ga.card_id nulls last,  \n                                           --prioritize cancellation over charge-off to determine termination date  \n                                           --this matches better with account closed notes in Admin \n                                           case rgcmd.status when 'C' then 1 when 'Z' then 1 when 'R' then 2 end, \n                                           rgcmd.type_of_account, rgcmd.file_date) as rn_termination  \n    FROM rdl.raw_galileo_customer_master_data rgcmd \n    INNER JOIN aog_db.galileo_accounts ga ON (ga.galileo_account_number = rgcmd.galileo_account_id) \n    INNER JOIN web_db.user_product_application upa ON (upa.id = ga.aspiration_application_id) \n    WHERE ga.active = TRUE  \n      AND upa.account_type_id = 2 \n) \n, customer_master_grouped as (  \n    select  \n      aspiration_account_number,  \n      max(prn) as max_prn,  \n      count(*) as total_prn,  \n      sum(case when status in ('C', 'Z', 'R') then 1 else 0 end) as total_terminated  \n    from customer_master  \n    where rn = 1  \n    group by 1  \n    having total_prn = total_terminated \n) \nselect g.aspiration_account_number, \n       g.max_prn, \n       m.file_date as termination_date  \nfrom customer_master_grouped g  \njoin customer_master m on g.aspiration_account_number = m.aspiration_account_number \nwhere m.rn_termination = 1;\n\n\ndrop table if exists etl.dt_account_rev_cogs_monthly_staging;\n\ncreate table etl.dt_account_rev_cogs_monthly_staging as\nwith months as (\n    select distinct date_trunc('month', date) as month\n    from dw.date_dim\n    where 1 = 1\n      and date >= '2019-01-01'\n      and date <= current_date\n)\n, r_dates as (\n    select DATE\n    from dw.DATE_DIM\n    where 1 = 1\n      and date >= '2019-01-01'\n      and date <= current_date\n)\n\n, valid_joint_accounts AS (\n     SELECT ua.account_id\n          , count(1) cnt\n     FROM web_db.user_account ua\n     JOIN web_db.depository d ON ua.account_id = d.account_id\n     JOIN web_db.account a ON ua.account_id = a.id\n     WHERE product_id IN (4,5)\n       AND ua.user_account_type = 2\n     GROUP BY ua.account_id\n     HAVING cnt >= 2\n)\n\n, joint_account_secondary_holders AS (\n     SELECT d.id AS depository_id\n          , ua.account_id\n          , ua.user_id\n          , ga.pmt_ref_no AS spend_galileo_prn\n          , row_number() OVER (PARTITION BY ua.user_id ORDER BY ga.created_at ASC NULLS LAST) AS row_num\n     FROM web_db.depository d\n     JOIN web_db.user_account ua ON d.account_id = ua.account_id\n     JOIN aog_db.galileo_accounts ga ON ga.aspiration_user_id = ua.user_id\n     JOIN web_db.user_product_application upa ON upa.id = ga.aspiration_application_id\n     WHERE d.account_id IN (\n        SELECT account_id\n        FROM valid_joint_accounts\n        )\n       AND ua.user_account_type = 2\n       AND upa.account_type_id = 5\n       AND d.product_id = 4 --spend\n)\n\n, users as (\n    select distinct USER_ID\n    from web_db.user_account\n    where 1=1\n      and USER_ID not in (\n          select USER_ID from joint_account_secondary_holders\n        )\n)\n-- select *\n-- from users\n-- cross join months\n\n, ua_sec_rem AS (\n    SELECT ua.*\n    FROM (\n             SELECT account_id\n                  , MIN(date_created) AS min_date\n             FROM web_db.user_account\n             GROUP BY 1\n         ) a\n             INNER JOIN web_db.user_account ua ON a.account_id = ua.account_id AND a.min_date = ua.date_created\n)\n, radius_accounts AS (\n     SELECT ua.user_id\n          , d.id AS radius_id\n          , d.inception_date\n     FROM web_db.depository d\n     INNER JOIN ua_sec_rem ua ON ua.account_id = d.account_id\n     INNER JOIN web_db.account a ON a.id = d.account_id\n     LEFT JOIN rdl.excluded_radius_accounts ea ON ea.depository_id = d.id\n     WHERE a.custodian_id = 2\n       AND d.product_id = 3\n       AND ea.depository_id IS NULL\n       AND d.inception_date IS NOT NULL\n)\n, galileo_accounts AS (\n    SELECT ua.user_id\n         , d.account_id\n         , d.id                 AS galileo_id\n         , 'g' || d.id          AS unique_account_id\n         , depo.galileo_save_id AS galileo_save_id\n         , d.inception_date\n         , 'Checking' as account_type\n\n    FROM (\n             SELECT id\n                  , account_id\n                  , product_id\n                  , min(inception_date)\n                        OVER (PARTITION BY account_id ORDER BY inception_date asc nulls last) AS inception_date\n                  , row_number() OVER (PARTITION BY account_id ORDER BY product_id, id)       AS rowNum\n             FROM web_db.depository\n             WHERE product_id IN (4, 5)\n         ) AS d\n             INNER JOIN ua_sec_rem ua ON ua.account_id = d.account_id\n             INNER JOIN web_db.account a ON a.id = d.account_id\n             LEFT JOIN (\n        SELECT id                                                      AS galileo_save_id\n             , account_id\n             , inception_date\n             , row_number() OVER (PARTITION BY account_id ORDER BY id) AS rowNum\n        FROM web_db.depository\n        WHERE product_id = 5\n    ) depo ON depo.account_id = d.account_id AND depo.rowNum = 1\n    WHERE a.custodian_id = 3\n      AND d.rowNum = 1\n)\n, account_map AS (\n     SELECT COALESCE(r.user_id,g.user_id) AS user_id\n          , r.radius_id\n          , g.galileo_id\n          , g.galileo_save_id\n          , g.account_id\n          , g.account_type\n          , COALESCE('r' || r.radius_id,'') || COALESCE('g' || g.galileo_id,'') AS unique_account_id\n          , coalesce(r.inception_date, g.inception_date) AS inception_date\n     FROM radius_accounts r\n     FULL OUTER JOIN galileo_accounts g ON r.user_id = g.user_id\n)\n, galileo_accounts_dates as (\n    select am.USER_ID,\n           am.unique_account_id,\n           am.galileo_id,\n           dates.date\n    from account_map am\n             join r_dates dates on dates.date >= am.inception_date\n    where 1 = 1\n)\n-- select *\n-- from galileo_accounts_dates\n, galileo_accounts_months as (\n    select am.USER_ID,\n           am.unique_account_id,\n           am.galileo_id,\n           am.account_id,\n           am.account_type,\n           months.month\n    from account_map am\n             join months on months.month >= date_trunc('month', am.inception_date)\n    where 1 = 1\n)\n\n, investment_account_types as (\n    select 1                     as fund_id,\n           2                     as account_type_id,\n           'Flagship Individual' as account_type\n    union all\n    select 1, 3, 'Flagship IRA'\n    union all\n    select 2, 2, 'Redwood Individual'\n    union all\n    select 2, 3, 'Redwood IRA'\n)\n, investment_accounts as (\n    SELECT 'i' || i.id            AS unique_account_id\n         , ua.user_id\n         , ua.ACCOUNT_ID\n         , iat.account_type\n         , i.inception_date::date as inception_date\n    FROM web_db.investment i\n             INNER JOIN web_db.user_account ua ON ua.account_id = i.account_id\n             INNER JOIN web_db.account a ON a.id = i.account_id\n             INNER JOIN investment_account_types iat on iat.fund_id=i.FUND_ID and iat.account_type_id=a.ACCOUNT_TYPE_ID\n    where 1 = 1\n      and i.INCEPTION_DATE is not null\n      -- and ua.USER_ID = 590486\n)\n, investment_and_galileo_accounts as (\n    select\n        user_id,\n        account_id,\n        unique_account_id,\n        account_type,\n        inception_date as inception_date\n    from account_map\n    union all\n    select\n        user_id,\n        account_id,\n        unique_account_id,\n        account_type,\n        inception_date\n    from investment_accounts\n)\n, investment_and_galileo_accounts_months as (\n    select iga.USER_ID,\n           iga.unique_account_id,\n           -- iga.galileo_id,\n           iga.account_id,\n           iga.account_type,\n           iga.INCEPTION_DATE,\n           months.month\n    from investment_and_galileo_accounts iga\n             join months on months.month >= date_trunc('month', iga.inception_date)\n    where 1 = 1\n)\n\n-- account attributes begin\n, chargeoffs as (\n    select ua.USER_ID,\n           d.ACCOUNT_ID,\n           TRUE as is_charged_off,\n           MAX(transaction_date) AS most_recent_charged_off_date,\n           SUM(amount)           AS total_amount_charged_off\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n--       and ua.USER_ID = 577228\n      and gl.DESCRIPTION in (\n        'Charge Off'\n        )\n    group by d.account_id, ua.USER_ID\n)\n, fraud_chargeoffs as (\n    select\n        upa.DEPOSITORY_ID,\n        CASE WHEN b.account_number IS NULL THEN FALSE ELSE TRUE END AS is_charged_off\n    from WEB_DB.DT_INPUT_FRAUD_USERS b\n    join WEB_DB.USER_PAYMENT_ACCOUNT upa ON upa.account_number = b.account_number :: TEXT\n    join WEB_DB.DEPOSITORY d on upa.DEPOSITORY_ID=d.ID\n\n)\n, account_attributes as (\n    -- checking accounts\n    select am.UNIQUE_ACCOUNT_ID,\n           coalesce(g_a.is_admin_disabled, r_a.is_admin_disabled) AS is_admin_disabled,\n           CASE\n               WHEN g.id IS NOT NULL THEN gdclosed.termination_date::DATE\n               ELSE r_a.termination_date::DATE\n           END AS termination_date,\n           CASE\n               WHEN co.is_charged_off or fco.is_charged_off THEN TRUE\n               ELSE FALSE\n           END AS is_charged_off\n    from account_map am\n             left join WEB_DB.DEPOSITORY r on r.ID = am.RADIUS_ID\n             left join WEB_DB.ACCOUNT r_a on r_a.id = r.account_id\n             left join WEB_DB.DEPOSITORY g on g.ID = am.GALILEO_ID\n             left join WEB_DB.ACCOUNT g_a on g_a.ID = g.account_id\n             left join TMP_GALILEO_TERMINATION gdclosed ON gdclosed.aspiration_account_number = g_a.account_number\n             left join chargeoffs co on co.USER_ID=am.USER_ID and co.ACCOUNT_ID=am.ACCOUNT_ID\n             left join fraud_chargeoffs fco on fco.DEPOSITORY_ID=am.RADIUS_ID\n\n    union all\n\n    -- investment accounts\n    select\n        unique_account_id,\n        a.IS_ADMIN_DISABLED,\n        a.TERMINATION_DATE,\n        NULL as is_charged_off\n    from investment_accounts ia\n    join WEB_DB.ACCOUNT a on ia.ACCOUNT_ID=a.ID\n\n)\n\n-- account attributes end\n\n-- user attributes begin\n, galileo_debit_activation as (\n    SELECT acd.prn\n         , acd.card_id\n         , min(acd.file_date) AS debit_card_activation_date\n    FROM rdl.raw_galileo_account_card_data acd\n             INNER JOIN rdl.raw_galileo_customer_master_data cmd ON (cmd.galileo_account_id = acd.galileo_account_id)\n    WHERE cmd.type_of_account = '6'\n      AND acd.status = 'N'\n    GROUP BY 1\n           , 2\n)\n\n, galileo_prn as (\n    SELECT ga.aspiration_user_id as USER_ID\n         , MAX(CASE WHEN rgcmd.type_of_account = '6' THEN ga.pmt_ref_no END) AS spend_galileo_prn\n         , MAX(CASE WHEN rgcmd.type_of_account = '8' THEN ga.pmt_ref_no END) AS save_galileo_prn\n\n    FROM (\n             SELECT t.galileo_account_id\n                  , t.type_of_account\n                  , CONCAT(t.current_balance_sign, t.current_balance::decimal(13, 2))::DEC(18, 2)   AS current_balance\n                  , ROW_NUMBER() OVER (PARTITION BY t.galileo_account_id ORDER BY t.file_date DESC) AS rn\n             FROM rdl.raw_galileo_customer_master_data t\n         ) AS rgcmd\n             INNER JOIN aog_db.galileo_accounts ga ON (ga.galileo_account_number = rgcmd.galileo_account_id)\n             INNER JOIN web_db.user_product_application upa ON (upa.id = ga.aspiration_application_id)\n             --join below to web_db.account is important for selecting the correct PRN - sometimes\n             --there are multiple PRN's connected with a user, but not all are their actual active account\n             INNER JOIN web_db.account a on ga.aspiration_account_number = a.account_number\n    WHERE rgcmd.rn = 1\n      AND ga.active = TRUE\n      AND upa.account_type_id = 2\n    GROUP BY ga.aspiration_user_id\n)\n\n, galileo_debit_card_ship_date AS (\n    SELECT acd.prn\n         , acd.file_date\n         , acd.card_id\n         , row_number()\n            OVER (PARTITION BY acd.prn ORDER BY acd.file_date ASC NULLS LAST, acd.card_id::INT ASC NULLS LAST) AS row_num\n    FROM rdl.raw_galileo_account_card_data acd\n             INNER JOIN rdl.raw_galileo_customer_master_data cmd\n                        ON (cmd.galileo_account_id = acd.galileo_account_id)\n    WHERE cmd.type_of_account = '6'\n      AND acd.status = 'Y'\n)\n\n, miser_transactions AS (\n        SELECT depository_id\n            , ua.USER_ID\n            , CASE\n                WHEN upper(description) LIKE '%WIRE FEE%' THEN 'Wire Transfer - Fee'\n                WHEN upper(description) LIKE '%WIRE REV%|%WIRE RETURN%|%RETURN WIRE%' AND amount < 0 THEN 'Wire Transfer - Withdrawal - Reversal'\n                WHEN upper(description) LIKE '%WIRE REV%|%WIRE RETURN%|%RETURN WIRE%' AND amount > 0 THEN 'Wire Transfer - Deposit - Reversal'\n                WHEN upper(description) LIKE '%WIRE IN%|%WIRE OUT%|%INTERNATIONAL WIRE%|%WIRE TRANSFER%|%WIRE-IN%|%INTL WIRE%|%WIRE FEE%|%OUTGOING WIRE%|%INCOMING WIRE%' AND amount > 0 THEN 'Wire Transfer - Deposit'\n                WHEN upper(description) LIKE '%WIRE IN%|%WIRE OUT%|%INTERNATIONAL WIRE%|%WIRE TRANSFER%|%WIRE-IN%|%INTL WIRE%|%WIRE FEE%|%OUTGOING WIRE%|%INCOMING WIRE%' AND description ILIKE '%FEE%' THEN 'Wire Transfer - Fee'\n                WHEN upper(description) LIKE '%WIRE REV%|%WIRE RETURN%|%RETURN WIRE%' THEN 'Wire Transfer - Return'\n                WHEN upper(description) LIKE '%WIRE IN%|%WIRE OUT%|%INTERNATIONAL WIRE%|%WIRE TRANSFER%|%WIRE-IN%|%INTL WIRE%|%WIRE FEE%|%OUTGOING WIRE%|%INCOMING WIRE%' AND description NOT LIKE '%FEE%' AND amount < 0 THEN 'Wire Transfer - Withdrawal'\n                WHEN description = '95' THEN 'ATM Fee Refund'\n                WHEN (description LIKE 'POS %' OR description LIKE 'DBT %') AND amount < 0 AND substring(description, 76, 3) = 'YES' THEN 'Debit Card - PIN'\n                WHEN (description LIKE 'POS %' OR description LIKE 'DBT %') AND amount < 0 THEN 'Debit Card - No PIN'\n                WHEN (description LIKE 'POS %' OR description LIKE 'DBT %') AND amount > 0 THEN 'Debit Card Return'\n                WHEN description LIKE 'ATM%' AND amount > 0 THEN 'ATM Deposit'\n                WHEN description LIKE 'ATM%' AND amount < 0 THEN 'ATM Withdrawal'\n                WHEN (description LIKE '%SR=%') AND amount > 0 THEN 'Check Deposit'\n                WHEN (description LIKE '%SR=%') AND amount < 0 THEN 'Check Withdrawal'\n                WHEN ((upper(description) LIKE '%SUMMIT TIP%' AND amount > 0) OR upper(description) = 'PWIF REBATE' OR description LIKE 'Aspiration Partn ACH Credit%') AND amount < 100 THEN 'Fee Rebate'\n                WHEN upper(description) LIKE '%SUMMIT TIP%' OR description = 'ASPIRATION FEE' THEN 'PWIF Payment'\n                WHEN description LIKE 'YIELD%' THEN 'Interest Payment'\n                WHEN amount > 0 THEN 'ACH Deposit' ELSE 'ACH Withdrawal'\n                END AS transaction_type\n            , coalesce(display_line, description) AS description\n            , amount\n            , mt.id AS miser_transaction_id\n            , transaction_date::DATE as transaction_date\n            , mt.posting_date::date AS post_date\n            , case when d.product_id in (3,4) then 'Spend'\n                   when d.product_id = 5 then 'Save'\n                   else null\n              end as account_product_type\n        FROM web_db.miser_transaction mt\n        LEFT JOIN web_db.depository d ON mt.depository_id = d.id\n        left join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID=ua.ACCOUNT_ID\n        WHERE 1=1\n            AND (description NOT LIKE 'DBT % HOLD %' AND description NOT LIKE 'CK %')\n            AND amount IS NOT NULL\n            AND amount <> 0\n            AND mt.id NOT IN (13018983, 13018986, 5847766, 5847769)\n        )\n, galileo_transactions as (\n    select ua.USER_ID,\n           pt.depository_id,\n           TRANSACTION_DATE,\n           gl.DESCRIPTION as transaction_type\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n)\n, all_transactions as (\n    select\n        USER_ID,\n        transaction_date,\n        transaction_type\n    from miser_transactions\n    union all\n    select\n        USER_ID,\n        transaction_date,\n        TRANSACTION_type\n    from galileo_transactions\n)\n, first_purchase_dates as (\n    select USER_ID,\n           min(transaction_date::date) as first_purchase_date\n    from all_transactions\n    where 1 = 1\n--       and USER_ID = 310779\n--       and USER_ID=648523\n      and transaction_type IN ('Debit Card - No PIN',\n                               'Purchase',\n                               'Unique Transactions',\n                               'Purchase with PIN',\n                               'Debit Card - PIN',\n                               'Pre-auth completion',\n                               'Retail Sale')\n    group by USER_ID\n)\n\n, attribution_data AS (\nWITH cte_waitlist AS (\n    select wl.id,\n           wl.email,\n           wl.date_created,\n           wl.utm_content,\n           wl.utm_campaign,\n           wl.utm_medium,\n           wl.utm_source,\n           wl.utm_term,\n           wl.product_id,\n           wl.referral_url,\n           wl.account_type_id\n    from web_db.wait_list_user wl\n)\n    SELECT CASE\n               WHEN ui.code = 'mi' THEN 'iOS Signup'\n               WHEN ui.code = 'ma' THEN 'Android Signup'\n               WHEN ui.inviting_user_id > 1 OR ui.id IS NULL THEN 'Referral'\n               WHEN ui.id IS NOT NULL THEN 'Web Signup'\n               ELSE 'Unknown'\n        END                                                                   AS lead_source\n         , CASE\n               WHEN ui.code IN ('mi', 'ma') THEN us.date_created\n               WHEN wl.id IS NOT NULL THEN wl.date_created\n               WHEN ui.id IS NOT NULL THEN ui.date_created\n               ELSE us.date_created\n        END                                                                   AS lead_arrival_date\n         , coalesce(ue.email, ui.email, wl.email)                             AS user_email\n         , ui.id                                                              AS user_invitation_id\n         , wl.utm_source                                                      AS utm_source\n         , case when up.SHOW_IN_DASHBOARD = true then 'Partner' else null end as utm_category\n         , wl.utm_medium                                                      AS utm_medium\n         , wl.utm_term                                                        AS utm_term\n         , wl.utm_content                                                     AS utm_content\n         , wl.utm_campaign                                                    AS utm_campaign\n         , us.inviting_user_id                                                AS inviting_user_id\n         , u.id                                                               AS user_id\n\n    FROM web_db._user u\n             LEFT JOIN web_db.user_signup us ON u.id = us.invited_user_id\n             LEFT JOIN (select *,\n                               row_number() over (partition by user_id order by last_updated desc) as rn\n                        from web_db.user_email\n                        where is_primary = true) ue ON u.id = ue.user_id AND ue.rn = 1\n             FULL OUTER JOIN web_db.user_invitation ui ON us.user_invitation_id = ui.id\n             FULL OUTER JOIN cte_waitlist wl ON wl.email = ui.email\n             LEFT JOIN rdl.utm_partnership up ON wl.utm_source = up.utm_source\n)\n\n, user_attributes as (\n    select u.ID as USER_ID,\n           CASE\n               WHEN ui.code IN ('mi', 'ma') THEN us.date_created\n               WHEN wl.id IS NOT NULL THEN wl.date_created\n               WHEN ui.id IS NOT NULL THEN ui.date_created\n               ELSE us.date_created\n               END        AS lead_arrival_date,\n           u.date_created AS entered_credentials_date,\n           upa.external_bank_account_connected_date,\n           alloy_evaluation.CIP_status_date,\n           -- itpd.initial_transfer_posted_date,\n           debit_card_activation.debit_card_activation_date,\n           fpd.first_purchase_date,\n           utm.inviting_user_id,\n           utm.UTM_SOURCE,\n           utm.utm_category\n    FROM web_db._user u\n             left join web_db.user_signup us ON u.id = us.invited_user_id\n             left join (select *,\n                          row_number() over (partition by user_id order by last_updated desc) as rn\n                   from web_db.user_email\n                   where is_primary = true) ue ON u.id = ue.user_id AND ue.rn = 1\n             full outer join web_db.user_invitation ui ON us.user_invitation_id = ui.id\n             full outer join web_db.wait_list_user wl on wl.email = ui.email\n             left join (select USER_ID,\n                               min(DATE_CREATED) as external_bank_account_connected_date\n                        from WEB_DB.USER_PAYMENT_ACCOUNT upa\n                        where 1 = 1\n                          and is_verified = TRUE\n                          and DEPOSITORY_ID is NULL\n--               and USER_ID=590486\n                        group by USER_ID) upa on upa.USER_ID = u.ID\n             left join (select app.user_id         AS user_id,\n                               max(e.submitted_at) AS CIP_status_date\n                        FROM aoa_db.alloy_evaluations e\n                                 JOIN web_db.user_product_application app ON app.id = e.user_product_application_id\n                                 JOIN rdl.alloy_evaluations_flattened d ON d.evaluation_id = e.id\n                        where 1 = 1\n                          and d.\"alloy summary_outcome\" IS NOT NULL\n--               and app.USER_ID=1479920\n                        group by app.user_id) as alloy_evaluation on u.ID = alloy_evaluation.user_id\n             -- left join initial_transfer_posted_date itpd on u.id = itpd.USER_ID\n             left join first_purchase_dates fpd on u.id = fpd.USER_ID\n             left join (select gp.USER_ID,\n                               gda.CARD_ID,\n                               gda.debit_card_activation_date,\n                               gd_dbt_ship.debit_card_shipping_date\n                        from galileo_debit_activation gda\n                                 join galileo_prn gp on gda.PRN = gp.spend_galileo_prn\n                                 join (\n                                    SELECT prn\n                                         , file_date AS debit_card_shipping_date\n                                         , card_id\n                                    FROM galileo_debit_card_ship_date\n                                    WHERE row_num = 1\n                                 ) gd_dbt_ship on gp.spend_galileo_prn = gd_dbt_ship.PRN and gd_dbt_ship.CARD_ID = gda.CARD_ID\n             ) as debit_card_activation on u.id = debit_card_activation.USER_ID\n             left join attribution_data utm on utm.USER_ID=u.ID\n    where 1 = 1\n)\n-- user attributes end\n\n, galileo_initial_posted AS (\n    SELECT pt.depository_id\n         , pt.amount\n         , pt.post_date::timestamptz                                                            as post_date\n         , ROW_NUMBER() OVER (PARTITION BY pt.depository_id ORDER BY pt.transaction_date,pt.id) AS rn\n    FROM web_db.posted_transaction pt\n    WHERE NOT ((description ILIKE '%verif%' OR description ILIKE '%trial%cred%') AND pt.amount < 1)\n      AND pt.amount > 0\n)\n, radius_initial_posted AS (\n    SELECT mt.depository_id\n         , mt.amount\n         , mt.posting_date\n         , ROW_NUMBER() OVER (PARTITION BY mt.depository_id ORDER BY mt.transaction_date, mt.id) AS rn\n    FROM web_db.miser_transaction mt\n    WHERE NOT ((description ILIKE '%verif%' OR description ILIKE '%trial%cred%') AND mt.amount < 1)\n    AND mt.amount > 0\n)\n, initial_posted_amount as (\n     SELECT gip.depository_id\n          , depo.product_id\n          , gip.amount AS initial_transfer_posted_amount\n          , gip.post_date AS initial_transfer_posted_date\n     FROM galileo_initial_posted gip\n     JOIN web_db.depository depo ON gip.depository_id = depo.id\n     where rn=1\n\n     union all\n\n     SELECT rip.depository_id\n          , NULL AS product_id\n          , rip.amount initial_transfer_posted_amount\n          , rip.posting_date AS initial_transfer_posted_date\n     FROM radius_initial_posted rip\n     JOIN web_db.depository depo ON rip.depository_id = depo.id\n     where rn=1\n\n)\n, initial_transfer_posted_date as (\n    select am.USER_ID,\n           am.UNIQUE_ACCOUNT_ID,\n           COALESCE(ipa_radius.initial_transfer_posted_date, ipa_galileo.initial_transfer_posted_date,\n                    ipa_galileo_s.initial_transfer_posted_date) AS initial_transfer_posted_date\n    from account_map am\n             LEFT JOIN initial_posted_amount ipa_galileo\n                       ON ipa_galileo.product_id = 4 AND ipa_galileo.depository_id = am.galileo_id\n             LEFT JOIN initial_posted_amount ipa_galileo_s\n                       ON ipa_galileo_s.product_id = 5 AND ipa_galileo_s.depository_id = am.galileo_save_id\n             LEFT JOIN initial_posted_amount ipa_radius ON ipa_radius.depository_id = am.radius_id\n)\n\n, g_depository_balances AS (\n    SELECT ad.unique_account_id\n      , ad.USER_ID\n      , COALESCE(rgcmd.spend_current_balance, LAG(rgcmd.spend_current_balance) IGNORE NULLS OVER (PARTITION BY ad.unique_account_id ORDER BY ad.date), 0.0) AS spend_current_balance\n      , COALESCE(rgcmd.save_current_balance, LAG(rgcmd.save_current_balance) IGNORE NULLS OVER (PARTITION BY ad.unique_account_id ORDER BY ad.date), 0.0) AS save_current_balance\n      , ad.date AS balance_date\n    FROM galileo_accounts_dates ad\n--     JOIN bi_new.dt_accounts dta ON ad.unique_account_id = dta.unique_account_id\n    LEFT JOIN (\n      SELECT ga.aspiration_user_id\n        , t.file_date\n        , MAX(CASE WHEN t.type_of_account = '6' THEN CONCAT(t.current_balance_sign, t.current_balance::decimal(18,2))::dec(18,2) END) AS spend_current_balance\n        , MAX(CASE WHEN t.type_of_account = '8' THEN CONCAT(t.current_balance_sign, t.current_balance::decimal(18,2))::dec(18,2) END) AS save_current_balance\n      FROM rdl.raw_galileo_customer_master_data t\n      JOIN aog_db.galileo_accounts ga ON (ga.galileo_account_number = t.galileo_account_id)\n      JOIN web_db.user_product_application upa ON (upa.id = ga.aspiration_application_id)\n      WHERE ga.active = true\n        AND upa.account_type_id = 2\n      GROUP BY ga.aspiration_user_id, t.file_date\n      ) AS rgcmd ON (rgcmd.aspiration_user_id = ad.user_id AND ad.date = rgcmd.file_date)\n    )\n, depository_balances as (\n  SELECT g_db.USER_ID\n    , g_db.unique_account_id\n    , g_db.balance_date as FILE_DATE\n    , ifnull(g_db.spend_current_balance, 0) + ifnull(g_db.save_current_balance, 0) AS current_balance\n    , ifnull(g_db.spend_current_balance, 0) AS spend_current_balance\n    , ifnull(g_db.save_current_balance, 0) AS save_current_balance\n\n    FROM g_depository_balances g_db\n)\n\n, average_monthly_balance as (\n    select unique_account_id,\n           date_trunc('month', FILE_DATE)                    as month,\n\n           avg(zeroifnull(spend_current_balance)) as average_spend_balance_uncensored,\n           avg(zeroifnull(save_current_balance)) as average_save_balance_uncensored,\n           average_spend_balance_uncensored + average_save_balance_uncensored as average_combined_balance_uncensored,\n\n           greatest(0,\n               avg(zeroifnull(spend_current_balance))\n           ) as average_spend_balance_censored,\n           greatest(0,\n               avg(zeroifnull(save_current_balance))\n           ) as average_save_balance_censored,\n           average_spend_balance_censored + average_save_balance_censored as average_combined_balance_censored\n    from depository_balances\n    group by unique_account_id, month\n)\n\n, total_monthly_balance as (\n    select month,\n           sum(average_combined_balance_censored) as total_balance\n    from average_monthly_balance\n    group by month\n)\n\n, prorated_balance_ratio as (\n    select\n        amb.unique_account_id,\n        amb.month,\n        amb.average_combined_balance_censored,\n        tmb.total_balance,\n        amb.average_combined_balance_censored / tmb.total_balance as balance_ratio\n    from average_monthly_balance amb\n    join total_monthly_balance tmb on amb.month = tmb.month\n)\n\n, purchase as (\n    select d.ACCOUNT_ID,\n           ua.USER_ID,\n           date_trunc('month', pt.POST_DATE) as month,\n           count(1)                          as total_purchase_count,\n           sum(-pt.AMOUNT)                   as total_purchase_amount\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      -- and ua.USER_ID = 583247\n      and gl.DESCRIPTION in (\n                             'Purchase', 'Purchase with PIN', 'Debit Card - No PIN',\n                             'Debit Card - PIN', 'Retail Sale', 'Unique Transactions', 'Pre-auth completion'\n        )\n    group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n\n, withdrawals as (\n    select d.ACCOUNT_ID,\n           ua.USER_ID,\n           date_trunc('month', pt.POST_DATE) as month,\n           count(1)                          as total_withdrawal_count,\n           sum(abs(pt.AMOUNT))               as total_withdrawal_amount\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and pt.AMOUNT < 0\n      and gl.DESCRIPTION in ('Coastal ACH Debit', 'ATM Withdrawal', 'API funds transfer', 'Bill Payment - Check', 'Money Transfer', 'Bill Pay Check Payment')\n      and gpt.TRANSACTION_DESCRIPTION not in ('Governmental Seizure')\n    group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n, atm_withdrawals as (\n    select d.ACCOUNT_ID,\n           ua.USER_ID,\n           date_trunc('month', pt.POST_DATE) as month,\n           count(1)                          as total_atm_withdrawal_count,\n           sum(abs(pt.AMOUNT))               as total_atm_withdrawal_amount\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and pt.AMOUNT < 0\n      and gl.DESCRIPTION in ('ATM Withdrawal')\n    group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n\n, deposit as (\n    select d.ACCOUNT_ID,\n           ua.USER_ID,\n           date_trunc('month', pt.POST_DATE) as month,\n           count(1)                          as total_deposit_count,\n           sum(pt.AMOUNT)                    as total_deposit_amount\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      -- and ua.USER_ID = 230786\n      and pt.AMOUNT > 0\n      and gl.DESCRIPTION in ('Paypal Deposit', 'Coastal ACH Deposit', 'E-Check', 'RDC Other Check Deposit', 'Maestro Load','ATM Deposit', 'Money Transfer','Wire Transfer - Deposit', 'API funds transfer offset','ACH Deposit', 'Check Deposit', 'Other Check Deposit', 'Debit Card Load')\n    group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n\n, direct_deposit as (\n    select d.ACCOUNT_ID,\n           ua.USER_ID,\n           date_trunc('month', pt.POST_DATE) as month,\n           count(1)                          as total_direct_deposit_count,\n           sum(pt.AMOUNT)                    as total_direct_deposit_amount\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      -- and ua.USER_ID = 230786\n      and gl.DESCRIPTION in ('Coastal ACH Deposit', 'ACH Deposit')\n      and pt.AMOUNT > 0\n      AND (pt.description ILIKE '%ANNUITY%'\n        OR pt.description ILIKE '%CHILD SUP%'\n        OR pt.description ILIKE '%COMMON OF MASS%'\n        OR pt.description ILIKE '%DD PR%'\n        OR pt.description ILIKE '%DIRECT%'\n        OR pt.description ILIKE '%DIR%DEP%'\n        OR pt.description ILIKE '%DIR%PAY%'\n        OR pt.description ILIKE '%DISABILITY%'\n        OR pt.description ILIKE '%DFAS%'\n        OR pt.description ILIKE '%EMPLOYEE P%'\n        OR pt.description ILIKE '%FED SAL%'\n        OR pt.description ILIKE '%GUSTO%PAY%'\n        OR pt.description ILIKE '%P%YR%L%'\n        OR pt.description ILIKE '%PAY-ADP%'\n        OR pt.description ILIKE '%PAYDEPOSIT%'\n        OR pt.description ILIKE '%PEN%'\n        OR pt.description ILIKE '%PR DEP%'\n        OR pt.description ILIKE '%PR PAYMENT%'\n        OR pt.description ILIKE '%SALARY%'\n        OR pt.description ILIKE '%SOC%SEC%'\n        OR pt.description ILIKE '%SSI%'\n        OR pt.description ILIKE '%TREA%'\n        OR pt.description ILIKE '%UI%'\n        OR pt.description ILIKE '%U%EMPLOYMEN%'\n        OR pt.description ilike '%BIWEEKLY'\n        OR pt.description ilike '%PPD'\n        OR pt.description ilike '%NET=PAY'\n        OR pt.description ilike '%DIRECT PAY'\n        OR pt.description ilike '%NET PAY'\n        OR pt.description ilike '%RETIRE%')\n    group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n\n-- aplus revenue\n, aplus_ordered_transactions as (\n    select pt.DEPOSITORY_ID,\n           ua.USER_ID,\n           d.ACCOUNT_ID,\n           pt.POST_DATE,\n           pt.DESCRIPTION,\n           -pt.AMOUNT as amount,\n           row_number() OVER (partition by pt.DEPOSITORY_ID order by pt.POST_DATE) row_num\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and pt.DESCRIPTION in\n          ('Monthly Planet Protection Charge', 'Annual Planet Protection Charge', 'Planet Protection Refund',\n           'Monthly Aspiration Plus Charge', 'Annual Aspiration Plus Charge', 'Aspiration Plus Refund')\n--       and pt.DEPOSITORY_ID = 740574  -- annual with refund\n--       and pt.DEPOSITORY_ID = 679541  -- monthly with refund\n--       and pt.DEPOSITORY_ID=437222  -- annual\n--       and pt.DEPOSITORY_ID=546292  -- monthly\n)\n-- select *\n-- from aplus_ordered_transactions;\n, aplus_txn_removals as (\n    select DEPOSITORY_ID,\n           row_num - 1 as remove_row\n    from aplus_ordered_transactions\n    where DESCRIPTION in ('Planet Protection Refund', 'Aspiration Plus Refund')\n)\n, aplus_txn_filtered as (\n      select a.*\n           , DATE_TRUNC('month', POST_DATE)::date as post_month\n           , b.remove_row\n      from aplus_ordered_transactions a\n               left join aplus_txn_removals b on a.DEPOSITORY_ID = b.DEPOSITORY_ID and a.row_num = b.remove_row\n           -- where a.UNIQUE_ACCOUNT_ID in ('g437222')\n      where b.remove_row is null\n        and DESCRIPTION not ilike '%refund%'\n  )\n, aplus_revenue_non_amortized_raw as (\n    select ACCOUNT_ID,\n           USER_ID,\n           date_trunc('month', POST_DATE) as month,\n           AMOUNT                         as aplus_revenue_non_amortized\n    from aplus_txn_filtered\n)\n, aplus_revenue_amortized_raw as (\n    -- monthly\n    select ACCOUNT_ID,\n           USER_ID,\n           post_month as month,\n           AMOUNT     as aplus_revenue_amortized,\n           DESCRIPTION\n    from aplus_txn_filtered\n    where 1 = 1\n      and DESCRIPTION ilike '%monthly%'\n\n    union all\n\n    -- annual\n    select ACCOUNT_ID,\n           USER_ID,\n           dm.date     as month,\n           AMOUNT / 12 as aplus_revenue_amortized,\n           DESCRIPTION\n    from aplus_txn_filtered af\n             inner join dw.DATE_DIM dm on dm.day = 1\n        and dm.date >= post_month\n        and dm.date < dateadd('month', 12, post_month)\n    where 1 = 1\n      and DESCRIPTION ilike '%annual%'\n)\n, aplus_revenue_non_amortized as (\n    select\n        ACCOUNT_ID,\n        USER_ID,\n        month,\n        sum(aplus_revenue_non_amortized) as aplus_revenue_non_amortized\n    from aplus_revenue_non_amortized_raw\n    group by ACCOUNT_ID, USER_ID, month\n)\n, aplus_revenue_amortized as (\n    select\n        ACCOUNT_ID,\n        USER_ID,\n        month,\n        sum(aplus_revenue_amortized) as aplus_revenue_amortized\n    from aplus_revenue_amortized_raw\n    group by ACCOUNT_ID, USER_ID, month\n)\n\n, cte_carbon_offset as (\n       select\n          posted_transaction_id,\n          subscribed,\n          emissions_amount,\n          row_number() over(partition by posted_transaction_id order by created_at desc nulls last) as row_num\n       from web_db.posted_transaction_carbon_offset\n)\n, aplus_cost as (\n    select d.ACCOUNT_ID,\n           ua.USER_ID,\n--     pt.POST_DATE,\n           date_trunc('month', pt.POST_DATE)                       as month,\n--     pt.DESCRIPTION,\n--     gpt.TRANSACTION_DESCRIPTION\n           sum(-carbon.EMISSIONS_AMOUNT) * 0.001 * 3.3             as aplus_cost\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n             join cte_carbon_offset carbon on pt.id = carbon.posted_transaction_id\n        AND carbon.row_num = 1\n    where 1 = 1\n      and gl.DESCRIPTION in (\n                             'Purchase', 'Purchase with PIN', 'Debit Card - No PIN',\n                             'Debit Card - PIN', 'Retail Sale', 'Unique Transactions', 'Pre-auth completion'\n        )\n      and carbon.SUBSCRIBED = TRUE\n      -- and USER_ID = 1898122\n--   and pt.DESCRIPTION like 'Planted%Tree%'\n--    or gpt.TRANSACTION_DESCRIPTION != 'Plant Your Change Transfer'\n    group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n, depository_pwif_revenue as (\n    select d.ACCOUNT_ID,\n           ua.USER_ID,\n           -- pt.POST_DATE,\n           dateadd('month', -1, date_trunc('month', pt.POST_DATE)) as month,\n           sum(-pt.AMOUNT)                                         as depository_pwif_revenue\n--     pt.DESCRIPTION\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and gl.DESCRIPTION in (\n                             'PWIF Monthly Summit Tip Fee',\n                             'PWIF Payment',\n                             'Aspiration Pay What is Fair'\n        )\n      -- and ua.USER_ID = 1509348\n    group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n, interest_cost as (\n    select d.ACCOUNT_ID,\n           ua.USER_ID,\n--     pt.POST_DATE,\n           dateadd('month', -1, date_trunc('month', pt.POST_DATE)) as month,\n           sum(pt.AMOUNT)                                          as interest_paid\n--     pt.DESCRIPTION\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and pt.DESCRIPTION in ('Interest Posting', 'Interest posting', 'Interest Earned')\n--   and pt.id=37941279\n      -- and pt.DEPOSITORY_ID = 643824\n      -- and USER_ID=1518218\n    group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n\n, investment_pwif_revenue as (\n    select 'i' || i.id            AS unique_account_id,\n           -- if.DATE_CREATED,\n           date_trunc('month', if.DATE_CREATED) as month,\n           sum(if.FEE_AMOUNT) as investment_pwif_revenue\n    from WEB_DB.INVESTMENT_FEE if\n             join WEB_DB.INVESTMENT i on if.INVESTMENT_ID = i.ID\n             join WEB_DB.USER_ACCOUNT ua on i.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n--       and unique_account_id='i38289'\n    group by unique_account_id, month\n)\n, prorated_investment_pwif_revenue as (\n    select ipr.unique_account_id,\n           dm.date as month,\n           ipr.investment_pwif_revenue / 3 as prorated_investment_pwif_revenue\n    from investment_pwif_revenue ipr\n             inner join dw.DATE_DIM dm on dm.day = 1\n        and dm.date < ipr.month\n        and dm.date >= dateadd('month', -3, ipr.month)\n--     order by month asc\n)\n\n, interchange_revenue as (\n    select d.ACCOUNT_ID,\n           ua.USER_ID,\n           date_trunc('month', pt.POST_DATE) as month,\n           sum(gpt.INTERCHANGE_FEE_AMOUNT) as interchange_revenue\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and gl.DESCRIPTION in (\n                             'Purchase', 'Purchase with PIN', 'Debit Card - No PIN',\n                             'Debit Card - PIN', 'Retail Sale', 'Unique Transactions', 'Pre-auth completion'\n        )\n      -- and USER_ID = 818500\n    group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n\n, interchange_rewards as (\n    select\n        d.ACCOUNT_ID,\n        ua.USER_ID,\n        dateadd('month', -1, date_trunc('month', pt.POST_DATE)) as month,\n        sum(pt.AMOUNT)                                          as interchange_reward\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n--   and date_trunc('month', pt.POST_DATE) = '2020-09-01'\n      and gl.DESCRIPTION in (\n        'Cashback Rewards'\n        )\n      -- and USER_ID = 818500\n      group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n\n, pyc_revenue as (\n    select\n        d.ACCOUNT_ID,\n        ua.USER_ID,\n        date_trunc('month', pt.POST_DATE) as month,\n        sum(-pt.AMOUNT)                                         as pyc_revenue\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and gl.DESCRIPTION in (\n        'Web Service Adjustment'\n        )\n      and (pt.DESCRIPTION like 'Planted%Tree%'\n       or pt.DESCRIPTION = 'Plant Your Change Transfer'\n      )\n      -- and ua.USER_ID=1036385\n    group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n\n, cte_plant_your_change as (\n    select gat.child_posted_transaction_id,\n           'p' || gpt.posted_transaction_id as plant_your_change_transfer_id\n    from web_db.galileo_adjustment_transactions gat\n    join web_db.galileo_posted_transaction gpt on gpt.authorization_code = gat.galileo_adjustment_transaction_id::varchar(50)\n    where gat.type = 'plant-your-change'\n    and gpt.transaction_code_type = 'ADF'\n)\n\n, pyc_enabled_purchase as (\n    select d.ACCOUNT_ID,\n           ua.USER_ID,\n           date_trunc('month', pt.POST_DATE) as month,\n           count(1) as total_pyc_enabled_purchase_count,\n           sum(-pt.AMOUNT) as total_pyc_enabled_purchase_amount\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n             LEFT JOIN cte_plant_your_change pyc ON pt.id = pyc.child_posted_transaction_id\n    where 1 = 1\n      and gl.DESCRIPTION in (\n                             'Purchase', 'Purchase with PIN', 'Debit Card - No PIN',\n                             'Debit Card - PIN', 'Retail Sale', 'Unique Transactions', 'Pre-auth completion'\n        )\n      and pyc.plant_your_change_transfer_id is not null\n      -- and ua.USER_ID=230786\n    group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n\n, pyc_rewards_cashback as (\n    select d.ACCOUNT_ID,\n           ua.USER_ID,\n           date_trunc('month', pt.POST_DATE) as month,\n           sum(pt.AMOUNT)                    as pyc_rewards_cashback\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and UPPER(pt.DESCRIPTION) = UPPER('Plant Your Change - Reward')\n      -- and ua.USER_ID = 701878\n    group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n\n, atm_reimbursement as (\n    select d.ACCOUNT_ID,\n           ua.USER_ID,\n           date_trunc('month', pt.POST_DATE)                       as month,\n           sum(pt.AMOUNT)                                          as atm_reimbursement\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and (\n                gl.DESCRIPTION in\n                ('Academy Credit', 'ATM Fee Refund', 'Fee Rebate', 'Domestic ATM Fee Rebate', 'ATM Intl. Fee')\n            or\n                gl.DESCRIPTION ilike 'Int%l ATM Fee Rebate'\n            or\n                pt.DESCRIPTION = 'ATM Fee Reimbursement'\n        )\n      and pt.AMOUNT > 0\n      -- and ua.USER_ID=1806506\n    group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n\n, atm_interchange_network_fee as (\n    select d.ACCOUNT_ID,\n           ua.USER_ID,\n--     pt.POST_DATE,\n           date_trunc('month', pt.POST_DATE) as month,\n--     pt.DESCRIPTION,\n--     gpt.TRANSACTION_DESCRIPTION\n           sum(-gpt.INTERCHANGE_FEE_AMOUNT)  as atm_interchange_network_fee\n    from WEB_DB.GALILEO_POSTED_TRANSACTION gpt\n             join WEB_DB.POSTED_TRANSACTION pt on gpt.POSTED_TRANSACTION_ID = pt.id\n             JOIN web_db.galileo_lookup gl\n                  ON (gl.code = gpt.transaction_code_type AND gl.file = 'P' AND gl.field_name = 'TRANSACTION CODE/TYPE')\n             join WEB_DB.DEPOSITORY d on d.id = pt.DEPOSITORY_ID\n             join WEB_DB.USER_ACCOUNT ua on d.ACCOUNT_ID = ua.ACCOUNT_ID\n    where 1 = 1\n      and gl.DESCRIPTION = 'ATM Withdrawal'\n      and gpt.INTERCHANGE_FEE_AMOUNT < 0\n      -- and ua.USER_ID = 583247\n    group by d.ACCOUNT_ID, ua.USER_ID, month\n)\n\n\n---- credit cards\n, credit_accounts as (\n    select cu.USER_ID,\n           cu.ACCOUNT_ID,\n           'c' || cu.ACCOUNT_ID          as unique_account_id,\n           'Credit'                      as account_type,\n           ca.DATE_ACCOUNT_CREATED::date as inception_date\n    from CREDIT_ACCOUNT_MANAGEMENT.CREDIT_USERS cu\n             join CREDIT_ACCOUNT_MANAGEMENT.CREDIT_ACCOUNT ca on cu.ACCOUNT_ID = ca.ACCOUNT_ID\n    where 1 = 1\n      -- and cu.ACCOUNT_ID = 2296374\n)\n, credit_account_months as (\n    select ca.USER_ID,\n           ca.unique_account_id,\n           -- iga.galileo_id,\n           ca.account_id,\n           ca.account_type,\n           ca.INCEPTION_DATE,\n           months.month\n    from credit_accounts ca\n             join months on months.month >= date_trunc('month', ca.inception_date)\n    where 1 = 1\n)\n-- select *\n-- from credit_account_months\n, credit_pyc_revenue as (\n    select pt.ACCOUNT_ID,\n           date_trunc('month', pt.POSTED_AT)::date as month,\n           sum(pt.AMOUNT / 100.0) as credit_pyc_revenue\n    FROM ADW.CREDIT_TRANSACTIONS.POSTED_TRANSACTION PT\n    WHERE 1 = 1\n      and PT.DESCRIPTION = 'Plant Your Change'\n      -- and pt.ACCOUNT_ID = 2296374\n    group by pt.ACCOUNT_ID, month\n)\n, fee_sign as (\n    select 'D' as sign, -1 as value\n    union all\n    select 'C' as sign,  1 as value\n)\n, credit_interchange_revenue as (\n    select pt.ACCOUNT_ID,\n           date_trunc('month', pt.POSTED_AT)::date                  as month,\n           sum(fpt.TEXT_EXT_INTCHG_FEE_AMOUNT / 1000000 * fs.value) as credit_interchange_revenue\n    from CREDIT_TRANSACTIONS.FIS_POSTED_TRANSACTION fpt\n             join CREDIT_TRANSACTIONS.POSTED_TRANSACTION pt on fpt.ID = pt.FIS_POSTED_TRANSACTION_ID\n             join fee_sign fs on fpt.TEXT_EXT_INTCHG_FEE_SIGN = fs.sign\n    where 1 = 1\n      -- and pt.ACCOUNT_ID = 2296374\n    group by pt.ACCOUNT_ID, month\n)\n, credit_purchase as (\n    select pt.ACCOUNT_ID,\n--     pt.POSTED_AT,\n           date_trunc('month', pt.POSTED_AT)::date as month,\n           sum(pt.AMOUNT) / 100.0                  as total_credit_purchase_amount,\n           count(1)                                as total_credit_purchase_count\n    from CREDIT_TRANSACTIONS.POSTED_TRANSACTION pt\n    where 1 = 1\n      and pt.code = 5\n      -- and pt.ACCOUNT_ID = 2296374\n    group by ACCOUNT_ID, month\n)\n, credit_first_purchase as (\n    select pt.ACCOUNT_ID,\n           min(pt.TRANSACTION_DATE) as first_purchase_date\n    from CREDIT_TRANSACTIONS.POSTED_TRANSACTION pt\n    where 1 = 1\n      and pt.code = 5\n      -- and pt.ACCOUNT_ID = 2296374\n    group by ACCOUNT_ID\n)\n, credit_alloy_eval as (\n    select b.user_id,\n           a.CREATED_AT,\n           --want most recent application, and credit_underwriting as the preferred data if available\n          row_number() over (partition by b.USER_ID order by a.USER_PRODUCT_APPLICATION_ID desc,\n                                                  a.WORKFLOW asc,\n                                                  a.CREATED_AT desc) as rn\n    from rdl.CREDIT_ALLOY_EVALUATIONS_FLATTENED a\n    join WEB_DB.USER_PRODUCT_APPLICATION b on a.USER_PRODUCT_APPLICATION_ID = b.id\n)\n, credit_cip_status_date as (\n    select ae.USER_ID,\n           ae.CREATED_AT as CIP_status_date\n    from credit_alloy_eval ae\n    where ae.rn = 1\n--       and ae.USER_ID = 4901305\n)\n\n-- credit card subscription\n, credit_subscription_ordered_transactions as (\n    select ACCOUNT_ID,\n           AMOUNT,\n           CREATED_AT,\n           DESCRIPTION,\n           CODE,\n           POSTED_AT,\n           row_number() OVER (partition by pt.ACCOUNT_ID order by pt.CREATED_AT) row_num\n    from CREDIT_TRANSACTIONS.POSTED_TRANSACTION pt\n    where 1 = 1\n      and (\n            (CODE = 60 and DESCRIPTION = 'ANNUAL FEE')\n            or (CODE = 71 and DESCRIPTION = 'ANNUAL FEE ADJUSTMENT')\n        )\n--       and ACCOUNT_ID=2167977 -- no refund\n--       and ACCOUNT_ID=2121264 -- refund\n    order by CREATED_AT\n)\n, credit_subscription_txns_removals as (\n    select\n        ACCOUNT_ID,\n        row_num-1 as remove_row\n    from credit_subscription_ordered_transactions\n    where 1=1\n      and CODE = 71 and DESCRIPTION = 'ANNUAL FEE ADJUSTMENT'\n)\n, credit_subscription_txns_filtered as (\n    select a.*,\n           b.remove_row\n    from credit_subscription_ordered_transactions a\n             left join credit_subscription_txns_removals b on a.ACCOUNT_ID = b.ACCOUNT_ID and a.row_num = b.remove_row\n    where 1 = 1\n      and b.remove_row is null\n      and a.CODE = 60\n)\n, credit_subscription_non_amortized_raw as (\n    select ACCOUNT_ID,\n           POSTED_AT::date,\n           date_trunc('month', POSTED_AT::date) as month,\n           AMOUNT / 100.0 as credit_subscription_non_amortized\n    from credit_subscription_txns_filtered\n    where 1 = 1\n      and DESCRIPTION = 'ANNUAL FEE'\n      and CODE = 60\n      -- and ACCOUNT_ID = 2377196\n)\n, credit_subscription_non_amortized as (\n    select\n        ACCOUNT_ID,\n        month,\n        sum(credit_subscription_non_amortized) as credit_subscription_non_amortized\n    from credit_subscription_non_amortized_raw\n    group by ACCOUNT_ID, month\n)\n, credit_subscription_amortized_raw as (\n    select ar.ACCOUNT_ID,\n           dm.DATE        as month,\n           ar.credit_subscription_non_amortized / 12 as credit_subscription_amortized\n    from credit_subscription_non_amortized_raw ar\n             inner join dw.DATE_DIM dm on dm.day = 1\n        and dm.date >= ar.month\n        and dm.date < dateadd('month', 12, ar.month)\n    order by dm.DATE asc\n)\n, credit_subscription_amortized as (\n    select\n        ACCOUNT_ID,\n        month,\n        sum(credit_subscription_amortized) as credit_subscription_amortized\n    from credit_subscription_amortized_raw\n    group by ACCOUNT_ID, month\n)\n\nselect\n    gam.USER_ID,\n    gam.UNIQUE_ACCOUNT_ID,\n    gam.ACCOUNT_TYPE,\n    gam.MONTH,\n    gam.INCEPTION_DATE,\n\n    uattr.lead_arrival_date,\n    uattr.entered_credentials_date,\n    uattr.external_bank_account_connected_date,\n    uattr.CIP_status_date,\n    uattr.debit_card_activation_date,\n    uattr.first_purchase_date,\n    uattr.inviting_user_id,\n    uattr.UTM_SOURCE,\n    uattr.UTM_CATEGORY,\n    aa.is_admin_disabled,\n    aa.termination_date,\n    aa.is_charged_off,\n\n    itpd.initial_transfer_posted_date,\n\n    p.total_purchase_amount,\n    p.total_purchase_count,\n    d.total_deposit_count,\n    d.total_deposit_amount,\n    wd.total_withdrawal_count,\n    wd.total_withdrawal_amount,\n    awd.total_atm_withdrawal_count,\n    awd.total_atm_withdrawal_amount,\n    dp.total_direct_deposit_amount,\n    dp.total_direct_deposit_count,\n    amb.average_spend_balance_uncensored,\n    amb.average_save_balance_uncensored,\n    amb.average_combined_balance_uncensored,\n    amb.average_spend_balance_censored,\n    amb.average_save_balance_censored,\n    amb.average_combined_balance_censored,\n    pbr.balance_ratio,\n    pbr.balance_ratio * ir1.INTEREST_REVENUE as promotory_prorated_interest_revenue,\n    pbr.balance_ratio * ir2.INTEREST_REVENUE as nano_prorated_interest_revenue,\n    zeroifnull(promotory_prorated_interest_revenue) + zeroifnull(nano_prorated_interest_revenue) as total_prorated_interest_revenue,\n    arn.aplus_revenue_non_amortized,\n    ara.aplus_revenue_amortized,\n    ac.aplus_cost,\n    dpr.depository_pwif_revenue,\n    ipr.investment_pwif_revenue,\n    pipr.prorated_investment_pwif_revenue,\n    ic.interest_paid,\n    irv.interchange_revenue,\n    irw.interchange_reward,\n    pr.pyc_revenue,\n    pep.total_pyc_enabled_purchase_count,\n    pep.total_pyc_enabled_purchase_amount,\n    pep.total_pyc_enabled_purchase_count * 0.1 as pyc_tree_cost,\n    prc.pyc_rewards_cashback,\n    atmr.atm_reimbursement,\n    atmf.atm_interchange_network_fee,\n\n    -- gross total revenue\n    zeroifnull(INTERCHANGE_REVENUE) +\n    zeroifnull(TOTAL_PRORATED_INTEREST_REVENUE) +\n    zeroifnull(DEPOSITORY_PWIF_REVENUE) +\n    zeroifnull(INVESTMENT_PWIF_REVENUE) +\n    zeroifnull(PYC_REVENUE) +\n    zeroifnull(APLUS_REVENUE_AMORTIZED) as GROSS_TOTAL_REVENUE\nfrom investment_and_galileo_accounts_months gam\n\nleft join edw.ETL_INTEREST_REVENUE ir1           on gam.month=ir1.DATE\nleft join rdl.NON_PROM_NANO_INTEREST_REVENUE ir2 on gam.month=ir2.DATE\n\nleft join average_monthly_balance amb      on gam.UNIQUE_ACCOUNT_ID=amb.UNIQUE_ACCOUNT_ID and gam.month=amb.month\nleft join prorated_balance_ratio pbr       on gam.UNIQUE_ACCOUNT_ID=pbr.UNIQUE_ACCOUNT_ID and gam.month=pbr.month\n\nleft join user_attributes uattr            on gam.USER_ID=uattr.USER_ID\nleft join account_attributes aa            on gam.UNIQUE_ACCOUNT_ID=  aa.UNIQUE_ACCOUNT_ID\nleft join initial_transfer_posted_date itpd   on gam.UNIQUE_ACCOUNT_ID=itpd.UNIQUE_ACCOUNT_ID\n\n\nleft join purchase p                       on gam.ACCOUNT_ID=   p.ACCOUNT_ID and gam.USER_ID=   p.USER_ID and gam.month=p.month\nleft join deposit d                        on gam.ACCOUNT_ID=   d.ACCOUNT_ID and gam.USER_ID=   d.USER_ID and gam.month=d.month\nleft join direct_deposit dp                on gam.ACCOUNT_ID=  dp.ACCOUNT_ID and gam.USER_ID=  dp.USER_ID and gam.month=dp.month\nleft join withdrawals wd                   on gam.ACCOUNT_ID=  wd.ACCOUNT_ID and gam.USER_ID=  wd.USER_ID and gam.MONTH=wd.month\nleft join atm_withdrawals awd              on gam.ACCOUNT_ID= awd.ACCOUNT_ID and gam.USER_ID= awd.USER_ID and gam.MONTH=awd.month\n\nleft join aplus_revenue_non_amortized arn  on gam.ACCOUNT_ID= arn.ACCOUNT_ID and gam.USER_ID= arn.USER_ID and gam.MONTH=arn.month\nleft join aplus_revenue_amortized ara      on gam.ACCOUNT_ID= ara.ACCOUNT_ID and gam.USER_ID= ara.USER_ID and gam.MONTH=ara.month\nleft join aplus_cost ac                    on gam.ACCOUNT_ID=  ac.ACCOUNT_ID and gam.USER_ID=  ac.USER_ID and gam.month=ac.month\n\nleft join depository_pwif_revenue dpr      on gam.ACCOUNT_ID= dpr.ACCOUNT_ID and gam.USER_ID= dpr.USER_ID and gam.MONTH=dpr.month\nleft join interest_cost ic                 on gam.ACCOUNT_ID=  ic.ACCOUNT_ID and gam.USER_ID=  ic.USER_ID and gam.MONTH=ic.month\n\nleft join interchange_revenue irv          on gam.ACCOUNT_ID= irv.ACCOUNT_ID and gam.USER_ID= irv.USER_ID and gam.MONTH=irv.month\nleft join interchange_rewards irw          on gam.ACCOUNT_ID= irw.ACCOUNT_ID and gam.USER_ID= irw.USER_ID and gam.MONTH=irw.month\n\nleft join pyc_revenue pr                   on gam.ACCOUNT_ID=  pr.ACCOUNT_ID and gam.USER_ID=  pr.USER_ID and gam.MONTH=pr.month\nleft join pyc_enabled_purchase pep         on gam.ACCOUNT_ID= pep.ACCOUNT_ID and gam.USER_ID= pep.USER_ID and gam.MONTH=pep.month\nleft join pyc_rewards_cashback prc         on gam.ACCOUNT_ID= prc.ACCOUNT_ID and gam.USER_ID= prc.USER_ID and gam.MONTH=prc.month\n\nleft join atm_reimbursement atmr           on gam.ACCOUNT_ID=atmr.ACCOUNT_ID and gam.USER_ID=atmr.USER_ID and gam.MONTH=atmr.month\nleft join atm_interchange_network_fee atmf on gam.ACCOUNT_ID=atmf.ACCOUNT_ID and gam.USER_ID=atmf.USER_ID and gam.MONTH=atmf.month\n\nleft join investment_pwif_revenue           ipr on gam.UNIQUE_ACCOUNT_ID= ipr.UNIQUE_ACCOUNT_ID and gam.MONTH= ipr.month\nleft join prorated_investment_pwif_revenue pipr on gam.UNIQUE_ACCOUNT_ID=pipr.UNIQUE_ACCOUNT_ID and gam.MONTH=pipr.month\n\nwhere 1=1\n--  and (aa.termination_date is null or gam.MONTH <= aa.termination_date)\n\nunion all\n\n-- credit cards\nselect\n    cam.USER_ID,\n    cam.UNIQUE_ACCOUNT_ID,\n    'Credit', --.ACCOUNT_TYPE,\n    cam.MONTH,\n    cam.INCEPTION_DATE,\n\n    cuattr.lead_arrival_date,\n    cuattr.entered_credentials_date,\n    NULL, -- .external_bank_account_connected_date,\n    ccsd.CIP_status_date,\n    NULL, -- .debit_card_activation_date,\n    cfp.first_purchase_date,\n    cuattr.inviting_user_id,\n    cuattr.UTM_SOURCE,\n    cuattr.UTM_CATEGORY,\n    NULL, -- .is_admin_disabled,\n    NULL, -- .termination_date,\n    NULL, -- .is_charged_off,\n\n    NULL, -- .initial_transfer_posted_date,\n\n    cp.total_credit_purchase_amount as total_purchase_amount,\n    cp.total_credit_purchase_count  as total_purchase_count,\n    NULL, -- d.total_deposit_count,\n    NULL, -- d.total_deposit_amount,\n    NULL, -- wd.total_withdrawal_count,\n    NULL, -- wd.total_withdrawal_amount,\n    NULL, -- awd.total_atm_withdrawal_count,\n    NULL, -- awd.total_atm_withdrawal_amount,\n    NULL, -- dp.total_direct_deposit_amount,\n    NULL, -- dp.total_direct_deposit_count,\n    NULL, -- amb.average_spend_balance_uncensored,\n    NULL, -- amb.average_save_balance_uncensored,\n    NULL, -- amb.average_combined_balance_uncensored,\n    NULL, -- amb.average_spend_balance_censored,\n    NULL, -- amb.average_save_balance_censored,\n    NULL, -- amb.average_combined_balance_censored,\n    NULL, -- pbr.balance_ratio,\n    NULL, -- pbr.balance_ratio * ir1.INTEREST_REVENUE as promotory_prorated_interest_revenue,\n    NULL, -- pbr.balance_ratio * ir2.INTEREST_REVENUE as nano_prorated_interest_revenue,\n    NULL, -- zeroifnull(promotory_prorated_interest_revenue) + zeroifnull(nano_prorated_interest_revenue) as total_prorated_interest_revenue,\n    csna.credit_subscription_non_amortized as aplus_revenue_non_amortized,\n    csa.credit_subscription_amortized      as aplus_revenue_amortized,\n    NULL, -- ac.aplus_cost,\n    NULL, -- dpr.depository_pwif_revenue,\n    NULL, -- ipr.investment_pwif_revenue,\n    NULL, -- pipr.prorated_investment_pwif_revenue,\n    NULL, -- ic.interest_paid,\n    cir.credit_interchange_revenue as interchange_revenue, -- irv.interchange_revenue,\n    NULL, -- irw.interchange_reward,\n    cpr.credit_pyc_revenue as pyc_revenue, -- pr.pyc_revenue,\n    NULL, -- pep.total_pyc_enabled_purchase_count,\n    NULL, -- pep.total_pyc_enabled_purchase_amount,\n    NULL, -- pep.total_pyc_enabled_purchase_count * 0.1 as pyc_tree_cost,\n    NULL, -- prc.pyc_rewards_cashback,\n    NULL, -- atmr.atm_reimbursement,\n    NULL, -- atmf.atm_interchange_network_fee,\n\n    -- gross total revenue\n    zeroifnull(pyc_revenue) +\n    zeroifnull(aplus_revenue_amortized) +\n    zeroifnull(interchange_revenue) as GROSS_TOTAL_REVENUE\nfrom credit_account_months cam\n\nleft join credit_cip_status_date ccsd       on cam.USER_ID=ccsd.USER_ID\nleft join user_attributes cuattr            on cam.USER_ID=cuattr.USER_ID\nleft join credit_first_purchase cfp         on cam.ACCOUNT_ID=cfp.ACCOUNT_ID\n\nleft join credit_pyc_revenue cpr         on cam.ACCOUNT_ID=cpr.ACCOUNT_ID and cam.month=cpr.month\nleft join credit_interchange_revenue cir on cam.ACCOUNT_ID=cir.ACCOUNT_ID and cam.month=cir.month\nleft join credit_purchase cp             on cam.ACCOUNT_ID=cp.ACCOUNT_ID  and cam.month=cp.month\n\nleft join credit_subscription_non_amortized csna on cam.ACCOUNT_ID=csna.ACCOUNT_ID  and cam.month=csna.month\nleft join credit_subscription_amortized     csa  on cam.ACCOUNT_ID= csa.ACCOUNT_ID  and cam.month= csa.month\n;\n\nGRANT SELECT ON adw.etl.dt_account_rev_cogs_monthly_staging                TO ROLE SVC_SEGMENT;\n"}}}},"visible":true}},"expectedFailure":null,"activationStatus":"ENABLED","outputIterationConnectorIDs":[],"inputIterationConnectorIDs":[]}},"successConnectors":{"2966573":{"id":2966573,"sourceID":2966518,"targetID":2966512}},"failureConnectors":{"2966569":{"id":2966569,"sourceID":2966512,"targetID":2966515},"2966574":{"id":2966574,"sourceID":2966518,"targetID":2966515}},"unconditionalConnectors":{"2966572":{"id":2966572,"sourceID":2966513,"targetID":2966518},"2966575":{"id":2966575,"sourceID":2966515,"targetID":2966514}},"trueConnectors":{},"falseConnectors":{},"iterationConnectors":{},"noteConnectors":{},"notes":{},"variables":{},"grids":{}},"info":{"name":"process_revenue_cogs","description":"","type":"ORCHESTRATION","tag":"2c96bdd7-40fe-45b5-89f1-846e6e3f8920"}}